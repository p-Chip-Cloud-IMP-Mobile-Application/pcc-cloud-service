// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Notes
//Add date times are stored in UTC formats. All dates and times received need to be sent in this format for readability and consistency

//User registered with p-Chip Cloud authenticated with firebase
model User {
  id                  String       @id @default(cuid())
  uid                 String       @unique //Auth uid from firebase
  defaultTenantUserId String?      @unique // Foreign key to primary TenantUser
  defaultTenantUser   TenantUser?  @relation(fields: [defaultTenantUserId], references: [id])
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  tenantUsers         TenantUser[] @relation("UserToTenantUser")
}

//A list of tenants (companies, organizations or other legal entities) that are registered and approved to access the data. The tenant is the highest level of user access restriction
model Tenant {
  id                        String              @id @default(cuid())
  name                      String
  website                   String
  logo                      String
  isActive                  Boolean             @default(true)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  tenantUsers               TenantUser[]        @relation("TenantToTenantUser")
  documentConfig            DocumentConfig[]    @relation("TenantToDocumentConfig")
  createdPublishedDocuments PublishedDocument[] @relation("TenantToPublishedDocument")
  ownedPublishedDocuments   PublishedDocument[] @relation("OwnerToPublishedDocument")
  mticReaders               MTICReader[]        @relation("TenantToMTICReader")
}

//Users that have been granted access to tenant resources and data
model TenantUser {
  id            String          @id @default(cuid())
  name          String
  email         String
  userId        String?
  user          User?           @relation("UserToTenantUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  tenantId      String
  tenant        Tenant          @relation("TenantToTenantUser", fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role          Role //Role within the tenant to which they are assigned
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  tenantOrgUser TenantOrgUser[] @relation("TenantUserToTenantOrgUser")
  documents     Document[]      @relation("TenantOrgUserToDocument")
  defaultUser   User?

  @@unique([userId, tenantId])
}

//Top level roles that define what users can do within a tenant
enum Role {
  administrator //Can view everything within the tenant
  manager //Can view everyting within the tenant organizations they are assigned
  individual //Can view only the records and documents that they create
}

//A resource group within a tenant account
model TenantOrg {
  id             String          @id @default(cuid())
  name           String
  parentId       String
  parent         TenantOrg       @relation("ParentToChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  subOrgs        TenantOrg[]     @relation("ParentToChild")
  tenantOrgUsers TenantOrgUser[] @relation("TenantOrgToTenantOrgUser")
  tenantOrgDocs  TenantOrgDoc[]  @relation("TenantOrgToTenantOrgDoc")
  documents      Document[]      @relation("TenantOrgToDocument")
}

//A tenant organization user is a method of apply rules and permission of tenant for documents created or owned by a tenant organization
model TenantOrgUser {
  tenantOrgId  String
  tenantOrg    TenantOrg  @relation("TenantOrgToTenantOrgUser", fields: [tenantOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantUserId String
  tenantUser   TenantUser @relation("TenantUserToTenantOrgUser", fields: [tenantUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission   Permission //What the user can do within an organization
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([tenantOrgId, tenantUserId])
}

//Tenant users permission within an organization. Users may be allowed to read everything within a tenant, but only able to write or delete records within certain sub organizations
enum Permission {
  read
  write
  delete
}

//The type of document such as a product, test, or other document type tha the tenant wants to specify
model DocumentConfig {
  id                String             @id @default(cuid())
  name              String
  templateFields    Json               @default("[{}]") //Fields where the value is it in the document object. //Example: Product Name, SKU, Description, Image, Etc.
  documentFields    Json               @default("[{}]") //Fields where the value will is set in tracked documents //Example: Created Date, Created Location, Batch Number, Etc.
  tenantId          String
  tenant            Tenant             @relation("TenantToDocumentConfig", fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  documentTemplates DocumentTemplate[] @relation("DocumentConfigToDocumentTemplate")
}

//A prefilled template that follows the rules defined by the document config file. The config file defines the fields of the document, the rules of how they must be completed the templates are the documents completed based on those rules
model DocumentTemplate {
  id               String         @id @default(cuid())
  name             String
  documentConfigId String
  documentConfig   DocumentConfig @relation("DocumentConfigToDocumentTemplate", fields: [documentConfigId], references: [id], onDelete: Cascade)
  templateFields   Json           @default("[{}]")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tenantOrgDocs    TenantOrgDoc[] @relation("DocumentTemplateToTenantOrgDoc")
  documents        Document[]     @relation("DocumentToDocument")
}

//Document templates can be assigned to one or more tenant organizations. This allows a tenant to control which departments, locations, or other classification where users are able to create specific documents
model TenantOrgDoc {
  tenantOrgId        String
  tenantOrg          TenantOrg        @relation("TenantOrgToTenantOrgDoc", fields: [tenantOrgId], references: [id], onDelete: Cascade)
  documentTemplateId String
  documentTemplate   DocumentTemplate @relation("DocumentTemplateToTenantOrgDoc", fields: [documentTemplateId], references: [id], onDelete: Cascade)
  permission         Permission //Read, write or delete
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@id([tenantOrgId, documentTemplateId])
}

//Documents are document templates, where additional information is added at point of creation. For example, a document template may be a product that a company produces. The document is a production batch of 100 individual products. Documents store additional information about the related items that are common across all of the items such as batch number, production location, ingredients, etc.
model Document {
  id                 String           @id @default(cuid())
  uid                String           @default(cuid())
  documentTemplateId String
  documentTemplate   DocumentTemplate @relation("DocumentToDocument", fields: [documentTemplateId], references: [id], onDelete: Cascade)
  tenantOrgId        String
  tenantOrg          TenantOrg        @relation("TenantOrgToDocument", fields: [tenantOrgId], references: [id], onDelete: Cascade)
  documentFields     Json             @default("[{}]")
  createdById        String
  createdBy          TenantUser       @relation("TenantOrgUserToDocument", fields: [createdById], references: [id], onDelete: NoAction)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  mticDocuments      MTICDocument[]   @relation("DocumentToMTICDocument")
}

//Micro-transponder identify chip that are attached to tracked documents
model MTIC {
  id                 String              @id
  uid                String              @default(cuid()) //A universally unique id that is associated with the tracked document. This unique id cannot be changed.
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  mticLogs           MTICLog[]           @relation("MTICtoMTICLog")
  publishedDocuments PublishedDocument[] @relation("MTICToPublishedDocument")
}

//Micro Transponder Identify Chip logs store metadata of locale data for every registred scan of a microtransonder tag. This includes device, time and location data
model MTICLog {
  id            String         @id @default(cuid())
  mticId        String
  mtic          MTIC           @relation("MTICtoMTICLog", fields: [mticId], references: [id], onDelete: NoAction)
  mticReaderId  String
  mticReader    MTICReader     @relation("MTICReaderToMTICLog", fields: [mticReaderId], references: [id], onDelete: NoAction)
  lat           Decimal
  lon           Decimal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mticDocuments MTICDocument[] @relation("MTICLogToMTICDocument")
}

//A device that is designed to scan and read MTIC's. Each device has a unique serial number which is the id field of the object
model MTICReader {
  id        String    @id
  isActive  Boolean   @default(true)
  tenantId  String
  tenant    Tenant    @relation("TenantToMTICReader", fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mticLogs  MTICLog[] @relation("MTICReaderToMTICLog")
}

//A document to which one or more MTIC chip, representing physical objects, has been applied. For a document to be created, an MTIC log event needs to occur. That log event is then used to associate one document with multiple MTIC tags
model MTICDocument {
  id         String   @id @default(cuid())
  mticLogId  String
  mticLog    MTICLog  @relation("MTICLogToMTICDocument", fields: [mticLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String
  document   Document @relation("DocumentToMTICDocument", fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Event {
  create
  read
  update
  delete
  transfer
}

model PublishedDocument {
  id           String   @id
  uid          String // camelCase for field names
  mticId       String
  mtic         MTIC     @relation("MTICToPublishedDocument", fields: [mticId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documentJson Json
  createdById  String
  createdBy    Tenant   @relation("TenantToPublishedDocument", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId      String // Ensure consistent camelCase naming
  owner        Tenant   @relation("OwnerToPublishedDocument", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: Cascade) // Added a relation name for clarity
  createdAt    DateTime @default(now())
}
