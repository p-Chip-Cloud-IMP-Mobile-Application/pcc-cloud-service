
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model TenantUser
 * 
 */
export type TenantUser = $Result.DefaultSelection<Prisma.$TenantUserPayload>
/**
 * Model TenantOrg
 * 
 */
export type TenantOrg = $Result.DefaultSelection<Prisma.$TenantOrgPayload>
/**
 * Model TenantOrgUser
 * 
 */
export type TenantOrgUser = $Result.DefaultSelection<Prisma.$TenantOrgUserPayload>
/**
 * Model DocumentConfig
 * 
 */
export type DocumentConfig = $Result.DefaultSelection<Prisma.$DocumentConfigPayload>
/**
 * Model DocumentTemplate
 * 
 */
export type DocumentTemplate = $Result.DefaultSelection<Prisma.$DocumentTemplatePayload>
/**
 * Model TenantOrgDoc
 * 
 */
export type TenantOrgDoc = $Result.DefaultSelection<Prisma.$TenantOrgDocPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model MTIC
 * 
 */
export type MTIC = $Result.DefaultSelection<Prisma.$MTICPayload>
/**
 * Model MTICLog
 * 
 */
export type MTICLog = $Result.DefaultSelection<Prisma.$MTICLogPayload>
/**
 * Model MTICReader
 * 
 */
export type MTICReader = $Result.DefaultSelection<Prisma.$MTICReaderPayload>
/**
 * Model MTICDocument
 * 
 */
export type MTICDocument = $Result.DefaultSelection<Prisma.$MTICDocumentPayload>
/**
 * Model PublishedDocument
 * 
 */
export type PublishedDocument = $Result.DefaultSelection<Prisma.$PublishedDocumentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  administrator: 'administrator',
  manager: 'manager',
  individual: 'individual'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Permission: {
  read: 'read',
  write: 'write',
  delete: 'delete'
};

export type Permission = (typeof Permission)[keyof typeof Permission]


export const Event: {
  create: 'create',
  read: 'read',
  update: 'update',
  delete: 'delete',
  transfer: 'transfer'
};

export type Event = (typeof Event)[keyof typeof Event]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Permission = $Enums.Permission

export const Permission: typeof $Enums.Permission

export type Event = $Enums.Event

export const Event: typeof $Enums.Event

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.tenantUser`: Exposes CRUD operations for the **TenantUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantUsers
    * const tenantUsers = await prisma.tenantUser.findMany()
    * ```
    */
  get tenantUser(): Prisma.TenantUserDelegate<ExtArgs>;

  /**
   * `prisma.tenantOrg`: Exposes CRUD operations for the **TenantOrg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantOrgs
    * const tenantOrgs = await prisma.tenantOrg.findMany()
    * ```
    */
  get tenantOrg(): Prisma.TenantOrgDelegate<ExtArgs>;

  /**
   * `prisma.tenantOrgUser`: Exposes CRUD operations for the **TenantOrgUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantOrgUsers
    * const tenantOrgUsers = await prisma.tenantOrgUser.findMany()
    * ```
    */
  get tenantOrgUser(): Prisma.TenantOrgUserDelegate<ExtArgs>;

  /**
   * `prisma.documentConfig`: Exposes CRUD operations for the **DocumentConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentConfigs
    * const documentConfigs = await prisma.documentConfig.findMany()
    * ```
    */
  get documentConfig(): Prisma.DocumentConfigDelegate<ExtArgs>;

  /**
   * `prisma.documentTemplate`: Exposes CRUD operations for the **DocumentTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTemplates
    * const documentTemplates = await prisma.documentTemplate.findMany()
    * ```
    */
  get documentTemplate(): Prisma.DocumentTemplateDelegate<ExtArgs>;

  /**
   * `prisma.tenantOrgDoc`: Exposes CRUD operations for the **TenantOrgDoc** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantOrgDocs
    * const tenantOrgDocs = await prisma.tenantOrgDoc.findMany()
    * ```
    */
  get tenantOrgDoc(): Prisma.TenantOrgDocDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.mTIC`: Exposes CRUD operations for the **MTIC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MTICS
    * const mTICS = await prisma.mTIC.findMany()
    * ```
    */
  get mTIC(): Prisma.MTICDelegate<ExtArgs>;

  /**
   * `prisma.mTICLog`: Exposes CRUD operations for the **MTICLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MTICLogs
    * const mTICLogs = await prisma.mTICLog.findMany()
    * ```
    */
  get mTICLog(): Prisma.MTICLogDelegate<ExtArgs>;

  /**
   * `prisma.mTICReader`: Exposes CRUD operations for the **MTICReader** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MTICReaders
    * const mTICReaders = await prisma.mTICReader.findMany()
    * ```
    */
  get mTICReader(): Prisma.MTICReaderDelegate<ExtArgs>;

  /**
   * `prisma.mTICDocument`: Exposes CRUD operations for the **MTICDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MTICDocuments
    * const mTICDocuments = await prisma.mTICDocument.findMany()
    * ```
    */
  get mTICDocument(): Prisma.MTICDocumentDelegate<ExtArgs>;

  /**
   * `prisma.publishedDocument`: Exposes CRUD operations for the **PublishedDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublishedDocuments
    * const publishedDocuments = await prisma.publishedDocument.findMany()
    * ```
    */
  get publishedDocument(): Prisma.PublishedDocumentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Tenant: 'Tenant',
    TenantUser: 'TenantUser',
    TenantOrg: 'TenantOrg',
    TenantOrgUser: 'TenantOrgUser',
    DocumentConfig: 'DocumentConfig',
    DocumentTemplate: 'DocumentTemplate',
    TenantOrgDoc: 'TenantOrgDoc',
    Document: 'Document',
    MTIC: 'MTIC',
    MTICLog: 'MTICLog',
    MTICReader: 'MTICReader',
    MTICDocument: 'MTICDocument',
    PublishedDocument: 'PublishedDocument'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "tenant" | "tenantUser" | "tenantOrg" | "tenantOrgUser" | "documentConfig" | "documentTemplate" | "tenantOrgDoc" | "document" | "mTIC" | "mTICLog" | "mTICReader" | "mTICDocument" | "publishedDocument"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      TenantUser: {
        payload: Prisma.$TenantUserPayload<ExtArgs>
        fields: Prisma.TenantUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          findFirst: {
            args: Prisma.TenantUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          findMany: {
            args: Prisma.TenantUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>[]
          }
          create: {
            args: Prisma.TenantUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          createMany: {
            args: Prisma.TenantUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>[]
          }
          delete: {
            args: Prisma.TenantUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          update: {
            args: Prisma.TenantUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          deleteMany: {
            args: Prisma.TenantUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantUserPayload>
          }
          aggregate: {
            args: Prisma.TenantUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantUser>
          }
          groupBy: {
            args: Prisma.TenantUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantUserCountArgs<ExtArgs>
            result: $Utils.Optional<TenantUserCountAggregateOutputType> | number
          }
        }
      }
      TenantOrg: {
        payload: Prisma.$TenantOrgPayload<ExtArgs>
        fields: Prisma.TenantOrgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantOrgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantOrgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          findFirst: {
            args: Prisma.TenantOrgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantOrgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          findMany: {
            args: Prisma.TenantOrgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>[]
          }
          create: {
            args: Prisma.TenantOrgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          createMany: {
            args: Prisma.TenantOrgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantOrgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>[]
          }
          delete: {
            args: Prisma.TenantOrgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          update: {
            args: Prisma.TenantOrgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          deleteMany: {
            args: Prisma.TenantOrgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantOrgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantOrgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgPayload>
          }
          aggregate: {
            args: Prisma.TenantOrgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantOrg>
          }
          groupBy: {
            args: Prisma.TenantOrgGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantOrgCountArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgCountAggregateOutputType> | number
          }
        }
      }
      TenantOrgUser: {
        payload: Prisma.$TenantOrgUserPayload<ExtArgs>
        fields: Prisma.TenantOrgUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantOrgUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantOrgUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          findFirst: {
            args: Prisma.TenantOrgUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantOrgUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          findMany: {
            args: Prisma.TenantOrgUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>[]
          }
          create: {
            args: Prisma.TenantOrgUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          createMany: {
            args: Prisma.TenantOrgUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantOrgUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>[]
          }
          delete: {
            args: Prisma.TenantOrgUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          update: {
            args: Prisma.TenantOrgUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          deleteMany: {
            args: Prisma.TenantOrgUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantOrgUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantOrgUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgUserPayload>
          }
          aggregate: {
            args: Prisma.TenantOrgUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantOrgUser>
          }
          groupBy: {
            args: Prisma.TenantOrgUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantOrgUserCountArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgUserCountAggregateOutputType> | number
          }
        }
      }
      DocumentConfig: {
        payload: Prisma.$DocumentConfigPayload<ExtArgs>
        fields: Prisma.DocumentConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          findFirst: {
            args: Prisma.DocumentConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          findMany: {
            args: Prisma.DocumentConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>[]
          }
          create: {
            args: Prisma.DocumentConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          createMany: {
            args: Prisma.DocumentConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>[]
          }
          delete: {
            args: Prisma.DocumentConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          update: {
            args: Prisma.DocumentConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          deleteMany: {
            args: Prisma.DocumentConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentConfigPayload>
          }
          aggregate: {
            args: Prisma.DocumentConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentConfig>
          }
          groupBy: {
            args: Prisma.DocumentConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentConfigCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentConfigCountAggregateOutputType> | number
          }
        }
      }
      DocumentTemplate: {
        payload: Prisma.$DocumentTemplatePayload<ExtArgs>
        fields: Prisma.DocumentTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findFirst: {
            args: Prisma.DocumentTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findMany: {
            args: Prisma.DocumentTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          create: {
            args: Prisma.DocumentTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          createMany: {
            args: Prisma.DocumentTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          delete: {
            args: Prisma.DocumentTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          update: {
            args: Prisma.DocumentTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          aggregate: {
            args: Prisma.DocumentTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentTemplate>
          }
          groupBy: {
            args: Prisma.DocumentTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateCountAggregateOutputType> | number
          }
        }
      }
      TenantOrgDoc: {
        payload: Prisma.$TenantOrgDocPayload<ExtArgs>
        fields: Prisma.TenantOrgDocFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantOrgDocFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantOrgDocFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          findFirst: {
            args: Prisma.TenantOrgDocFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantOrgDocFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          findMany: {
            args: Prisma.TenantOrgDocFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>[]
          }
          create: {
            args: Prisma.TenantOrgDocCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          createMany: {
            args: Prisma.TenantOrgDocCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantOrgDocCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>[]
          }
          delete: {
            args: Prisma.TenantOrgDocDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          update: {
            args: Prisma.TenantOrgDocUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          deleteMany: {
            args: Prisma.TenantOrgDocDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantOrgDocUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantOrgDocUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantOrgDocPayload>
          }
          aggregate: {
            args: Prisma.TenantOrgDocAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantOrgDoc>
          }
          groupBy: {
            args: Prisma.TenantOrgDocGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgDocGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantOrgDocCountArgs<ExtArgs>
            result: $Utils.Optional<TenantOrgDocCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      MTIC: {
        payload: Prisma.$MTICPayload<ExtArgs>
        fields: Prisma.MTICFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MTICFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MTICFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          findFirst: {
            args: Prisma.MTICFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MTICFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          findMany: {
            args: Prisma.MTICFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>[]
          }
          create: {
            args: Prisma.MTICCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          createMany: {
            args: Prisma.MTICCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MTICCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>[]
          }
          delete: {
            args: Prisma.MTICDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          update: {
            args: Prisma.MTICUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          deleteMany: {
            args: Prisma.MTICDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MTICUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MTICUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICPayload>
          }
          aggregate: {
            args: Prisma.MTICAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMTIC>
          }
          groupBy: {
            args: Prisma.MTICGroupByArgs<ExtArgs>
            result: $Utils.Optional<MTICGroupByOutputType>[]
          }
          count: {
            args: Prisma.MTICCountArgs<ExtArgs>
            result: $Utils.Optional<MTICCountAggregateOutputType> | number
          }
        }
      }
      MTICLog: {
        payload: Prisma.$MTICLogPayload<ExtArgs>
        fields: Prisma.MTICLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MTICLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MTICLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          findFirst: {
            args: Prisma.MTICLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MTICLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          findMany: {
            args: Prisma.MTICLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>[]
          }
          create: {
            args: Prisma.MTICLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          createMany: {
            args: Prisma.MTICLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MTICLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>[]
          }
          delete: {
            args: Prisma.MTICLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          update: {
            args: Prisma.MTICLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          deleteMany: {
            args: Prisma.MTICLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MTICLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MTICLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICLogPayload>
          }
          aggregate: {
            args: Prisma.MTICLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMTICLog>
          }
          groupBy: {
            args: Prisma.MTICLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<MTICLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.MTICLogCountArgs<ExtArgs>
            result: $Utils.Optional<MTICLogCountAggregateOutputType> | number
          }
        }
      }
      MTICReader: {
        payload: Prisma.$MTICReaderPayload<ExtArgs>
        fields: Prisma.MTICReaderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MTICReaderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MTICReaderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          findFirst: {
            args: Prisma.MTICReaderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MTICReaderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          findMany: {
            args: Prisma.MTICReaderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>[]
          }
          create: {
            args: Prisma.MTICReaderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          createMany: {
            args: Prisma.MTICReaderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MTICReaderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>[]
          }
          delete: {
            args: Prisma.MTICReaderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          update: {
            args: Prisma.MTICReaderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          deleteMany: {
            args: Prisma.MTICReaderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MTICReaderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MTICReaderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICReaderPayload>
          }
          aggregate: {
            args: Prisma.MTICReaderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMTICReader>
          }
          groupBy: {
            args: Prisma.MTICReaderGroupByArgs<ExtArgs>
            result: $Utils.Optional<MTICReaderGroupByOutputType>[]
          }
          count: {
            args: Prisma.MTICReaderCountArgs<ExtArgs>
            result: $Utils.Optional<MTICReaderCountAggregateOutputType> | number
          }
        }
      }
      MTICDocument: {
        payload: Prisma.$MTICDocumentPayload<ExtArgs>
        fields: Prisma.MTICDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MTICDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MTICDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          findFirst: {
            args: Prisma.MTICDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MTICDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          findMany: {
            args: Prisma.MTICDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>[]
          }
          create: {
            args: Prisma.MTICDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          createMany: {
            args: Prisma.MTICDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MTICDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>[]
          }
          delete: {
            args: Prisma.MTICDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          update: {
            args: Prisma.MTICDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          deleteMany: {
            args: Prisma.MTICDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MTICDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MTICDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MTICDocumentPayload>
          }
          aggregate: {
            args: Prisma.MTICDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMTICDocument>
          }
          groupBy: {
            args: Prisma.MTICDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<MTICDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.MTICDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<MTICDocumentCountAggregateOutputType> | number
          }
        }
      }
      PublishedDocument: {
        payload: Prisma.$PublishedDocumentPayload<ExtArgs>
        fields: Prisma.PublishedDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublishedDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublishedDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          findFirst: {
            args: Prisma.PublishedDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublishedDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          findMany: {
            args: Prisma.PublishedDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>[]
          }
          create: {
            args: Prisma.PublishedDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          createMany: {
            args: Prisma.PublishedDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublishedDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>[]
          }
          delete: {
            args: Prisma.PublishedDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          update: {
            args: Prisma.PublishedDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          deleteMany: {
            args: Prisma.PublishedDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublishedDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublishedDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedDocumentPayload>
          }
          aggregate: {
            args: Prisma.PublishedDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublishedDocument>
          }
          groupBy: {
            args: Prisma.PublishedDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublishedDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublishedDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<PublishedDocumentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tenantUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantUsers?: boolean | UserCountOutputTypeCountTenantUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTenantUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantUserWhereInput
  }


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    tenantUsers: number
    documentConfig: number
    documentTemplates: number
    createdPublishedDocuments: number
    ownedPublishedDocuments: number
    mticReaders: number
    tenantOrgs: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantUsers?: boolean | TenantCountOutputTypeCountTenantUsersArgs
    documentConfig?: boolean | TenantCountOutputTypeCountDocumentConfigArgs
    documentTemplates?: boolean | TenantCountOutputTypeCountDocumentTemplatesArgs
    createdPublishedDocuments?: boolean | TenantCountOutputTypeCountCreatedPublishedDocumentsArgs
    ownedPublishedDocuments?: boolean | TenantCountOutputTypeCountOwnedPublishedDocumentsArgs
    mticReaders?: boolean | TenantCountOutputTypeCountMticReadersArgs
    tenantOrgs?: boolean | TenantCountOutputTypeCountTenantOrgsArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTenantUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantUserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountDocumentConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentConfigWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountDocumentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCreatedPublishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedDocumentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountOwnedPublishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedDocumentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMticReadersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICReaderWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTenantOrgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgWhereInput
  }


  /**
   * Count Type TenantUserCountOutputType
   */

  export type TenantUserCountOutputType = {
    tenantOrgUser: number
    documents: number
  }

  export type TenantUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrgUser?: boolean | TenantUserCountOutputTypeCountTenantOrgUserArgs
    documents?: boolean | TenantUserCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * TenantUserCountOutputType without action
   */
  export type TenantUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUserCountOutputType
     */
    select?: TenantUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantUserCountOutputType without action
   */
  export type TenantUserCountOutputTypeCountTenantOrgUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgUserWhereInput
  }

  /**
   * TenantUserCountOutputType without action
   */
  export type TenantUserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type TenantOrgCountOutputType
   */

  export type TenantOrgCountOutputType = {
    subOrgs: number
    tenantOrgUsers: number
    tenantOrgDocs: number
    documents: number
  }

  export type TenantOrgCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subOrgs?: boolean | TenantOrgCountOutputTypeCountSubOrgsArgs
    tenantOrgUsers?: boolean | TenantOrgCountOutputTypeCountTenantOrgUsersArgs
    tenantOrgDocs?: boolean | TenantOrgCountOutputTypeCountTenantOrgDocsArgs
    documents?: boolean | TenantOrgCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * TenantOrgCountOutputType without action
   */
  export type TenantOrgCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgCountOutputType
     */
    select?: TenantOrgCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantOrgCountOutputType without action
   */
  export type TenantOrgCountOutputTypeCountSubOrgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgWhereInput
  }

  /**
   * TenantOrgCountOutputType without action
   */
  export type TenantOrgCountOutputTypeCountTenantOrgUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgUserWhereInput
  }

  /**
   * TenantOrgCountOutputType without action
   */
  export type TenantOrgCountOutputTypeCountTenantOrgDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgDocWhereInput
  }

  /**
   * TenantOrgCountOutputType without action
   */
  export type TenantOrgCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type DocumentConfigCountOutputType
   */

  export type DocumentConfigCountOutputType = {
    documentTemplates: number
  }

  export type DocumentConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplates?: boolean | DocumentConfigCountOutputTypeCountDocumentTemplatesArgs
  }

  // Custom InputTypes
  /**
   * DocumentConfigCountOutputType without action
   */
  export type DocumentConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfigCountOutputType
     */
    select?: DocumentConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentConfigCountOutputType without action
   */
  export type DocumentConfigCountOutputTypeCountDocumentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
  }


  /**
   * Count Type DocumentTemplateCountOutputType
   */

  export type DocumentTemplateCountOutputType = {
    tenantOrgDocs: number
    documents: number
  }

  export type DocumentTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrgDocs?: boolean | DocumentTemplateCountOutputTypeCountTenantOrgDocsArgs
    documents?: boolean | DocumentTemplateCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateCountOutputType
     */
    select?: DocumentTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeCountTenantOrgDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgDocWhereInput
  }

  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    mticDocuments: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mticDocuments?: boolean | DocumentCountOutputTypeCountMticDocumentsArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountMticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICDocumentWhereInput
  }


  /**
   * Count Type MTICCountOutputType
   */

  export type MTICCountOutputType = {
    mticLogs: number
    publishedDocuments: number
    mticDocuments: number
  }

  export type MTICCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mticLogs?: boolean | MTICCountOutputTypeCountMticLogsArgs
    publishedDocuments?: boolean | MTICCountOutputTypeCountPublishedDocumentsArgs
    mticDocuments?: boolean | MTICCountOutputTypeCountMticDocumentsArgs
  }

  // Custom InputTypes
  /**
   * MTICCountOutputType without action
   */
  export type MTICCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICCountOutputType
     */
    select?: MTICCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MTICCountOutputType without action
   */
  export type MTICCountOutputTypeCountMticLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICLogWhereInput
  }

  /**
   * MTICCountOutputType without action
   */
  export type MTICCountOutputTypeCountPublishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedDocumentWhereInput
  }

  /**
   * MTICCountOutputType without action
   */
  export type MTICCountOutputTypeCountMticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICDocumentWhereInput
  }


  /**
   * Count Type MTICLogCountOutputType
   */

  export type MTICLogCountOutputType = {
    mticDocuments: number
  }

  export type MTICLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mticDocuments?: boolean | MTICLogCountOutputTypeCountMticDocumentsArgs
  }

  // Custom InputTypes
  /**
   * MTICLogCountOutputType without action
   */
  export type MTICLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLogCountOutputType
     */
    select?: MTICLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MTICLogCountOutputType without action
   */
  export type MTICLogCountOutputTypeCountMticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICDocumentWhereInput
  }


  /**
   * Count Type MTICReaderCountOutputType
   */

  export type MTICReaderCountOutputType = {
    mticLogs: number
  }

  export type MTICReaderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mticLogs?: boolean | MTICReaderCountOutputTypeCountMticLogsArgs
  }

  // Custom InputTypes
  /**
   * MTICReaderCountOutputType without action
   */
  export type MTICReaderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReaderCountOutputType
     */
    select?: MTICReaderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MTICReaderCountOutputType without action
   */
  export type MTICReaderCountOutputTypeCountMticLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    uid: string | null
    name: string | null
    email: string | null
    defaultTenantUserId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    name: string | null
    email: string | null
    defaultTenantUserId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    uid: number
    name: number
    email: number
    defaultTenantUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    defaultTenantUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    defaultTenantUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    defaultTenantUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    uid: string
    name: string
    email: string
    defaultTenantUserId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    name?: boolean
    email?: boolean
    defaultTenantUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    defaultTenantUser?: boolean | User$defaultTenantUserArgs<ExtArgs>
    tenantUsers?: boolean | User$tenantUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    name?: boolean
    email?: boolean
    defaultTenantUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    defaultTenantUser?: boolean | User$defaultTenantUserArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    uid?: boolean
    name?: boolean
    email?: boolean
    defaultTenantUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    defaultTenantUser?: boolean | User$defaultTenantUserArgs<ExtArgs>
    tenantUsers?: boolean | User$tenantUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    defaultTenantUser?: boolean | User$defaultTenantUserArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      defaultTenantUser: Prisma.$TenantUserPayload<ExtArgs> | null
      tenantUsers: Prisma.$TenantUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      name: string
      email: string
      defaultTenantUserId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    defaultTenantUser<T extends User$defaultTenantUserArgs<ExtArgs> = {}>(args?: Subset<T, User$defaultTenantUserArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenantUsers<T extends User$tenantUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$tenantUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly uid: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly defaultTenantUserId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.defaultTenantUser
   */
  export type User$defaultTenantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    where?: TenantUserWhereInput
  }

  /**
   * User.tenantUsers
   */
  export type User$tenantUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    where?: TenantUserWhereInput
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    cursor?: TenantUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantUserScalarFieldEnum | TenantUserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    logo: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    logo: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    website: number
    logo: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    logo?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    logo?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    logo?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    website: string
    logo: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    logo?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantUsers?: boolean | Tenant$tenantUsersArgs<ExtArgs>
    documentConfig?: boolean | Tenant$documentConfigArgs<ExtArgs>
    documentTemplates?: boolean | Tenant$documentTemplatesArgs<ExtArgs>
    createdPublishedDocuments?: boolean | Tenant$createdPublishedDocumentsArgs<ExtArgs>
    ownedPublishedDocuments?: boolean | Tenant$ownedPublishedDocumentsArgs<ExtArgs>
    mticReaders?: boolean | Tenant$mticReadersArgs<ExtArgs>
    tenantOrgs?: boolean | Tenant$tenantOrgsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    logo?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    website?: boolean
    logo?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantUsers?: boolean | Tenant$tenantUsersArgs<ExtArgs>
    documentConfig?: boolean | Tenant$documentConfigArgs<ExtArgs>
    documentTemplates?: boolean | Tenant$documentTemplatesArgs<ExtArgs>
    createdPublishedDocuments?: boolean | Tenant$createdPublishedDocumentsArgs<ExtArgs>
    ownedPublishedDocuments?: boolean | Tenant$ownedPublishedDocumentsArgs<ExtArgs>
    mticReaders?: boolean | Tenant$mticReadersArgs<ExtArgs>
    tenantOrgs?: boolean | Tenant$tenantOrgsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      tenantUsers: Prisma.$TenantUserPayload<ExtArgs>[]
      documentConfig: Prisma.$DocumentConfigPayload<ExtArgs>[]
      documentTemplates: Prisma.$DocumentTemplatePayload<ExtArgs>[]
      createdPublishedDocuments: Prisma.$PublishedDocumentPayload<ExtArgs>[]
      ownedPublishedDocuments: Prisma.$PublishedDocumentPayload<ExtArgs>[]
      mticReaders: Prisma.$MTICReaderPayload<ExtArgs>[]
      tenantOrgs: Prisma.$TenantOrgPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      website: string
      logo: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenantUsers<T extends Tenant$tenantUsersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$tenantUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findMany"> | Null>
    documentConfig<T extends Tenant$documentConfigArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$documentConfigArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findMany"> | Null>
    documentTemplates<T extends Tenant$documentTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$documentTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    createdPublishedDocuments<T extends Tenant$createdPublishedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$createdPublishedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    ownedPublishedDocuments<T extends Tenant$ownedPublishedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$ownedPublishedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    mticReaders<T extends Tenant$mticReadersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$mticReadersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findMany"> | Null>
    tenantOrgs<T extends Tenant$tenantOrgsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$tenantOrgsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly website: FieldRef<"Tenant", 'String'>
    readonly logo: FieldRef<"Tenant", 'String'>
    readonly isActive: FieldRef<"Tenant", 'Boolean'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.tenantUsers
   */
  export type Tenant$tenantUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    where?: TenantUserWhereInput
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    cursor?: TenantUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantUserScalarFieldEnum | TenantUserScalarFieldEnum[]
  }

  /**
   * Tenant.documentConfig
   */
  export type Tenant$documentConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    where?: DocumentConfigWhereInput
    orderBy?: DocumentConfigOrderByWithRelationInput | DocumentConfigOrderByWithRelationInput[]
    cursor?: DocumentConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentConfigScalarFieldEnum | DocumentConfigScalarFieldEnum[]
  }

  /**
   * Tenant.documentTemplates
   */
  export type Tenant$documentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    cursor?: DocumentTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * Tenant.createdPublishedDocuments
   */
  export type Tenant$createdPublishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    where?: PublishedDocumentWhereInput
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    cursor?: PublishedDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * Tenant.ownedPublishedDocuments
   */
  export type Tenant$ownedPublishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    where?: PublishedDocumentWhereInput
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    cursor?: PublishedDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * Tenant.mticReaders
   */
  export type Tenant$mticReadersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    where?: MTICReaderWhereInput
    orderBy?: MTICReaderOrderByWithRelationInput | MTICReaderOrderByWithRelationInput[]
    cursor?: MTICReaderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICReaderScalarFieldEnum | MTICReaderScalarFieldEnum[]
  }

  /**
   * Tenant.tenantOrgs
   */
  export type Tenant$tenantOrgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    where?: TenantOrgWhereInput
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    cursor?: TenantOrgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgScalarFieldEnum | TenantOrgScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model TenantUser
   */

  export type AggregateTenantUser = {
    _count: TenantUserCountAggregateOutputType | null
    _min: TenantUserMinAggregateOutputType | null
    _max: TenantUserMaxAggregateOutputType | null
  }

  export type TenantUserMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantUserMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantUserCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantUserMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantUserMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantUserCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantUser to aggregate.
     */
    where?: TenantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantUsers to fetch.
     */
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantUsers
    **/
    _count?: true | TenantUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantUserMaxAggregateInputType
  }

  export type GetTenantUserAggregateType<T extends TenantUserAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantUser[P]>
      : GetScalarType<T[P], AggregateTenantUser[P]>
  }




  export type TenantUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantUserWhereInput
    orderBy?: TenantUserOrderByWithAggregationInput | TenantUserOrderByWithAggregationInput[]
    by: TenantUserScalarFieldEnum[] | TenantUserScalarFieldEnum
    having?: TenantUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantUserCountAggregateInputType | true
    _min?: TenantUserMinAggregateInputType
    _max?: TenantUserMaxAggregateInputType
  }

  export type TenantUserGroupByOutputType = {
    id: string
    userId: string | null
    tenantId: string
    role: $Enums.Role
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TenantUserCountAggregateOutputType | null
    _min: TenantUserMinAggregateOutputType | null
    _max: TenantUserMaxAggregateOutputType | null
  }

  type GetTenantUserGroupByPayload<T extends TenantUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantUserGroupByOutputType[P]>
            : GetScalarType<T[P], TenantUserGroupByOutputType[P]>
        }
      >
    >


  export type TenantUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | TenantUser$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    tenantOrgUser?: boolean | TenantUser$tenantOrgUserArgs<ExtArgs>
    documents?: boolean | TenantUser$documentsArgs<ExtArgs>
    defaultUser?: boolean | TenantUser$defaultUserArgs<ExtArgs>
    _count?: boolean | TenantUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantUser"]>

  export type TenantUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | TenantUser$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantUser"]>

  export type TenantUserSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TenantUser$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    tenantOrgUser?: boolean | TenantUser$tenantOrgUserArgs<ExtArgs>
    documents?: boolean | TenantUser$documentsArgs<ExtArgs>
    defaultUser?: boolean | TenantUser$defaultUserArgs<ExtArgs>
    _count?: boolean | TenantUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TenantUser$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TenantUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
      tenantOrgUser: Prisma.$TenantOrgUserPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      defaultUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      tenantId: string
      role: $Enums.Role
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenantUser"]>
    composites: {}
  }

  type TenantUserGetPayload<S extends boolean | null | undefined | TenantUserDefaultArgs> = $Result.GetResult<Prisma.$TenantUserPayload, S>

  type TenantUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantUserCountAggregateInputType | true
    }

  export interface TenantUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantUser'], meta: { name: 'TenantUser' } }
    /**
     * Find zero or one TenantUser that matches the filter.
     * @param {TenantUserFindUniqueArgs} args - Arguments to find a TenantUser
     * @example
     * // Get one TenantUser
     * const tenantUser = await prisma.tenantUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantUserFindUniqueArgs>(args: SelectSubset<T, TenantUserFindUniqueArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TenantUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantUserFindUniqueOrThrowArgs} args - Arguments to find a TenantUser
     * @example
     * // Get one TenantUser
     * const tenantUser = await prisma.tenantUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantUserFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TenantUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserFindFirstArgs} args - Arguments to find a TenantUser
     * @example
     * // Get one TenantUser
     * const tenantUser = await prisma.tenantUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantUserFindFirstArgs>(args?: SelectSubset<T, TenantUserFindFirstArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TenantUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserFindFirstOrThrowArgs} args - Arguments to find a TenantUser
     * @example
     * // Get one TenantUser
     * const tenantUser = await prisma.tenantUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantUserFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TenantUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantUsers
     * const tenantUsers = await prisma.tenantUser.findMany()
     * 
     * // Get first 10 TenantUsers
     * const tenantUsers = await prisma.tenantUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantUserWithIdOnly = await prisma.tenantUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantUserFindManyArgs>(args?: SelectSubset<T, TenantUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TenantUser.
     * @param {TenantUserCreateArgs} args - Arguments to create a TenantUser.
     * @example
     * // Create one TenantUser
     * const TenantUser = await prisma.tenantUser.create({
     *   data: {
     *     // ... data to create a TenantUser
     *   }
     * })
     * 
     */
    create<T extends TenantUserCreateArgs>(args: SelectSubset<T, TenantUserCreateArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TenantUsers.
     * @param {TenantUserCreateManyArgs} args - Arguments to create many TenantUsers.
     * @example
     * // Create many TenantUsers
     * const tenantUser = await prisma.tenantUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantUserCreateManyArgs>(args?: SelectSubset<T, TenantUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantUsers and returns the data saved in the database.
     * @param {TenantUserCreateManyAndReturnArgs} args - Arguments to create many TenantUsers.
     * @example
     * // Create many TenantUsers
     * const tenantUser = await prisma.tenantUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantUsers and only return the `id`
     * const tenantUserWithIdOnly = await prisma.tenantUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantUserCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TenantUser.
     * @param {TenantUserDeleteArgs} args - Arguments to delete one TenantUser.
     * @example
     * // Delete one TenantUser
     * const TenantUser = await prisma.tenantUser.delete({
     *   where: {
     *     // ... filter to delete one TenantUser
     *   }
     * })
     * 
     */
    delete<T extends TenantUserDeleteArgs>(args: SelectSubset<T, TenantUserDeleteArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TenantUser.
     * @param {TenantUserUpdateArgs} args - Arguments to update one TenantUser.
     * @example
     * // Update one TenantUser
     * const tenantUser = await prisma.tenantUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUserUpdateArgs>(args: SelectSubset<T, TenantUserUpdateArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TenantUsers.
     * @param {TenantUserDeleteManyArgs} args - Arguments to filter TenantUsers to delete.
     * @example
     * // Delete a few TenantUsers
     * const { count } = await prisma.tenantUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantUserDeleteManyArgs>(args?: SelectSubset<T, TenantUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantUsers
     * const tenantUser = await prisma.tenantUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUserUpdateManyArgs>(args: SelectSubset<T, TenantUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantUser.
     * @param {TenantUserUpsertArgs} args - Arguments to update or create a TenantUser.
     * @example
     * // Update or create a TenantUser
     * const tenantUser = await prisma.tenantUser.upsert({
     *   create: {
     *     // ... data to create a TenantUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantUser we want to update
     *   }
     * })
     */
    upsert<T extends TenantUserUpsertArgs>(args: SelectSubset<T, TenantUserUpsertArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TenantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserCountArgs} args - Arguments to filter TenantUsers to count.
     * @example
     * // Count the number of TenantUsers
     * const count = await prisma.tenantUser.count({
     *   where: {
     *     // ... the filter for the TenantUsers we want to count
     *   }
     * })
    **/
    count<T extends TenantUserCountArgs>(
      args?: Subset<T, TenantUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantUserAggregateArgs>(args: Subset<T, TenantUserAggregateArgs>): Prisma.PrismaPromise<GetTenantUserAggregateType<T>>

    /**
     * Group by TenantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantUserGroupByArgs['orderBy'] }
        : { orderBy?: TenantUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantUser model
   */
  readonly fields: TenantUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TenantUser$userArgs<ExtArgs> = {}>(args?: Subset<T, TenantUser$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenantOrgUser<T extends TenantUser$tenantOrgUserArgs<ExtArgs> = {}>(args?: Subset<T, TenantUser$tenantOrgUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends TenantUser$documentsArgs<ExtArgs> = {}>(args?: Subset<T, TenantUser$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    defaultUser<T extends TenantUser$defaultUserArgs<ExtArgs> = {}>(args?: Subset<T, TenantUser$defaultUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantUser model
   */ 
  interface TenantUserFieldRefs {
    readonly id: FieldRef<"TenantUser", 'String'>
    readonly userId: FieldRef<"TenantUser", 'String'>
    readonly tenantId: FieldRef<"TenantUser", 'String'>
    readonly role: FieldRef<"TenantUser", 'Role'>
    readonly isActive: FieldRef<"TenantUser", 'Boolean'>
    readonly createdAt: FieldRef<"TenantUser", 'DateTime'>
    readonly updatedAt: FieldRef<"TenantUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantUser findUnique
   */
  export type TenantUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantUser to fetch.
     */
    where: TenantUserWhereUniqueInput
  }

  /**
   * TenantUser findUniqueOrThrow
   */
  export type TenantUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantUser to fetch.
     */
    where: TenantUserWhereUniqueInput
  }

  /**
   * TenantUser findFirst
   */
  export type TenantUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantUser to fetch.
     */
    where?: TenantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantUsers to fetch.
     */
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantUsers.
     */
    cursor?: TenantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantUsers.
     */
    distinct?: TenantUserScalarFieldEnum | TenantUserScalarFieldEnum[]
  }

  /**
   * TenantUser findFirstOrThrow
   */
  export type TenantUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantUser to fetch.
     */
    where?: TenantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantUsers to fetch.
     */
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantUsers.
     */
    cursor?: TenantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantUsers.
     */
    distinct?: TenantUserScalarFieldEnum | TenantUserScalarFieldEnum[]
  }

  /**
   * TenantUser findMany
   */
  export type TenantUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantUsers to fetch.
     */
    where?: TenantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantUsers to fetch.
     */
    orderBy?: TenantUserOrderByWithRelationInput | TenantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantUsers.
     */
    cursor?: TenantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantUsers.
     */
    skip?: number
    distinct?: TenantUserScalarFieldEnum | TenantUserScalarFieldEnum[]
  }

  /**
   * TenantUser create
   */
  export type TenantUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantUser.
     */
    data: XOR<TenantUserCreateInput, TenantUserUncheckedCreateInput>
  }

  /**
   * TenantUser createMany
   */
  export type TenantUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantUsers.
     */
    data: TenantUserCreateManyInput | TenantUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantUser createManyAndReturn
   */
  export type TenantUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TenantUsers.
     */
    data: TenantUserCreateManyInput | TenantUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantUser update
   */
  export type TenantUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantUser.
     */
    data: XOR<TenantUserUpdateInput, TenantUserUncheckedUpdateInput>
    /**
     * Choose, which TenantUser to update.
     */
    where: TenantUserWhereUniqueInput
  }

  /**
   * TenantUser updateMany
   */
  export type TenantUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantUsers.
     */
    data: XOR<TenantUserUpdateManyMutationInput, TenantUserUncheckedUpdateManyInput>
    /**
     * Filter which TenantUsers to update
     */
    where?: TenantUserWhereInput
  }

  /**
   * TenantUser upsert
   */
  export type TenantUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantUser to update in case it exists.
     */
    where: TenantUserWhereUniqueInput
    /**
     * In case the TenantUser found by the `where` argument doesn't exist, create a new TenantUser with this data.
     */
    create: XOR<TenantUserCreateInput, TenantUserUncheckedCreateInput>
    /**
     * In case the TenantUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUserUpdateInput, TenantUserUncheckedUpdateInput>
  }

  /**
   * TenantUser delete
   */
  export type TenantUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
    /**
     * Filter which TenantUser to delete.
     */
    where: TenantUserWhereUniqueInput
  }

  /**
   * TenantUser deleteMany
   */
  export type TenantUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantUsers to delete
     */
    where?: TenantUserWhereInput
  }

  /**
   * TenantUser.user
   */
  export type TenantUser$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TenantUser.tenantOrgUser
   */
  export type TenantUser$tenantOrgUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    where?: TenantOrgUserWhereInput
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    cursor?: TenantOrgUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgUserScalarFieldEnum | TenantOrgUserScalarFieldEnum[]
  }

  /**
   * TenantUser.documents
   */
  export type TenantUser$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * TenantUser.defaultUser
   */
  export type TenantUser$defaultUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TenantUser without action
   */
  export type TenantUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantUser
     */
    select?: TenantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantUserInclude<ExtArgs> | null
  }


  /**
   * Model TenantOrg
   */

  export type AggregateTenantOrg = {
    _count: TenantOrgCountAggregateOutputType | null
    _min: TenantOrgMinAggregateOutputType | null
    _max: TenantOrgMaxAggregateOutputType | null
  }

  export type TenantOrgMinAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgMaxAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgCountAggregateOutputType = {
    id: number
    name: number
    parentId: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantOrgMinAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgMaxAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgCountAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantOrgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrg to aggregate.
     */
    where?: TenantOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgs to fetch.
     */
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantOrgs
    **/
    _count?: true | TenantOrgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantOrgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantOrgMaxAggregateInputType
  }

  export type GetTenantOrgAggregateType<T extends TenantOrgAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantOrg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantOrg[P]>
      : GetScalarType<T[P], AggregateTenantOrg[P]>
  }




  export type TenantOrgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgWhereInput
    orderBy?: TenantOrgOrderByWithAggregationInput | TenantOrgOrderByWithAggregationInput[]
    by: TenantOrgScalarFieldEnum[] | TenantOrgScalarFieldEnum
    having?: TenantOrgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantOrgCountAggregateInputType | true
    _min?: TenantOrgMinAggregateInputType
    _max?: TenantOrgMaxAggregateInputType
  }

  export type TenantOrgGroupByOutputType = {
    id: string
    name: string
    parentId: string | null
    tenantId: string
    createdAt: Date
    updatedAt: Date
    _count: TenantOrgCountAggregateOutputType | null
    _min: TenantOrgMinAggregateOutputType | null
    _max: TenantOrgMaxAggregateOutputType | null
  }

  type GetTenantOrgGroupByPayload<T extends TenantOrgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantOrgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantOrgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantOrgGroupByOutputType[P]>
            : GetScalarType<T[P], TenantOrgGroupByOutputType[P]>
        }
      >
    >


  export type TenantOrgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | TenantOrg$parentArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    subOrgs?: boolean | TenantOrg$subOrgsArgs<ExtArgs>
    tenantOrgUsers?: boolean | TenantOrg$tenantOrgUsersArgs<ExtArgs>
    tenantOrgDocs?: boolean | TenantOrg$tenantOrgDocsArgs<ExtArgs>
    documents?: boolean | TenantOrg$documentsArgs<ExtArgs>
    _count?: boolean | TenantOrgCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrg"]>

  export type TenantOrgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | TenantOrg$parentArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrg"]>

  export type TenantOrgSelectScalar = {
    id?: boolean
    name?: boolean
    parentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantOrgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | TenantOrg$parentArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    subOrgs?: boolean | TenantOrg$subOrgsArgs<ExtArgs>
    tenantOrgUsers?: boolean | TenantOrg$tenantOrgUsersArgs<ExtArgs>
    tenantOrgDocs?: boolean | TenantOrg$tenantOrgDocsArgs<ExtArgs>
    documents?: boolean | TenantOrg$documentsArgs<ExtArgs>
    _count?: boolean | TenantOrgCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantOrgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | TenantOrg$parentArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TenantOrgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantOrg"
    objects: {
      parent: Prisma.$TenantOrgPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
      subOrgs: Prisma.$TenantOrgPayload<ExtArgs>[]
      tenantOrgUsers: Prisma.$TenantOrgUserPayload<ExtArgs>[]
      tenantOrgDocs: Prisma.$TenantOrgDocPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      parentId: string | null
      tenantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenantOrg"]>
    composites: {}
  }

  type TenantOrgGetPayload<S extends boolean | null | undefined | TenantOrgDefaultArgs> = $Result.GetResult<Prisma.$TenantOrgPayload, S>

  type TenantOrgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantOrgFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantOrgCountAggregateInputType | true
    }

  export interface TenantOrgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantOrg'], meta: { name: 'TenantOrg' } }
    /**
     * Find zero or one TenantOrg that matches the filter.
     * @param {TenantOrgFindUniqueArgs} args - Arguments to find a TenantOrg
     * @example
     * // Get one TenantOrg
     * const tenantOrg = await prisma.tenantOrg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantOrgFindUniqueArgs>(args: SelectSubset<T, TenantOrgFindUniqueArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TenantOrg that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantOrgFindUniqueOrThrowArgs} args - Arguments to find a TenantOrg
     * @example
     * // Get one TenantOrg
     * const tenantOrg = await prisma.tenantOrg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantOrgFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantOrgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TenantOrg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgFindFirstArgs} args - Arguments to find a TenantOrg
     * @example
     * // Get one TenantOrg
     * const tenantOrg = await prisma.tenantOrg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantOrgFindFirstArgs>(args?: SelectSubset<T, TenantOrgFindFirstArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TenantOrg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgFindFirstOrThrowArgs} args - Arguments to find a TenantOrg
     * @example
     * // Get one TenantOrg
     * const tenantOrg = await prisma.tenantOrg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantOrgFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantOrgFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TenantOrgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantOrgs
     * const tenantOrgs = await prisma.tenantOrg.findMany()
     * 
     * // Get first 10 TenantOrgs
     * const tenantOrgs = await prisma.tenantOrg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantOrgWithIdOnly = await prisma.tenantOrg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantOrgFindManyArgs>(args?: SelectSubset<T, TenantOrgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TenantOrg.
     * @param {TenantOrgCreateArgs} args - Arguments to create a TenantOrg.
     * @example
     * // Create one TenantOrg
     * const TenantOrg = await prisma.tenantOrg.create({
     *   data: {
     *     // ... data to create a TenantOrg
     *   }
     * })
     * 
     */
    create<T extends TenantOrgCreateArgs>(args: SelectSubset<T, TenantOrgCreateArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TenantOrgs.
     * @param {TenantOrgCreateManyArgs} args - Arguments to create many TenantOrgs.
     * @example
     * // Create many TenantOrgs
     * const tenantOrg = await prisma.tenantOrg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantOrgCreateManyArgs>(args?: SelectSubset<T, TenantOrgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantOrgs and returns the data saved in the database.
     * @param {TenantOrgCreateManyAndReturnArgs} args - Arguments to create many TenantOrgs.
     * @example
     * // Create many TenantOrgs
     * const tenantOrg = await prisma.tenantOrg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantOrgs and only return the `id`
     * const tenantOrgWithIdOnly = await prisma.tenantOrg.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantOrgCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantOrgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TenantOrg.
     * @param {TenantOrgDeleteArgs} args - Arguments to delete one TenantOrg.
     * @example
     * // Delete one TenantOrg
     * const TenantOrg = await prisma.tenantOrg.delete({
     *   where: {
     *     // ... filter to delete one TenantOrg
     *   }
     * })
     * 
     */
    delete<T extends TenantOrgDeleteArgs>(args: SelectSubset<T, TenantOrgDeleteArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TenantOrg.
     * @param {TenantOrgUpdateArgs} args - Arguments to update one TenantOrg.
     * @example
     * // Update one TenantOrg
     * const tenantOrg = await prisma.tenantOrg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantOrgUpdateArgs>(args: SelectSubset<T, TenantOrgUpdateArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TenantOrgs.
     * @param {TenantOrgDeleteManyArgs} args - Arguments to filter TenantOrgs to delete.
     * @example
     * // Delete a few TenantOrgs
     * const { count } = await prisma.tenantOrg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantOrgDeleteManyArgs>(args?: SelectSubset<T, TenantOrgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantOrgs
     * const tenantOrg = await prisma.tenantOrg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantOrgUpdateManyArgs>(args: SelectSubset<T, TenantOrgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantOrg.
     * @param {TenantOrgUpsertArgs} args - Arguments to update or create a TenantOrg.
     * @example
     * // Update or create a TenantOrg
     * const tenantOrg = await prisma.tenantOrg.upsert({
     *   create: {
     *     // ... data to create a TenantOrg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantOrg we want to update
     *   }
     * })
     */
    upsert<T extends TenantOrgUpsertArgs>(args: SelectSubset<T, TenantOrgUpsertArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TenantOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgCountArgs} args - Arguments to filter TenantOrgs to count.
     * @example
     * // Count the number of TenantOrgs
     * const count = await prisma.tenantOrg.count({
     *   where: {
     *     // ... the filter for the TenantOrgs we want to count
     *   }
     * })
    **/
    count<T extends TenantOrgCountArgs>(
      args?: Subset<T, TenantOrgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantOrgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantOrgAggregateArgs>(args: Subset<T, TenantOrgAggregateArgs>): Prisma.PrismaPromise<GetTenantOrgAggregateType<T>>

    /**
     * Group by TenantOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantOrgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantOrgGroupByArgs['orderBy'] }
        : { orderBy?: TenantOrgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantOrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantOrgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantOrg model
   */
  readonly fields: TenantOrgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantOrg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantOrgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends TenantOrg$parentArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrg$parentArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subOrgs<T extends TenantOrg$subOrgsArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrg$subOrgsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findMany"> | Null>
    tenantOrgUsers<T extends TenantOrg$tenantOrgUsersArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrg$tenantOrgUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findMany"> | Null>
    tenantOrgDocs<T extends TenantOrg$tenantOrgDocsArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrg$tenantOrgDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends TenantOrg$documentsArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrg$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantOrg model
   */ 
  interface TenantOrgFieldRefs {
    readonly id: FieldRef<"TenantOrg", 'String'>
    readonly name: FieldRef<"TenantOrg", 'String'>
    readonly parentId: FieldRef<"TenantOrg", 'String'>
    readonly tenantId: FieldRef<"TenantOrg", 'String'>
    readonly createdAt: FieldRef<"TenantOrg", 'DateTime'>
    readonly updatedAt: FieldRef<"TenantOrg", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantOrg findUnique
   */
  export type TenantOrgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrg to fetch.
     */
    where: TenantOrgWhereUniqueInput
  }

  /**
   * TenantOrg findUniqueOrThrow
   */
  export type TenantOrgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrg to fetch.
     */
    where: TenantOrgWhereUniqueInput
  }

  /**
   * TenantOrg findFirst
   */
  export type TenantOrgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrg to fetch.
     */
    where?: TenantOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgs to fetch.
     */
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgs.
     */
    cursor?: TenantOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgs.
     */
    distinct?: TenantOrgScalarFieldEnum | TenantOrgScalarFieldEnum[]
  }

  /**
   * TenantOrg findFirstOrThrow
   */
  export type TenantOrgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrg to fetch.
     */
    where?: TenantOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgs to fetch.
     */
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgs.
     */
    cursor?: TenantOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgs.
     */
    distinct?: TenantOrgScalarFieldEnum | TenantOrgScalarFieldEnum[]
  }

  /**
   * TenantOrg findMany
   */
  export type TenantOrgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgs to fetch.
     */
    where?: TenantOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgs to fetch.
     */
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantOrgs.
     */
    cursor?: TenantOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgs.
     */
    skip?: number
    distinct?: TenantOrgScalarFieldEnum | TenantOrgScalarFieldEnum[]
  }

  /**
   * TenantOrg create
   */
  export type TenantOrgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantOrg.
     */
    data: XOR<TenantOrgCreateInput, TenantOrgUncheckedCreateInput>
  }

  /**
   * TenantOrg createMany
   */
  export type TenantOrgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantOrgs.
     */
    data: TenantOrgCreateManyInput | TenantOrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantOrg createManyAndReturn
   */
  export type TenantOrgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TenantOrgs.
     */
    data: TenantOrgCreateManyInput | TenantOrgCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantOrg update
   */
  export type TenantOrgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantOrg.
     */
    data: XOR<TenantOrgUpdateInput, TenantOrgUncheckedUpdateInput>
    /**
     * Choose, which TenantOrg to update.
     */
    where: TenantOrgWhereUniqueInput
  }

  /**
   * TenantOrg updateMany
   */
  export type TenantOrgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantOrgs.
     */
    data: XOR<TenantOrgUpdateManyMutationInput, TenantOrgUncheckedUpdateManyInput>
    /**
     * Filter which TenantOrgs to update
     */
    where?: TenantOrgWhereInput
  }

  /**
   * TenantOrg upsert
   */
  export type TenantOrgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantOrg to update in case it exists.
     */
    where: TenantOrgWhereUniqueInput
    /**
     * In case the TenantOrg found by the `where` argument doesn't exist, create a new TenantOrg with this data.
     */
    create: XOR<TenantOrgCreateInput, TenantOrgUncheckedCreateInput>
    /**
     * In case the TenantOrg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantOrgUpdateInput, TenantOrgUncheckedUpdateInput>
  }

  /**
   * TenantOrg delete
   */
  export type TenantOrgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    /**
     * Filter which TenantOrg to delete.
     */
    where: TenantOrgWhereUniqueInput
  }

  /**
   * TenantOrg deleteMany
   */
  export type TenantOrgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrgs to delete
     */
    where?: TenantOrgWhereInput
  }

  /**
   * TenantOrg.parent
   */
  export type TenantOrg$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    where?: TenantOrgWhereInput
  }

  /**
   * TenantOrg.subOrgs
   */
  export type TenantOrg$subOrgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
    where?: TenantOrgWhereInput
    orderBy?: TenantOrgOrderByWithRelationInput | TenantOrgOrderByWithRelationInput[]
    cursor?: TenantOrgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgScalarFieldEnum | TenantOrgScalarFieldEnum[]
  }

  /**
   * TenantOrg.tenantOrgUsers
   */
  export type TenantOrg$tenantOrgUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    where?: TenantOrgUserWhereInput
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    cursor?: TenantOrgUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgUserScalarFieldEnum | TenantOrgUserScalarFieldEnum[]
  }

  /**
   * TenantOrg.tenantOrgDocs
   */
  export type TenantOrg$tenantOrgDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    where?: TenantOrgDocWhereInput
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    cursor?: TenantOrgDocWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgDocScalarFieldEnum | TenantOrgDocScalarFieldEnum[]
  }

  /**
   * TenantOrg.documents
   */
  export type TenantOrg$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * TenantOrg without action
   */
  export type TenantOrgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrg
     */
    select?: TenantOrgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgInclude<ExtArgs> | null
  }


  /**
   * Model TenantOrgUser
   */

  export type AggregateTenantOrgUser = {
    _count: TenantOrgUserCountAggregateOutputType | null
    _min: TenantOrgUserMinAggregateOutputType | null
    _max: TenantOrgUserMaxAggregateOutputType | null
  }

  export type TenantOrgUserMinAggregateOutputType = {
    tenantOrgId: string | null
    tenantUserId: string | null
    permission: $Enums.Permission | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgUserMaxAggregateOutputType = {
    tenantOrgId: string | null
    tenantUserId: string | null
    permission: $Enums.Permission | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgUserCountAggregateOutputType = {
    tenantOrgId: number
    tenantUserId: number
    permission: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantOrgUserMinAggregateInputType = {
    tenantOrgId?: true
    tenantUserId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgUserMaxAggregateInputType = {
    tenantOrgId?: true
    tenantUserId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgUserCountAggregateInputType = {
    tenantOrgId?: true
    tenantUserId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantOrgUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrgUser to aggregate.
     */
    where?: TenantOrgUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgUsers to fetch.
     */
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantOrgUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantOrgUsers
    **/
    _count?: true | TenantOrgUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantOrgUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantOrgUserMaxAggregateInputType
  }

  export type GetTenantOrgUserAggregateType<T extends TenantOrgUserAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantOrgUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantOrgUser[P]>
      : GetScalarType<T[P], AggregateTenantOrgUser[P]>
  }




  export type TenantOrgUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgUserWhereInput
    orderBy?: TenantOrgUserOrderByWithAggregationInput | TenantOrgUserOrderByWithAggregationInput[]
    by: TenantOrgUserScalarFieldEnum[] | TenantOrgUserScalarFieldEnum
    having?: TenantOrgUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantOrgUserCountAggregateInputType | true
    _min?: TenantOrgUserMinAggregateInputType
    _max?: TenantOrgUserMaxAggregateInputType
  }

  export type TenantOrgUserGroupByOutputType = {
    tenantOrgId: string
    tenantUserId: string
    permission: $Enums.Permission
    createdAt: Date
    updatedAt: Date
    _count: TenantOrgUserCountAggregateOutputType | null
    _min: TenantOrgUserMinAggregateOutputType | null
    _max: TenantOrgUserMaxAggregateOutputType | null
  }

  type GetTenantOrgUserGroupByPayload<T extends TenantOrgUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantOrgUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantOrgUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantOrgUserGroupByOutputType[P]>
            : GetScalarType<T[P], TenantOrgUserGroupByOutputType[P]>
        }
      >
    >


  export type TenantOrgUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantOrgId?: boolean
    tenantUserId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    tenantUser?: boolean | TenantUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrgUser"]>

  export type TenantOrgUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantOrgId?: boolean
    tenantUserId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    tenantUser?: boolean | TenantUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrgUser"]>

  export type TenantOrgUserSelectScalar = {
    tenantOrgId?: boolean
    tenantUserId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantOrgUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    tenantUser?: boolean | TenantUserDefaultArgs<ExtArgs>
  }
  export type TenantOrgUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    tenantUser?: boolean | TenantUserDefaultArgs<ExtArgs>
  }

  export type $TenantOrgUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantOrgUser"
    objects: {
      tenantOrg: Prisma.$TenantOrgPayload<ExtArgs>
      tenantUser: Prisma.$TenantUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tenantOrgId: string
      tenantUserId: string
      permission: $Enums.Permission
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenantOrgUser"]>
    composites: {}
  }

  type TenantOrgUserGetPayload<S extends boolean | null | undefined | TenantOrgUserDefaultArgs> = $Result.GetResult<Prisma.$TenantOrgUserPayload, S>

  type TenantOrgUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantOrgUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantOrgUserCountAggregateInputType | true
    }

  export interface TenantOrgUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantOrgUser'], meta: { name: 'TenantOrgUser' } }
    /**
     * Find zero or one TenantOrgUser that matches the filter.
     * @param {TenantOrgUserFindUniqueArgs} args - Arguments to find a TenantOrgUser
     * @example
     * // Get one TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantOrgUserFindUniqueArgs>(args: SelectSubset<T, TenantOrgUserFindUniqueArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TenantOrgUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantOrgUserFindUniqueOrThrowArgs} args - Arguments to find a TenantOrgUser
     * @example
     * // Get one TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantOrgUserFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantOrgUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TenantOrgUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserFindFirstArgs} args - Arguments to find a TenantOrgUser
     * @example
     * // Get one TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantOrgUserFindFirstArgs>(args?: SelectSubset<T, TenantOrgUserFindFirstArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TenantOrgUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserFindFirstOrThrowArgs} args - Arguments to find a TenantOrgUser
     * @example
     * // Get one TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantOrgUserFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantOrgUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TenantOrgUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantOrgUsers
     * const tenantOrgUsers = await prisma.tenantOrgUser.findMany()
     * 
     * // Get first 10 TenantOrgUsers
     * const tenantOrgUsers = await prisma.tenantOrgUser.findMany({ take: 10 })
     * 
     * // Only select the `tenantOrgId`
     * const tenantOrgUserWithTenantOrgIdOnly = await prisma.tenantOrgUser.findMany({ select: { tenantOrgId: true } })
     * 
     */
    findMany<T extends TenantOrgUserFindManyArgs>(args?: SelectSubset<T, TenantOrgUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TenantOrgUser.
     * @param {TenantOrgUserCreateArgs} args - Arguments to create a TenantOrgUser.
     * @example
     * // Create one TenantOrgUser
     * const TenantOrgUser = await prisma.tenantOrgUser.create({
     *   data: {
     *     // ... data to create a TenantOrgUser
     *   }
     * })
     * 
     */
    create<T extends TenantOrgUserCreateArgs>(args: SelectSubset<T, TenantOrgUserCreateArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TenantOrgUsers.
     * @param {TenantOrgUserCreateManyArgs} args - Arguments to create many TenantOrgUsers.
     * @example
     * // Create many TenantOrgUsers
     * const tenantOrgUser = await prisma.tenantOrgUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantOrgUserCreateManyArgs>(args?: SelectSubset<T, TenantOrgUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantOrgUsers and returns the data saved in the database.
     * @param {TenantOrgUserCreateManyAndReturnArgs} args - Arguments to create many TenantOrgUsers.
     * @example
     * // Create many TenantOrgUsers
     * const tenantOrgUser = await prisma.tenantOrgUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantOrgUsers and only return the `tenantOrgId`
     * const tenantOrgUserWithTenantOrgIdOnly = await prisma.tenantOrgUser.createManyAndReturn({ 
     *   select: { tenantOrgId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantOrgUserCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantOrgUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TenantOrgUser.
     * @param {TenantOrgUserDeleteArgs} args - Arguments to delete one TenantOrgUser.
     * @example
     * // Delete one TenantOrgUser
     * const TenantOrgUser = await prisma.tenantOrgUser.delete({
     *   where: {
     *     // ... filter to delete one TenantOrgUser
     *   }
     * })
     * 
     */
    delete<T extends TenantOrgUserDeleteArgs>(args: SelectSubset<T, TenantOrgUserDeleteArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TenantOrgUser.
     * @param {TenantOrgUserUpdateArgs} args - Arguments to update one TenantOrgUser.
     * @example
     * // Update one TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantOrgUserUpdateArgs>(args: SelectSubset<T, TenantOrgUserUpdateArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TenantOrgUsers.
     * @param {TenantOrgUserDeleteManyArgs} args - Arguments to filter TenantOrgUsers to delete.
     * @example
     * // Delete a few TenantOrgUsers
     * const { count } = await prisma.tenantOrgUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantOrgUserDeleteManyArgs>(args?: SelectSubset<T, TenantOrgUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantOrgUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantOrgUsers
     * const tenantOrgUser = await prisma.tenantOrgUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantOrgUserUpdateManyArgs>(args: SelectSubset<T, TenantOrgUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantOrgUser.
     * @param {TenantOrgUserUpsertArgs} args - Arguments to update or create a TenantOrgUser.
     * @example
     * // Update or create a TenantOrgUser
     * const tenantOrgUser = await prisma.tenantOrgUser.upsert({
     *   create: {
     *     // ... data to create a TenantOrgUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantOrgUser we want to update
     *   }
     * })
     */
    upsert<T extends TenantOrgUserUpsertArgs>(args: SelectSubset<T, TenantOrgUserUpsertArgs<ExtArgs>>): Prisma__TenantOrgUserClient<$Result.GetResult<Prisma.$TenantOrgUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TenantOrgUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserCountArgs} args - Arguments to filter TenantOrgUsers to count.
     * @example
     * // Count the number of TenantOrgUsers
     * const count = await prisma.tenantOrgUser.count({
     *   where: {
     *     // ... the filter for the TenantOrgUsers we want to count
     *   }
     * })
    **/
    count<T extends TenantOrgUserCountArgs>(
      args?: Subset<T, TenantOrgUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantOrgUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantOrgUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantOrgUserAggregateArgs>(args: Subset<T, TenantOrgUserAggregateArgs>): Prisma.PrismaPromise<GetTenantOrgUserAggregateType<T>>

    /**
     * Group by TenantOrgUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantOrgUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantOrgUserGroupByArgs['orderBy'] }
        : { orderBy?: TenantOrgUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantOrgUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantOrgUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantOrgUser model
   */
  readonly fields: TenantOrgUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantOrgUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantOrgUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenantOrg<T extends TenantOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrgDefaultArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenantUser<T extends TenantUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantUserDefaultArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantOrgUser model
   */ 
  interface TenantOrgUserFieldRefs {
    readonly tenantOrgId: FieldRef<"TenantOrgUser", 'String'>
    readonly tenantUserId: FieldRef<"TenantOrgUser", 'String'>
    readonly permission: FieldRef<"TenantOrgUser", 'Permission'>
    readonly createdAt: FieldRef<"TenantOrgUser", 'DateTime'>
    readonly updatedAt: FieldRef<"TenantOrgUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantOrgUser findUnique
   */
  export type TenantOrgUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgUser to fetch.
     */
    where: TenantOrgUserWhereUniqueInput
  }

  /**
   * TenantOrgUser findUniqueOrThrow
   */
  export type TenantOrgUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgUser to fetch.
     */
    where: TenantOrgUserWhereUniqueInput
  }

  /**
   * TenantOrgUser findFirst
   */
  export type TenantOrgUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgUser to fetch.
     */
    where?: TenantOrgUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgUsers to fetch.
     */
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgUsers.
     */
    cursor?: TenantOrgUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgUsers.
     */
    distinct?: TenantOrgUserScalarFieldEnum | TenantOrgUserScalarFieldEnum[]
  }

  /**
   * TenantOrgUser findFirstOrThrow
   */
  export type TenantOrgUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgUser to fetch.
     */
    where?: TenantOrgUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgUsers to fetch.
     */
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgUsers.
     */
    cursor?: TenantOrgUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgUsers.
     */
    distinct?: TenantOrgUserScalarFieldEnum | TenantOrgUserScalarFieldEnum[]
  }

  /**
   * TenantOrgUser findMany
   */
  export type TenantOrgUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgUsers to fetch.
     */
    where?: TenantOrgUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgUsers to fetch.
     */
    orderBy?: TenantOrgUserOrderByWithRelationInput | TenantOrgUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantOrgUsers.
     */
    cursor?: TenantOrgUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgUsers.
     */
    skip?: number
    distinct?: TenantOrgUserScalarFieldEnum | TenantOrgUserScalarFieldEnum[]
  }

  /**
   * TenantOrgUser create
   */
  export type TenantOrgUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantOrgUser.
     */
    data: XOR<TenantOrgUserCreateInput, TenantOrgUserUncheckedCreateInput>
  }

  /**
   * TenantOrgUser createMany
   */
  export type TenantOrgUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantOrgUsers.
     */
    data: TenantOrgUserCreateManyInput | TenantOrgUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantOrgUser createManyAndReturn
   */
  export type TenantOrgUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TenantOrgUsers.
     */
    data: TenantOrgUserCreateManyInput | TenantOrgUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantOrgUser update
   */
  export type TenantOrgUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantOrgUser.
     */
    data: XOR<TenantOrgUserUpdateInput, TenantOrgUserUncheckedUpdateInput>
    /**
     * Choose, which TenantOrgUser to update.
     */
    where: TenantOrgUserWhereUniqueInput
  }

  /**
   * TenantOrgUser updateMany
   */
  export type TenantOrgUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantOrgUsers.
     */
    data: XOR<TenantOrgUserUpdateManyMutationInput, TenantOrgUserUncheckedUpdateManyInput>
    /**
     * Filter which TenantOrgUsers to update
     */
    where?: TenantOrgUserWhereInput
  }

  /**
   * TenantOrgUser upsert
   */
  export type TenantOrgUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantOrgUser to update in case it exists.
     */
    where: TenantOrgUserWhereUniqueInput
    /**
     * In case the TenantOrgUser found by the `where` argument doesn't exist, create a new TenantOrgUser with this data.
     */
    create: XOR<TenantOrgUserCreateInput, TenantOrgUserUncheckedCreateInput>
    /**
     * In case the TenantOrgUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantOrgUserUpdateInput, TenantOrgUserUncheckedUpdateInput>
  }

  /**
   * TenantOrgUser delete
   */
  export type TenantOrgUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
    /**
     * Filter which TenantOrgUser to delete.
     */
    where: TenantOrgUserWhereUniqueInput
  }

  /**
   * TenantOrgUser deleteMany
   */
  export type TenantOrgUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrgUsers to delete
     */
    where?: TenantOrgUserWhereInput
  }

  /**
   * TenantOrgUser without action
   */
  export type TenantOrgUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgUser
     */
    select?: TenantOrgUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgUserInclude<ExtArgs> | null
  }


  /**
   * Model DocumentConfig
   */

  export type AggregateDocumentConfig = {
    _count: DocumentConfigCountAggregateOutputType | null
    _min: DocumentConfigMinAggregateOutputType | null
    _max: DocumentConfigMaxAggregateOutputType | null
  }

  export type DocumentConfigMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentConfigMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentConfigCountAggregateOutputType = {
    id: number
    name: number
    description: number
    fieldConfig: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentConfigMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentConfigMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentConfigCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fieldConfig?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentConfig to aggregate.
     */
    where?: DocumentConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentConfigs to fetch.
     */
    orderBy?: DocumentConfigOrderByWithRelationInput | DocumentConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentConfigs
    **/
    _count?: true | DocumentConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentConfigMaxAggregateInputType
  }

  export type GetDocumentConfigAggregateType<T extends DocumentConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentConfig[P]>
      : GetScalarType<T[P], AggregateDocumentConfig[P]>
  }




  export type DocumentConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentConfigWhereInput
    orderBy?: DocumentConfigOrderByWithAggregationInput | DocumentConfigOrderByWithAggregationInput[]
    by: DocumentConfigScalarFieldEnum[] | DocumentConfigScalarFieldEnum
    having?: DocumentConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentConfigCountAggregateInputType | true
    _min?: DocumentConfigMinAggregateInputType
    _max?: DocumentConfigMaxAggregateInputType
  }

  export type DocumentConfigGroupByOutputType = {
    id: string
    name: string
    description: string
    fieldConfig: JsonValue
    tenantId: string
    createdAt: Date
    updatedAt: Date
    _count: DocumentConfigCountAggregateOutputType | null
    _min: DocumentConfigMinAggregateOutputType | null
    _max: DocumentConfigMaxAggregateOutputType | null
  }

  type GetDocumentConfigGroupByPayload<T extends DocumentConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentConfigGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentConfigGroupByOutputType[P]>
        }
      >
    >


  export type DocumentConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    documentTemplates?: boolean | DocumentConfig$documentTemplatesArgs<ExtArgs>
    _count?: boolean | DocumentConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentConfig"]>

  export type DocumentConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentConfig"]>

  export type DocumentConfigSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    fieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    documentTemplates?: boolean | DocumentConfig$documentTemplatesArgs<ExtArgs>
    _count?: boolean | DocumentConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $DocumentConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentConfig"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      documentTemplates: Prisma.$DocumentTemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      fieldConfig: Prisma.JsonValue
      tenantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["documentConfig"]>
    composites: {}
  }

  type DocumentConfigGetPayload<S extends boolean | null | undefined | DocumentConfigDefaultArgs> = $Result.GetResult<Prisma.$DocumentConfigPayload, S>

  type DocumentConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentConfigCountAggregateInputType | true
    }

  export interface DocumentConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentConfig'], meta: { name: 'DocumentConfig' } }
    /**
     * Find zero or one DocumentConfig that matches the filter.
     * @param {DocumentConfigFindUniqueArgs} args - Arguments to find a DocumentConfig
     * @example
     * // Get one DocumentConfig
     * const documentConfig = await prisma.documentConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentConfigFindUniqueArgs>(args: SelectSubset<T, DocumentConfigFindUniqueArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentConfigFindUniqueOrThrowArgs} args - Arguments to find a DocumentConfig
     * @example
     * // Get one DocumentConfig
     * const documentConfig = await prisma.documentConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigFindFirstArgs} args - Arguments to find a DocumentConfig
     * @example
     * // Get one DocumentConfig
     * const documentConfig = await prisma.documentConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentConfigFindFirstArgs>(args?: SelectSubset<T, DocumentConfigFindFirstArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigFindFirstOrThrowArgs} args - Arguments to find a DocumentConfig
     * @example
     * // Get one DocumentConfig
     * const documentConfig = await prisma.documentConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentConfigs
     * const documentConfigs = await prisma.documentConfig.findMany()
     * 
     * // Get first 10 DocumentConfigs
     * const documentConfigs = await prisma.documentConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentConfigWithIdOnly = await prisma.documentConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentConfigFindManyArgs>(args?: SelectSubset<T, DocumentConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentConfig.
     * @param {DocumentConfigCreateArgs} args - Arguments to create a DocumentConfig.
     * @example
     * // Create one DocumentConfig
     * const DocumentConfig = await prisma.documentConfig.create({
     *   data: {
     *     // ... data to create a DocumentConfig
     *   }
     * })
     * 
     */
    create<T extends DocumentConfigCreateArgs>(args: SelectSubset<T, DocumentConfigCreateArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentConfigs.
     * @param {DocumentConfigCreateManyArgs} args - Arguments to create many DocumentConfigs.
     * @example
     * // Create many DocumentConfigs
     * const documentConfig = await prisma.documentConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentConfigCreateManyArgs>(args?: SelectSubset<T, DocumentConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentConfigs and returns the data saved in the database.
     * @param {DocumentConfigCreateManyAndReturnArgs} args - Arguments to create many DocumentConfigs.
     * @example
     * // Create many DocumentConfigs
     * const documentConfig = await prisma.documentConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentConfigs and only return the `id`
     * const documentConfigWithIdOnly = await prisma.documentConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentConfig.
     * @param {DocumentConfigDeleteArgs} args - Arguments to delete one DocumentConfig.
     * @example
     * // Delete one DocumentConfig
     * const DocumentConfig = await prisma.documentConfig.delete({
     *   where: {
     *     // ... filter to delete one DocumentConfig
     *   }
     * })
     * 
     */
    delete<T extends DocumentConfigDeleteArgs>(args: SelectSubset<T, DocumentConfigDeleteArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentConfig.
     * @param {DocumentConfigUpdateArgs} args - Arguments to update one DocumentConfig.
     * @example
     * // Update one DocumentConfig
     * const documentConfig = await prisma.documentConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentConfigUpdateArgs>(args: SelectSubset<T, DocumentConfigUpdateArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentConfigs.
     * @param {DocumentConfigDeleteManyArgs} args - Arguments to filter DocumentConfigs to delete.
     * @example
     * // Delete a few DocumentConfigs
     * const { count } = await prisma.documentConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentConfigDeleteManyArgs>(args?: SelectSubset<T, DocumentConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentConfigs
     * const documentConfig = await prisma.documentConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentConfigUpdateManyArgs>(args: SelectSubset<T, DocumentConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentConfig.
     * @param {DocumentConfigUpsertArgs} args - Arguments to update or create a DocumentConfig.
     * @example
     * // Update or create a DocumentConfig
     * const documentConfig = await prisma.documentConfig.upsert({
     *   create: {
     *     // ... data to create a DocumentConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentConfig we want to update
     *   }
     * })
     */
    upsert<T extends DocumentConfigUpsertArgs>(args: SelectSubset<T, DocumentConfigUpsertArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigCountArgs} args - Arguments to filter DocumentConfigs to count.
     * @example
     * // Count the number of DocumentConfigs
     * const count = await prisma.documentConfig.count({
     *   where: {
     *     // ... the filter for the DocumentConfigs we want to count
     *   }
     * })
    **/
    count<T extends DocumentConfigCountArgs>(
      args?: Subset<T, DocumentConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentConfigAggregateArgs>(args: Subset<T, DocumentConfigAggregateArgs>): Prisma.PrismaPromise<GetDocumentConfigAggregateType<T>>

    /**
     * Group by DocumentConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentConfigGroupByArgs['orderBy'] }
        : { orderBy?: DocumentConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentConfig model
   */
  readonly fields: DocumentConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documentTemplates<T extends DocumentConfig$documentTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, DocumentConfig$documentTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentConfig model
   */ 
  interface DocumentConfigFieldRefs {
    readonly id: FieldRef<"DocumentConfig", 'String'>
    readonly name: FieldRef<"DocumentConfig", 'String'>
    readonly description: FieldRef<"DocumentConfig", 'String'>
    readonly fieldConfig: FieldRef<"DocumentConfig", 'Json'>
    readonly tenantId: FieldRef<"DocumentConfig", 'String'>
    readonly createdAt: FieldRef<"DocumentConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentConfig findUnique
   */
  export type DocumentConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter, which DocumentConfig to fetch.
     */
    where: DocumentConfigWhereUniqueInput
  }

  /**
   * DocumentConfig findUniqueOrThrow
   */
  export type DocumentConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter, which DocumentConfig to fetch.
     */
    where: DocumentConfigWhereUniqueInput
  }

  /**
   * DocumentConfig findFirst
   */
  export type DocumentConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter, which DocumentConfig to fetch.
     */
    where?: DocumentConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentConfigs to fetch.
     */
    orderBy?: DocumentConfigOrderByWithRelationInput | DocumentConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentConfigs.
     */
    cursor?: DocumentConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentConfigs.
     */
    distinct?: DocumentConfigScalarFieldEnum | DocumentConfigScalarFieldEnum[]
  }

  /**
   * DocumentConfig findFirstOrThrow
   */
  export type DocumentConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter, which DocumentConfig to fetch.
     */
    where?: DocumentConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentConfigs to fetch.
     */
    orderBy?: DocumentConfigOrderByWithRelationInput | DocumentConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentConfigs.
     */
    cursor?: DocumentConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentConfigs.
     */
    distinct?: DocumentConfigScalarFieldEnum | DocumentConfigScalarFieldEnum[]
  }

  /**
   * DocumentConfig findMany
   */
  export type DocumentConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter, which DocumentConfigs to fetch.
     */
    where?: DocumentConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentConfigs to fetch.
     */
    orderBy?: DocumentConfigOrderByWithRelationInput | DocumentConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentConfigs.
     */
    cursor?: DocumentConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentConfigs.
     */
    skip?: number
    distinct?: DocumentConfigScalarFieldEnum | DocumentConfigScalarFieldEnum[]
  }

  /**
   * DocumentConfig create
   */
  export type DocumentConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentConfig.
     */
    data: XOR<DocumentConfigCreateInput, DocumentConfigUncheckedCreateInput>
  }

  /**
   * DocumentConfig createMany
   */
  export type DocumentConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentConfigs.
     */
    data: DocumentConfigCreateManyInput | DocumentConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentConfig createManyAndReturn
   */
  export type DocumentConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentConfigs.
     */
    data: DocumentConfigCreateManyInput | DocumentConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentConfig update
   */
  export type DocumentConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentConfig.
     */
    data: XOR<DocumentConfigUpdateInput, DocumentConfigUncheckedUpdateInput>
    /**
     * Choose, which DocumentConfig to update.
     */
    where: DocumentConfigWhereUniqueInput
  }

  /**
   * DocumentConfig updateMany
   */
  export type DocumentConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentConfigs.
     */
    data: XOR<DocumentConfigUpdateManyMutationInput, DocumentConfigUncheckedUpdateManyInput>
    /**
     * Filter which DocumentConfigs to update
     */
    where?: DocumentConfigWhereInput
  }

  /**
   * DocumentConfig upsert
   */
  export type DocumentConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentConfig to update in case it exists.
     */
    where: DocumentConfigWhereUniqueInput
    /**
     * In case the DocumentConfig found by the `where` argument doesn't exist, create a new DocumentConfig with this data.
     */
    create: XOR<DocumentConfigCreateInput, DocumentConfigUncheckedCreateInput>
    /**
     * In case the DocumentConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentConfigUpdateInput, DocumentConfigUncheckedUpdateInput>
  }

  /**
   * DocumentConfig delete
   */
  export type DocumentConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
    /**
     * Filter which DocumentConfig to delete.
     */
    where: DocumentConfigWhereUniqueInput
  }

  /**
   * DocumentConfig deleteMany
   */
  export type DocumentConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentConfigs to delete
     */
    where?: DocumentConfigWhereInput
  }

  /**
   * DocumentConfig.documentTemplates
   */
  export type DocumentConfig$documentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    cursor?: DocumentTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentConfig without action
   */
  export type DocumentConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentConfig
     */
    select?: DocumentConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentConfigInclude<ExtArgs> | null
  }


  /**
   * Model DocumentTemplate
   */

  export type AggregateDocumentTemplate = {
    _count: DocumentTemplateCountAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  export type DocumentTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    documentConfigId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    documentConfigId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    documentConfigId: number
    templateFieldConfig: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    documentConfigId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    documentConfigId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    documentConfigId?: true
    templateFieldConfig?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplate to aggregate.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTemplates
    **/
    _count?: true | DocumentTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type GetDocumentTemplateAggregateType<T extends DocumentTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentTemplate[P]>
      : GetScalarType<T[P], AggregateDocumentTemplate[P]>
  }




  export type DocumentTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithAggregationInput | DocumentTemplateOrderByWithAggregationInput[]
    by: DocumentTemplateScalarFieldEnum[] | DocumentTemplateScalarFieldEnum
    having?: DocumentTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTemplateCountAggregateInputType | true
    _min?: DocumentTemplateMinAggregateInputType
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type DocumentTemplateGroupByOutputType = {
    id: string
    name: string
    description: string
    image: string | null
    documentConfigId: string
    templateFieldConfig: JsonValue
    tenantId: string
    createdAt: Date
    updatedAt: Date
    _count: DocumentTemplateCountAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  type GetDocumentTemplateGroupByPayload<T extends DocumentTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    documentConfigId?: boolean
    templateFieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentConfig?: boolean | DocumentConfigDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    tenantOrgDocs?: boolean | DocumentTemplate$tenantOrgDocsArgs<ExtArgs>
    documents?: boolean | DocumentTemplate$documentsArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    documentConfigId?: boolean
    templateFieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentConfig?: boolean | DocumentConfigDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    documentConfigId?: boolean
    templateFieldConfig?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentConfig?: boolean | DocumentConfigDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    tenantOrgDocs?: boolean | DocumentTemplate$tenantOrgDocsArgs<ExtArgs>
    documents?: boolean | DocumentTemplate$documentsArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentConfig?: boolean | DocumentConfigDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $DocumentTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentTemplate"
    objects: {
      documentConfig: Prisma.$DocumentConfigPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
      tenantOrgDocs: Prisma.$TenantOrgDocPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      image: string | null
      documentConfigId: string
      templateFieldConfig: Prisma.JsonValue
      tenantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["documentTemplate"]>
    composites: {}
  }

  type DocumentTemplateGetPayload<S extends boolean | null | undefined | DocumentTemplateDefaultArgs> = $Result.GetResult<Prisma.$DocumentTemplatePayload, S>

  type DocumentTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentTemplateCountAggregateInputType | true
    }

  export interface DocumentTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentTemplate'], meta: { name: 'DocumentTemplate' } }
    /**
     * Find zero or one DocumentTemplate that matches the filter.
     * @param {DocumentTemplateFindUniqueArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTemplateFindUniqueArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentTemplateFindUniqueOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTemplateFindFirstArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany()
     * 
     * // Get first 10 DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTemplateFindManyArgs>(args?: SelectSubset<T, DocumentTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentTemplate.
     * @param {DocumentTemplateCreateArgs} args - Arguments to create a DocumentTemplate.
     * @example
     * // Create one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.create({
     *   data: {
     *     // ... data to create a DocumentTemplate
     *   }
     * })
     * 
     */
    create<T extends DocumentTemplateCreateArgs>(args: SelectSubset<T, DocumentTemplateCreateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentTemplates.
     * @param {DocumentTemplateCreateManyArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTemplateCreateManyArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTemplates and returns the data saved in the database.
     * @param {DocumentTemplateCreateManyAndReturnArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTemplates and only return the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentTemplate.
     * @param {DocumentTemplateDeleteArgs} args - Arguments to delete one DocumentTemplate.
     * @example
     * // Delete one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.delete({
     *   where: {
     *     // ... filter to delete one DocumentTemplate
     *   }
     * })
     * 
     */
    delete<T extends DocumentTemplateDeleteArgs>(args: SelectSubset<T, DocumentTemplateDeleteArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentTemplate.
     * @param {DocumentTemplateUpdateArgs} args - Arguments to update one DocumentTemplate.
     * @example
     * // Update one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTemplateUpdateArgs>(args: SelectSubset<T, DocumentTemplateUpdateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentTemplates.
     * @param {DocumentTemplateDeleteManyArgs} args - Arguments to filter DocumentTemplates to delete.
     * @example
     * // Delete a few DocumentTemplates
     * const { count } = await prisma.documentTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTemplateDeleteManyArgs>(args?: SelectSubset<T, DocumentTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTemplateUpdateManyArgs>(args: SelectSubset<T, DocumentTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentTemplate.
     * @param {DocumentTemplateUpsertArgs} args - Arguments to update or create a DocumentTemplate.
     * @example
     * // Update or create a DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.upsert({
     *   create: {
     *     // ... data to create a DocumentTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentTemplate we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTemplateUpsertArgs>(args: SelectSubset<T, DocumentTemplateUpsertArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateCountArgs} args - Arguments to filter DocumentTemplates to count.
     * @example
     * // Count the number of DocumentTemplates
     * const count = await prisma.documentTemplate.count({
     *   where: {
     *     // ... the filter for the DocumentTemplates we want to count
     *   }
     * })
    **/
    count<T extends DocumentTemplateCountArgs>(
      args?: Subset<T, DocumentTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTemplateAggregateArgs>(args: Subset<T, DocumentTemplateAggregateArgs>): Prisma.PrismaPromise<GetDocumentTemplateAggregateType<T>>

    /**
     * Group by DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTemplateGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentTemplate model
   */
  readonly fields: DocumentTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentConfig<T extends DocumentConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentConfigDefaultArgs<ExtArgs>>): Prisma__DocumentConfigClient<$Result.GetResult<Prisma.$DocumentConfigPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenantOrgDocs<T extends DocumentTemplate$tenantOrgDocsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$tenantOrgDocsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends DocumentTemplate$documentsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentTemplate model
   */ 
  interface DocumentTemplateFieldRefs {
    readonly id: FieldRef<"DocumentTemplate", 'String'>
    readonly name: FieldRef<"DocumentTemplate", 'String'>
    readonly description: FieldRef<"DocumentTemplate", 'String'>
    readonly image: FieldRef<"DocumentTemplate", 'String'>
    readonly documentConfigId: FieldRef<"DocumentTemplate", 'String'>
    readonly templateFieldConfig: FieldRef<"DocumentTemplate", 'Json'>
    readonly tenantId: FieldRef<"DocumentTemplate", 'String'>
    readonly createdAt: FieldRef<"DocumentTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentTemplate findUnique
   */
  export type DocumentTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findUniqueOrThrow
   */
  export type DocumentTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findFirst
   */
  export type DocumentTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findFirstOrThrow
   */
  export type DocumentTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findMany
   */
  export type DocumentTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplates to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate create
   */
  export type DocumentTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentTemplate.
     */
    data: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
  }

  /**
   * DocumentTemplate createMany
   */
  export type DocumentTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentTemplate createManyAndReturn
   */
  export type DocumentTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentTemplate update
   */
  export type DocumentTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentTemplate.
     */
    data: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
    /**
     * Choose, which DocumentTemplate to update.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate updateMany
   */
  export type DocumentTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTemplates.
     */
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplates to update
     */
    where?: DocumentTemplateWhereInput
  }

  /**
   * DocumentTemplate upsert
   */
  export type DocumentTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentTemplate to update in case it exists.
     */
    where: DocumentTemplateWhereUniqueInput
    /**
     * In case the DocumentTemplate found by the `where` argument doesn't exist, create a new DocumentTemplate with this data.
     */
    create: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
    /**
     * In case the DocumentTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
  }

  /**
   * DocumentTemplate delete
   */
  export type DocumentTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter which DocumentTemplate to delete.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate deleteMany
   */
  export type DocumentTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplates to delete
     */
    where?: DocumentTemplateWhereInput
  }

  /**
   * DocumentTemplate.tenantOrgDocs
   */
  export type DocumentTemplate$tenantOrgDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    where?: TenantOrgDocWhereInput
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    cursor?: TenantOrgDocWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantOrgDocScalarFieldEnum | TenantOrgDocScalarFieldEnum[]
  }

  /**
   * DocumentTemplate.documents
   */
  export type DocumentTemplate$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * DocumentTemplate without action
   */
  export type DocumentTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
  }


  /**
   * Model TenantOrgDoc
   */

  export type AggregateTenantOrgDoc = {
    _count: TenantOrgDocCountAggregateOutputType | null
    _min: TenantOrgDocMinAggregateOutputType | null
    _max: TenantOrgDocMaxAggregateOutputType | null
  }

  export type TenantOrgDocMinAggregateOutputType = {
    tenantOrgId: string | null
    documentTemplateId: string | null
    permission: $Enums.Permission | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgDocMaxAggregateOutputType = {
    tenantOrgId: string | null
    documentTemplateId: string | null
    permission: $Enums.Permission | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantOrgDocCountAggregateOutputType = {
    tenantOrgId: number
    documentTemplateId: number
    permission: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantOrgDocMinAggregateInputType = {
    tenantOrgId?: true
    documentTemplateId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgDocMaxAggregateInputType = {
    tenantOrgId?: true
    documentTemplateId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantOrgDocCountAggregateInputType = {
    tenantOrgId?: true
    documentTemplateId?: true
    permission?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantOrgDocAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrgDoc to aggregate.
     */
    where?: TenantOrgDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgDocs to fetch.
     */
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantOrgDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantOrgDocs
    **/
    _count?: true | TenantOrgDocCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantOrgDocMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantOrgDocMaxAggregateInputType
  }

  export type GetTenantOrgDocAggregateType<T extends TenantOrgDocAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantOrgDoc]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantOrgDoc[P]>
      : GetScalarType<T[P], AggregateTenantOrgDoc[P]>
  }




  export type TenantOrgDocGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantOrgDocWhereInput
    orderBy?: TenantOrgDocOrderByWithAggregationInput | TenantOrgDocOrderByWithAggregationInput[]
    by: TenantOrgDocScalarFieldEnum[] | TenantOrgDocScalarFieldEnum
    having?: TenantOrgDocScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantOrgDocCountAggregateInputType | true
    _min?: TenantOrgDocMinAggregateInputType
    _max?: TenantOrgDocMaxAggregateInputType
  }

  export type TenantOrgDocGroupByOutputType = {
    tenantOrgId: string
    documentTemplateId: string
    permission: $Enums.Permission
    createdAt: Date
    updatedAt: Date
    _count: TenantOrgDocCountAggregateOutputType | null
    _min: TenantOrgDocMinAggregateOutputType | null
    _max: TenantOrgDocMaxAggregateOutputType | null
  }

  type GetTenantOrgDocGroupByPayload<T extends TenantOrgDocGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantOrgDocGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantOrgDocGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantOrgDocGroupByOutputType[P]>
            : GetScalarType<T[P], TenantOrgDocGroupByOutputType[P]>
        }
      >
    >


  export type TenantOrgDocSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantOrgId?: boolean
    documentTemplateId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrgDoc"]>

  export type TenantOrgDocSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantOrgId?: boolean
    documentTemplateId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantOrgDoc"]>

  export type TenantOrgDocSelectScalar = {
    tenantOrgId?: boolean
    documentTemplateId?: boolean
    permission?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantOrgDocInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }
  export type TenantOrgDocIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }

  export type $TenantOrgDocPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantOrgDoc"
    objects: {
      tenantOrg: Prisma.$TenantOrgPayload<ExtArgs>
      documentTemplate: Prisma.$DocumentTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tenantOrgId: string
      documentTemplateId: string
      permission: $Enums.Permission
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenantOrgDoc"]>
    composites: {}
  }

  type TenantOrgDocGetPayload<S extends boolean | null | undefined | TenantOrgDocDefaultArgs> = $Result.GetResult<Prisma.$TenantOrgDocPayload, S>

  type TenantOrgDocCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantOrgDocFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantOrgDocCountAggregateInputType | true
    }

  export interface TenantOrgDocDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantOrgDoc'], meta: { name: 'TenantOrgDoc' } }
    /**
     * Find zero or one TenantOrgDoc that matches the filter.
     * @param {TenantOrgDocFindUniqueArgs} args - Arguments to find a TenantOrgDoc
     * @example
     * // Get one TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantOrgDocFindUniqueArgs>(args: SelectSubset<T, TenantOrgDocFindUniqueArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TenantOrgDoc that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantOrgDocFindUniqueOrThrowArgs} args - Arguments to find a TenantOrgDoc
     * @example
     * // Get one TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantOrgDocFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantOrgDocFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TenantOrgDoc that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocFindFirstArgs} args - Arguments to find a TenantOrgDoc
     * @example
     * // Get one TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantOrgDocFindFirstArgs>(args?: SelectSubset<T, TenantOrgDocFindFirstArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TenantOrgDoc that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocFindFirstOrThrowArgs} args - Arguments to find a TenantOrgDoc
     * @example
     * // Get one TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantOrgDocFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantOrgDocFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TenantOrgDocs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantOrgDocs
     * const tenantOrgDocs = await prisma.tenantOrgDoc.findMany()
     * 
     * // Get first 10 TenantOrgDocs
     * const tenantOrgDocs = await prisma.tenantOrgDoc.findMany({ take: 10 })
     * 
     * // Only select the `tenantOrgId`
     * const tenantOrgDocWithTenantOrgIdOnly = await prisma.tenantOrgDoc.findMany({ select: { tenantOrgId: true } })
     * 
     */
    findMany<T extends TenantOrgDocFindManyArgs>(args?: SelectSubset<T, TenantOrgDocFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TenantOrgDoc.
     * @param {TenantOrgDocCreateArgs} args - Arguments to create a TenantOrgDoc.
     * @example
     * // Create one TenantOrgDoc
     * const TenantOrgDoc = await prisma.tenantOrgDoc.create({
     *   data: {
     *     // ... data to create a TenantOrgDoc
     *   }
     * })
     * 
     */
    create<T extends TenantOrgDocCreateArgs>(args: SelectSubset<T, TenantOrgDocCreateArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TenantOrgDocs.
     * @param {TenantOrgDocCreateManyArgs} args - Arguments to create many TenantOrgDocs.
     * @example
     * // Create many TenantOrgDocs
     * const tenantOrgDoc = await prisma.tenantOrgDoc.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantOrgDocCreateManyArgs>(args?: SelectSubset<T, TenantOrgDocCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantOrgDocs and returns the data saved in the database.
     * @param {TenantOrgDocCreateManyAndReturnArgs} args - Arguments to create many TenantOrgDocs.
     * @example
     * // Create many TenantOrgDocs
     * const tenantOrgDoc = await prisma.tenantOrgDoc.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantOrgDocs and only return the `tenantOrgId`
     * const tenantOrgDocWithTenantOrgIdOnly = await prisma.tenantOrgDoc.createManyAndReturn({ 
     *   select: { tenantOrgId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantOrgDocCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantOrgDocCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TenantOrgDoc.
     * @param {TenantOrgDocDeleteArgs} args - Arguments to delete one TenantOrgDoc.
     * @example
     * // Delete one TenantOrgDoc
     * const TenantOrgDoc = await prisma.tenantOrgDoc.delete({
     *   where: {
     *     // ... filter to delete one TenantOrgDoc
     *   }
     * })
     * 
     */
    delete<T extends TenantOrgDocDeleteArgs>(args: SelectSubset<T, TenantOrgDocDeleteArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TenantOrgDoc.
     * @param {TenantOrgDocUpdateArgs} args - Arguments to update one TenantOrgDoc.
     * @example
     * // Update one TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantOrgDocUpdateArgs>(args: SelectSubset<T, TenantOrgDocUpdateArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TenantOrgDocs.
     * @param {TenantOrgDocDeleteManyArgs} args - Arguments to filter TenantOrgDocs to delete.
     * @example
     * // Delete a few TenantOrgDocs
     * const { count } = await prisma.tenantOrgDoc.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantOrgDocDeleteManyArgs>(args?: SelectSubset<T, TenantOrgDocDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantOrgDocs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantOrgDocs
     * const tenantOrgDoc = await prisma.tenantOrgDoc.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantOrgDocUpdateManyArgs>(args: SelectSubset<T, TenantOrgDocUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantOrgDoc.
     * @param {TenantOrgDocUpsertArgs} args - Arguments to update or create a TenantOrgDoc.
     * @example
     * // Update or create a TenantOrgDoc
     * const tenantOrgDoc = await prisma.tenantOrgDoc.upsert({
     *   create: {
     *     // ... data to create a TenantOrgDoc
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantOrgDoc we want to update
     *   }
     * })
     */
    upsert<T extends TenantOrgDocUpsertArgs>(args: SelectSubset<T, TenantOrgDocUpsertArgs<ExtArgs>>): Prisma__TenantOrgDocClient<$Result.GetResult<Prisma.$TenantOrgDocPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TenantOrgDocs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocCountArgs} args - Arguments to filter TenantOrgDocs to count.
     * @example
     * // Count the number of TenantOrgDocs
     * const count = await prisma.tenantOrgDoc.count({
     *   where: {
     *     // ... the filter for the TenantOrgDocs we want to count
     *   }
     * })
    **/
    count<T extends TenantOrgDocCountArgs>(
      args?: Subset<T, TenantOrgDocCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantOrgDocCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantOrgDoc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantOrgDocAggregateArgs>(args: Subset<T, TenantOrgDocAggregateArgs>): Prisma.PrismaPromise<GetTenantOrgDocAggregateType<T>>

    /**
     * Group by TenantOrgDoc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantOrgDocGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantOrgDocGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantOrgDocGroupByArgs['orderBy'] }
        : { orderBy?: TenantOrgDocGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantOrgDocGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantOrgDocGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantOrgDoc model
   */
  readonly fields: TenantOrgDocFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantOrgDoc.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantOrgDocClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenantOrg<T extends TenantOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrgDefaultArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documentTemplate<T extends DocumentTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplateDefaultArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantOrgDoc model
   */ 
  interface TenantOrgDocFieldRefs {
    readonly tenantOrgId: FieldRef<"TenantOrgDoc", 'String'>
    readonly documentTemplateId: FieldRef<"TenantOrgDoc", 'String'>
    readonly permission: FieldRef<"TenantOrgDoc", 'Permission'>
    readonly createdAt: FieldRef<"TenantOrgDoc", 'DateTime'>
    readonly updatedAt: FieldRef<"TenantOrgDoc", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantOrgDoc findUnique
   */
  export type TenantOrgDocFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgDoc to fetch.
     */
    where: TenantOrgDocWhereUniqueInput
  }

  /**
   * TenantOrgDoc findUniqueOrThrow
   */
  export type TenantOrgDocFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgDoc to fetch.
     */
    where: TenantOrgDocWhereUniqueInput
  }

  /**
   * TenantOrgDoc findFirst
   */
  export type TenantOrgDocFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgDoc to fetch.
     */
    where?: TenantOrgDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgDocs to fetch.
     */
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgDocs.
     */
    cursor?: TenantOrgDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgDocs.
     */
    distinct?: TenantOrgDocScalarFieldEnum | TenantOrgDocScalarFieldEnum[]
  }

  /**
   * TenantOrgDoc findFirstOrThrow
   */
  export type TenantOrgDocFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgDoc to fetch.
     */
    where?: TenantOrgDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgDocs to fetch.
     */
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantOrgDocs.
     */
    cursor?: TenantOrgDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantOrgDocs.
     */
    distinct?: TenantOrgDocScalarFieldEnum | TenantOrgDocScalarFieldEnum[]
  }

  /**
   * TenantOrgDoc findMany
   */
  export type TenantOrgDocFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter, which TenantOrgDocs to fetch.
     */
    where?: TenantOrgDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantOrgDocs to fetch.
     */
    orderBy?: TenantOrgDocOrderByWithRelationInput | TenantOrgDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantOrgDocs.
     */
    cursor?: TenantOrgDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantOrgDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantOrgDocs.
     */
    skip?: number
    distinct?: TenantOrgDocScalarFieldEnum | TenantOrgDocScalarFieldEnum[]
  }

  /**
   * TenantOrgDoc create
   */
  export type TenantOrgDocCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantOrgDoc.
     */
    data: XOR<TenantOrgDocCreateInput, TenantOrgDocUncheckedCreateInput>
  }

  /**
   * TenantOrgDoc createMany
   */
  export type TenantOrgDocCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantOrgDocs.
     */
    data: TenantOrgDocCreateManyInput | TenantOrgDocCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantOrgDoc createManyAndReturn
   */
  export type TenantOrgDocCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TenantOrgDocs.
     */
    data: TenantOrgDocCreateManyInput | TenantOrgDocCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantOrgDoc update
   */
  export type TenantOrgDocUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantOrgDoc.
     */
    data: XOR<TenantOrgDocUpdateInput, TenantOrgDocUncheckedUpdateInput>
    /**
     * Choose, which TenantOrgDoc to update.
     */
    where: TenantOrgDocWhereUniqueInput
  }

  /**
   * TenantOrgDoc updateMany
   */
  export type TenantOrgDocUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantOrgDocs.
     */
    data: XOR<TenantOrgDocUpdateManyMutationInput, TenantOrgDocUncheckedUpdateManyInput>
    /**
     * Filter which TenantOrgDocs to update
     */
    where?: TenantOrgDocWhereInput
  }

  /**
   * TenantOrgDoc upsert
   */
  export type TenantOrgDocUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantOrgDoc to update in case it exists.
     */
    where: TenantOrgDocWhereUniqueInput
    /**
     * In case the TenantOrgDoc found by the `where` argument doesn't exist, create a new TenantOrgDoc with this data.
     */
    create: XOR<TenantOrgDocCreateInput, TenantOrgDocUncheckedCreateInput>
    /**
     * In case the TenantOrgDoc was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantOrgDocUpdateInput, TenantOrgDocUncheckedUpdateInput>
  }

  /**
   * TenantOrgDoc delete
   */
  export type TenantOrgDocDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
    /**
     * Filter which TenantOrgDoc to delete.
     */
    where: TenantOrgDocWhereUniqueInput
  }

  /**
   * TenantOrgDoc deleteMany
   */
  export type TenantOrgDocDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantOrgDocs to delete
     */
    where?: TenantOrgDocWhereInput
  }

  /**
   * TenantOrgDoc without action
   */
  export type TenantOrgDocDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantOrgDoc
     */
    select?: TenantOrgDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantOrgDocInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    uid: string | null
    documentTemplateId: string | null
    tenantOrgId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    documentTemplateId: string | null
    tenantOrgId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    uid: number
    documentTemplateId: number
    tenantOrgId: number
    documentFields: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    uid?: true
    documentTemplateId?: true
    tenantOrgId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    uid?: true
    documentTemplateId?: true
    tenantOrgId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    uid?: true
    documentTemplateId?: true
    tenantOrgId?: true
    documentFields?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    uid: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields: JsonValue
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    documentTemplateId?: boolean
    tenantOrgId?: boolean
    documentFields?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantUserDefaultArgs<ExtArgs>
    mticDocuments?: boolean | Document$mticDocumentsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    documentTemplateId?: boolean
    tenantOrgId?: boolean
    documentFields?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    uid?: boolean
    documentTemplateId?: boolean
    tenantOrgId?: boolean
    documentFields?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantUserDefaultArgs<ExtArgs>
    mticDocuments?: boolean | Document$mticDocumentsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    tenantOrg?: boolean | TenantOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantUserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      documentTemplate: Prisma.$DocumentTemplatePayload<ExtArgs>
      tenantOrg: Prisma.$TenantOrgPayload<ExtArgs>
      createdBy: Prisma.$TenantUserPayload<ExtArgs>
      mticDocuments: Prisma.$MTICDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      documentTemplateId: string
      tenantOrgId: string
      documentFields: Prisma.JsonValue
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentTemplate<T extends DocumentTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplateDefaultArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenantOrg<T extends TenantOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantOrgDefaultArgs<ExtArgs>>): Prisma__TenantOrgClient<$Result.GetResult<Prisma.$TenantOrgPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends TenantUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantUserDefaultArgs<ExtArgs>>): Prisma__TenantUserClient<$Result.GetResult<Prisma.$TenantUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mticDocuments<T extends Document$mticDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, Document$mticDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly uid: FieldRef<"Document", 'String'>
    readonly documentTemplateId: FieldRef<"Document", 'String'>
    readonly tenantOrgId: FieldRef<"Document", 'String'>
    readonly documentFields: FieldRef<"Document", 'Json'>
    readonly createdById: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.mticDocuments
   */
  export type Document$mticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    where?: MTICDocumentWhereInput
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    cursor?: MTICDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model MTIC
   */

  export type AggregateMTIC = {
    _count: MTICCountAggregateOutputType | null
    _min: MTICMinAggregateOutputType | null
    _max: MTICMaxAggregateOutputType | null
  }

  export type MTICMinAggregateOutputType = {
    id: string | null
    uid: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICCountAggregateOutputType = {
    id: number
    uid: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MTICMinAggregateInputType = {
    id?: true
    uid?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICMaxAggregateInputType = {
    id?: true
    uid?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICCountAggregateInputType = {
    id?: true
    uid?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MTICAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTIC to aggregate.
     */
    where?: MTICWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICS to fetch.
     */
    orderBy?: MTICOrderByWithRelationInput | MTICOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MTICWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MTICS
    **/
    _count?: true | MTICCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MTICMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MTICMaxAggregateInputType
  }

  export type GetMTICAggregateType<T extends MTICAggregateArgs> = {
        [P in keyof T & keyof AggregateMTIC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMTIC[P]>
      : GetScalarType<T[P], AggregateMTIC[P]>
  }




  export type MTICGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICWhereInput
    orderBy?: MTICOrderByWithAggregationInput | MTICOrderByWithAggregationInput[]
    by: MTICScalarFieldEnum[] | MTICScalarFieldEnum
    having?: MTICScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MTICCountAggregateInputType | true
    _min?: MTICMinAggregateInputType
    _max?: MTICMaxAggregateInputType
  }

  export type MTICGroupByOutputType = {
    id: string
    uid: string
    createdAt: Date
    updatedAt: Date
    _count: MTICCountAggregateOutputType | null
    _min: MTICMinAggregateOutputType | null
    _max: MTICMaxAggregateOutputType | null
  }

  type GetMTICGroupByPayload<T extends MTICGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MTICGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MTICGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MTICGroupByOutputType[P]>
            : GetScalarType<T[P], MTICGroupByOutputType[P]>
        }
      >
    >


  export type MTICSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mticLogs?: boolean | MTIC$mticLogsArgs<ExtArgs>
    publishedDocuments?: boolean | MTIC$publishedDocumentsArgs<ExtArgs>
    mticDocuments?: boolean | MTIC$mticDocumentsArgs<ExtArgs>
    _count?: boolean | MTICCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTIC"]>

  export type MTICSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mTIC"]>

  export type MTICSelectScalar = {
    id?: boolean
    uid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MTICInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mticLogs?: boolean | MTIC$mticLogsArgs<ExtArgs>
    publishedDocuments?: boolean | MTIC$publishedDocumentsArgs<ExtArgs>
    mticDocuments?: boolean | MTIC$mticDocumentsArgs<ExtArgs>
    _count?: boolean | MTICCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MTICIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MTICPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MTIC"
    objects: {
      mticLogs: Prisma.$MTICLogPayload<ExtArgs>[]
      publishedDocuments: Prisma.$PublishedDocumentPayload<ExtArgs>[]
      mticDocuments: Prisma.$MTICDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mTIC"]>
    composites: {}
  }

  type MTICGetPayload<S extends boolean | null | undefined | MTICDefaultArgs> = $Result.GetResult<Prisma.$MTICPayload, S>

  type MTICCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MTICFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MTICCountAggregateInputType | true
    }

  export interface MTICDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MTIC'], meta: { name: 'MTIC' } }
    /**
     * Find zero or one MTIC that matches the filter.
     * @param {MTICFindUniqueArgs} args - Arguments to find a MTIC
     * @example
     * // Get one MTIC
     * const mTIC = await prisma.mTIC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MTICFindUniqueArgs>(args: SelectSubset<T, MTICFindUniqueArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MTIC that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MTICFindUniqueOrThrowArgs} args - Arguments to find a MTIC
     * @example
     * // Get one MTIC
     * const mTIC = await prisma.mTIC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MTICFindUniqueOrThrowArgs>(args: SelectSubset<T, MTICFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MTIC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICFindFirstArgs} args - Arguments to find a MTIC
     * @example
     * // Get one MTIC
     * const mTIC = await prisma.mTIC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MTICFindFirstArgs>(args?: SelectSubset<T, MTICFindFirstArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MTIC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICFindFirstOrThrowArgs} args - Arguments to find a MTIC
     * @example
     * // Get one MTIC
     * const mTIC = await prisma.mTIC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MTICFindFirstOrThrowArgs>(args?: SelectSubset<T, MTICFindFirstOrThrowArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MTICS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MTICS
     * const mTICS = await prisma.mTIC.findMany()
     * 
     * // Get first 10 MTICS
     * const mTICS = await prisma.mTIC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mTICWithIdOnly = await prisma.mTIC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MTICFindManyArgs>(args?: SelectSubset<T, MTICFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MTIC.
     * @param {MTICCreateArgs} args - Arguments to create a MTIC.
     * @example
     * // Create one MTIC
     * const MTIC = await prisma.mTIC.create({
     *   data: {
     *     // ... data to create a MTIC
     *   }
     * })
     * 
     */
    create<T extends MTICCreateArgs>(args: SelectSubset<T, MTICCreateArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MTICS.
     * @param {MTICCreateManyArgs} args - Arguments to create many MTICS.
     * @example
     * // Create many MTICS
     * const mTIC = await prisma.mTIC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MTICCreateManyArgs>(args?: SelectSubset<T, MTICCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MTICS and returns the data saved in the database.
     * @param {MTICCreateManyAndReturnArgs} args - Arguments to create many MTICS.
     * @example
     * // Create many MTICS
     * const mTIC = await prisma.mTIC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MTICS and only return the `id`
     * const mTICWithIdOnly = await prisma.mTIC.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MTICCreateManyAndReturnArgs>(args?: SelectSubset<T, MTICCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MTIC.
     * @param {MTICDeleteArgs} args - Arguments to delete one MTIC.
     * @example
     * // Delete one MTIC
     * const MTIC = await prisma.mTIC.delete({
     *   where: {
     *     // ... filter to delete one MTIC
     *   }
     * })
     * 
     */
    delete<T extends MTICDeleteArgs>(args: SelectSubset<T, MTICDeleteArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MTIC.
     * @param {MTICUpdateArgs} args - Arguments to update one MTIC.
     * @example
     * // Update one MTIC
     * const mTIC = await prisma.mTIC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MTICUpdateArgs>(args: SelectSubset<T, MTICUpdateArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MTICS.
     * @param {MTICDeleteManyArgs} args - Arguments to filter MTICS to delete.
     * @example
     * // Delete a few MTICS
     * const { count } = await prisma.mTIC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MTICDeleteManyArgs>(args?: SelectSubset<T, MTICDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MTICS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MTICS
     * const mTIC = await prisma.mTIC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MTICUpdateManyArgs>(args: SelectSubset<T, MTICUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MTIC.
     * @param {MTICUpsertArgs} args - Arguments to update or create a MTIC.
     * @example
     * // Update or create a MTIC
     * const mTIC = await prisma.mTIC.upsert({
     *   create: {
     *     // ... data to create a MTIC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MTIC we want to update
     *   }
     * })
     */
    upsert<T extends MTICUpsertArgs>(args: SelectSubset<T, MTICUpsertArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MTICS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICCountArgs} args - Arguments to filter MTICS to count.
     * @example
     * // Count the number of MTICS
     * const count = await prisma.mTIC.count({
     *   where: {
     *     // ... the filter for the MTICS we want to count
     *   }
     * })
    **/
    count<T extends MTICCountArgs>(
      args?: Subset<T, MTICCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MTICCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MTIC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MTICAggregateArgs>(args: Subset<T, MTICAggregateArgs>): Prisma.PrismaPromise<GetMTICAggregateType<T>>

    /**
     * Group by MTIC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MTICGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MTICGroupByArgs['orderBy'] }
        : { orderBy?: MTICGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MTICGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMTICGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MTIC model
   */
  readonly fields: MTICFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MTIC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MTICClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mticLogs<T extends MTIC$mticLogsArgs<ExtArgs> = {}>(args?: Subset<T, MTIC$mticLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findMany"> | Null>
    publishedDocuments<T extends MTIC$publishedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, MTIC$publishedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    mticDocuments<T extends MTIC$mticDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, MTIC$mticDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MTIC model
   */ 
  interface MTICFieldRefs {
    readonly id: FieldRef<"MTIC", 'String'>
    readonly uid: FieldRef<"MTIC", 'String'>
    readonly createdAt: FieldRef<"MTIC", 'DateTime'>
    readonly updatedAt: FieldRef<"MTIC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MTIC findUnique
   */
  export type MTICFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter, which MTIC to fetch.
     */
    where: MTICWhereUniqueInput
  }

  /**
   * MTIC findUniqueOrThrow
   */
  export type MTICFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter, which MTIC to fetch.
     */
    where: MTICWhereUniqueInput
  }

  /**
   * MTIC findFirst
   */
  export type MTICFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter, which MTIC to fetch.
     */
    where?: MTICWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICS to fetch.
     */
    orderBy?: MTICOrderByWithRelationInput | MTICOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICS.
     */
    cursor?: MTICWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICS.
     */
    distinct?: MTICScalarFieldEnum | MTICScalarFieldEnum[]
  }

  /**
   * MTIC findFirstOrThrow
   */
  export type MTICFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter, which MTIC to fetch.
     */
    where?: MTICWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICS to fetch.
     */
    orderBy?: MTICOrderByWithRelationInput | MTICOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICS.
     */
    cursor?: MTICWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICS.
     */
    distinct?: MTICScalarFieldEnum | MTICScalarFieldEnum[]
  }

  /**
   * MTIC findMany
   */
  export type MTICFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter, which MTICS to fetch.
     */
    where?: MTICWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICS to fetch.
     */
    orderBy?: MTICOrderByWithRelationInput | MTICOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MTICS.
     */
    cursor?: MTICWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICS.
     */
    skip?: number
    distinct?: MTICScalarFieldEnum | MTICScalarFieldEnum[]
  }

  /**
   * MTIC create
   */
  export type MTICCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * The data needed to create a MTIC.
     */
    data: XOR<MTICCreateInput, MTICUncheckedCreateInput>
  }

  /**
   * MTIC createMany
   */
  export type MTICCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MTICS.
     */
    data: MTICCreateManyInput | MTICCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MTIC createManyAndReturn
   */
  export type MTICCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MTICS.
     */
    data: MTICCreateManyInput | MTICCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MTIC update
   */
  export type MTICUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * The data needed to update a MTIC.
     */
    data: XOR<MTICUpdateInput, MTICUncheckedUpdateInput>
    /**
     * Choose, which MTIC to update.
     */
    where: MTICWhereUniqueInput
  }

  /**
   * MTIC updateMany
   */
  export type MTICUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MTICS.
     */
    data: XOR<MTICUpdateManyMutationInput, MTICUncheckedUpdateManyInput>
    /**
     * Filter which MTICS to update
     */
    where?: MTICWhereInput
  }

  /**
   * MTIC upsert
   */
  export type MTICUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * The filter to search for the MTIC to update in case it exists.
     */
    where: MTICWhereUniqueInput
    /**
     * In case the MTIC found by the `where` argument doesn't exist, create a new MTIC with this data.
     */
    create: XOR<MTICCreateInput, MTICUncheckedCreateInput>
    /**
     * In case the MTIC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MTICUpdateInput, MTICUncheckedUpdateInput>
  }

  /**
   * MTIC delete
   */
  export type MTICDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    /**
     * Filter which MTIC to delete.
     */
    where: MTICWhereUniqueInput
  }

  /**
   * MTIC deleteMany
   */
  export type MTICDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICS to delete
     */
    where?: MTICWhereInput
  }

  /**
   * MTIC.mticLogs
   */
  export type MTIC$mticLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    where?: MTICLogWhereInput
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    cursor?: MTICLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICLogScalarFieldEnum | MTICLogScalarFieldEnum[]
  }

  /**
   * MTIC.publishedDocuments
   */
  export type MTIC$publishedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    where?: PublishedDocumentWhereInput
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    cursor?: PublishedDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * MTIC.mticDocuments
   */
  export type MTIC$mticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    where?: MTICDocumentWhereInput
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    cursor?: MTICDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * MTIC without action
   */
  export type MTICDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
  }


  /**
   * Model MTICLog
   */

  export type AggregateMTICLog = {
    _count: MTICLogCountAggregateOutputType | null
    _avg: MTICLogAvgAggregateOutputType | null
    _sum: MTICLogSumAggregateOutputType | null
    _min: MTICLogMinAggregateOutputType | null
    _max: MTICLogMaxAggregateOutputType | null
  }

  export type MTICLogAvgAggregateOutputType = {
    lat: Decimal | null
    lon: Decimal | null
  }

  export type MTICLogSumAggregateOutputType = {
    lat: Decimal | null
    lon: Decimal | null
  }

  export type MTICLogMinAggregateOutputType = {
    id: string | null
    mticId: string | null
    mticReaderId: string | null
    lat: Decimal | null
    lon: Decimal | null
    event: $Enums.Event | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICLogMaxAggregateOutputType = {
    id: string | null
    mticId: string | null
    mticReaderId: string | null
    lat: Decimal | null
    lon: Decimal | null
    event: $Enums.Event | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICLogCountAggregateOutputType = {
    id: number
    mticId: number
    mticReaderId: number
    lat: number
    lon: number
    event: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MTICLogAvgAggregateInputType = {
    lat?: true
    lon?: true
  }

  export type MTICLogSumAggregateInputType = {
    lat?: true
    lon?: true
  }

  export type MTICLogMinAggregateInputType = {
    id?: true
    mticId?: true
    mticReaderId?: true
    lat?: true
    lon?: true
    event?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICLogMaxAggregateInputType = {
    id?: true
    mticId?: true
    mticReaderId?: true
    lat?: true
    lon?: true
    event?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICLogCountAggregateInputType = {
    id?: true
    mticId?: true
    mticReaderId?: true
    lat?: true
    lon?: true
    event?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MTICLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICLog to aggregate.
     */
    where?: MTICLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICLogs to fetch.
     */
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MTICLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MTICLogs
    **/
    _count?: true | MTICLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MTICLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MTICLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MTICLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MTICLogMaxAggregateInputType
  }

  export type GetMTICLogAggregateType<T extends MTICLogAggregateArgs> = {
        [P in keyof T & keyof AggregateMTICLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMTICLog[P]>
      : GetScalarType<T[P], AggregateMTICLog[P]>
  }




  export type MTICLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICLogWhereInput
    orderBy?: MTICLogOrderByWithAggregationInput | MTICLogOrderByWithAggregationInput[]
    by: MTICLogScalarFieldEnum[] | MTICLogScalarFieldEnum
    having?: MTICLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MTICLogCountAggregateInputType | true
    _avg?: MTICLogAvgAggregateInputType
    _sum?: MTICLogSumAggregateInputType
    _min?: MTICLogMinAggregateInputType
    _max?: MTICLogMaxAggregateInputType
  }

  export type MTICLogGroupByOutputType = {
    id: string
    mticId: string
    mticReaderId: string
    lat: Decimal
    lon: Decimal
    event: $Enums.Event
    createdAt: Date
    updatedAt: Date
    _count: MTICLogCountAggregateOutputType | null
    _avg: MTICLogAvgAggregateOutputType | null
    _sum: MTICLogSumAggregateOutputType | null
    _min: MTICLogMinAggregateOutputType | null
    _max: MTICLogMaxAggregateOutputType | null
  }

  type GetMTICLogGroupByPayload<T extends MTICLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MTICLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MTICLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MTICLogGroupByOutputType[P]>
            : GetScalarType<T[P], MTICLogGroupByOutputType[P]>
        }
      >
    >


  export type MTICLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mticId?: boolean
    mticReaderId?: boolean
    lat?: boolean
    lon?: boolean
    event?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    mticReader?: boolean | MTICReaderDefaultArgs<ExtArgs>
    mticDocuments?: boolean | MTICLog$mticDocumentsArgs<ExtArgs>
    _count?: boolean | MTICLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTICLog"]>

  export type MTICLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mticId?: boolean
    mticReaderId?: boolean
    lat?: boolean
    lon?: boolean
    event?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    mticReader?: boolean | MTICReaderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTICLog"]>

  export type MTICLogSelectScalar = {
    id?: boolean
    mticId?: boolean
    mticReaderId?: boolean
    lat?: boolean
    lon?: boolean
    event?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MTICLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    mticReader?: boolean | MTICReaderDefaultArgs<ExtArgs>
    mticDocuments?: boolean | MTICLog$mticDocumentsArgs<ExtArgs>
    _count?: boolean | MTICLogCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MTICLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    mticReader?: boolean | MTICReaderDefaultArgs<ExtArgs>
  }

  export type $MTICLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MTICLog"
    objects: {
      mtic: Prisma.$MTICPayload<ExtArgs>
      mticReader: Prisma.$MTICReaderPayload<ExtArgs>
      mticDocuments: Prisma.$MTICDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mticId: string
      mticReaderId: string
      lat: Prisma.Decimal
      lon: Prisma.Decimal
      event: $Enums.Event
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mTICLog"]>
    composites: {}
  }

  type MTICLogGetPayload<S extends boolean | null | undefined | MTICLogDefaultArgs> = $Result.GetResult<Prisma.$MTICLogPayload, S>

  type MTICLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MTICLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MTICLogCountAggregateInputType | true
    }

  export interface MTICLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MTICLog'], meta: { name: 'MTICLog' } }
    /**
     * Find zero or one MTICLog that matches the filter.
     * @param {MTICLogFindUniqueArgs} args - Arguments to find a MTICLog
     * @example
     * // Get one MTICLog
     * const mTICLog = await prisma.mTICLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MTICLogFindUniqueArgs>(args: SelectSubset<T, MTICLogFindUniqueArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MTICLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MTICLogFindUniqueOrThrowArgs} args - Arguments to find a MTICLog
     * @example
     * // Get one MTICLog
     * const mTICLog = await prisma.mTICLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MTICLogFindUniqueOrThrowArgs>(args: SelectSubset<T, MTICLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MTICLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogFindFirstArgs} args - Arguments to find a MTICLog
     * @example
     * // Get one MTICLog
     * const mTICLog = await prisma.mTICLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MTICLogFindFirstArgs>(args?: SelectSubset<T, MTICLogFindFirstArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MTICLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogFindFirstOrThrowArgs} args - Arguments to find a MTICLog
     * @example
     * // Get one MTICLog
     * const mTICLog = await prisma.mTICLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MTICLogFindFirstOrThrowArgs>(args?: SelectSubset<T, MTICLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MTICLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MTICLogs
     * const mTICLogs = await prisma.mTICLog.findMany()
     * 
     * // Get first 10 MTICLogs
     * const mTICLogs = await prisma.mTICLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mTICLogWithIdOnly = await prisma.mTICLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MTICLogFindManyArgs>(args?: SelectSubset<T, MTICLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MTICLog.
     * @param {MTICLogCreateArgs} args - Arguments to create a MTICLog.
     * @example
     * // Create one MTICLog
     * const MTICLog = await prisma.mTICLog.create({
     *   data: {
     *     // ... data to create a MTICLog
     *   }
     * })
     * 
     */
    create<T extends MTICLogCreateArgs>(args: SelectSubset<T, MTICLogCreateArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MTICLogs.
     * @param {MTICLogCreateManyArgs} args - Arguments to create many MTICLogs.
     * @example
     * // Create many MTICLogs
     * const mTICLog = await prisma.mTICLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MTICLogCreateManyArgs>(args?: SelectSubset<T, MTICLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MTICLogs and returns the data saved in the database.
     * @param {MTICLogCreateManyAndReturnArgs} args - Arguments to create many MTICLogs.
     * @example
     * // Create many MTICLogs
     * const mTICLog = await prisma.mTICLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MTICLogs and only return the `id`
     * const mTICLogWithIdOnly = await prisma.mTICLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MTICLogCreateManyAndReturnArgs>(args?: SelectSubset<T, MTICLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MTICLog.
     * @param {MTICLogDeleteArgs} args - Arguments to delete one MTICLog.
     * @example
     * // Delete one MTICLog
     * const MTICLog = await prisma.mTICLog.delete({
     *   where: {
     *     // ... filter to delete one MTICLog
     *   }
     * })
     * 
     */
    delete<T extends MTICLogDeleteArgs>(args: SelectSubset<T, MTICLogDeleteArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MTICLog.
     * @param {MTICLogUpdateArgs} args - Arguments to update one MTICLog.
     * @example
     * // Update one MTICLog
     * const mTICLog = await prisma.mTICLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MTICLogUpdateArgs>(args: SelectSubset<T, MTICLogUpdateArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MTICLogs.
     * @param {MTICLogDeleteManyArgs} args - Arguments to filter MTICLogs to delete.
     * @example
     * // Delete a few MTICLogs
     * const { count } = await prisma.mTICLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MTICLogDeleteManyArgs>(args?: SelectSubset<T, MTICLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MTICLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MTICLogs
     * const mTICLog = await prisma.mTICLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MTICLogUpdateManyArgs>(args: SelectSubset<T, MTICLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MTICLog.
     * @param {MTICLogUpsertArgs} args - Arguments to update or create a MTICLog.
     * @example
     * // Update or create a MTICLog
     * const mTICLog = await prisma.mTICLog.upsert({
     *   create: {
     *     // ... data to create a MTICLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MTICLog we want to update
     *   }
     * })
     */
    upsert<T extends MTICLogUpsertArgs>(args: SelectSubset<T, MTICLogUpsertArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MTICLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogCountArgs} args - Arguments to filter MTICLogs to count.
     * @example
     * // Count the number of MTICLogs
     * const count = await prisma.mTICLog.count({
     *   where: {
     *     // ... the filter for the MTICLogs we want to count
     *   }
     * })
    **/
    count<T extends MTICLogCountArgs>(
      args?: Subset<T, MTICLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MTICLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MTICLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MTICLogAggregateArgs>(args: Subset<T, MTICLogAggregateArgs>): Prisma.PrismaPromise<GetMTICLogAggregateType<T>>

    /**
     * Group by MTICLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MTICLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MTICLogGroupByArgs['orderBy'] }
        : { orderBy?: MTICLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MTICLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMTICLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MTICLog model
   */
  readonly fields: MTICLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MTICLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MTICLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mtic<T extends MTICDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MTICDefaultArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mticReader<T extends MTICReaderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MTICReaderDefaultArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mticDocuments<T extends MTICLog$mticDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, MTICLog$mticDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MTICLog model
   */ 
  interface MTICLogFieldRefs {
    readonly id: FieldRef<"MTICLog", 'String'>
    readonly mticId: FieldRef<"MTICLog", 'String'>
    readonly mticReaderId: FieldRef<"MTICLog", 'String'>
    readonly lat: FieldRef<"MTICLog", 'Decimal'>
    readonly lon: FieldRef<"MTICLog", 'Decimal'>
    readonly event: FieldRef<"MTICLog", 'Event'>
    readonly createdAt: FieldRef<"MTICLog", 'DateTime'>
    readonly updatedAt: FieldRef<"MTICLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MTICLog findUnique
   */
  export type MTICLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter, which MTICLog to fetch.
     */
    where: MTICLogWhereUniqueInput
  }

  /**
   * MTICLog findUniqueOrThrow
   */
  export type MTICLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter, which MTICLog to fetch.
     */
    where: MTICLogWhereUniqueInput
  }

  /**
   * MTICLog findFirst
   */
  export type MTICLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter, which MTICLog to fetch.
     */
    where?: MTICLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICLogs to fetch.
     */
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICLogs.
     */
    cursor?: MTICLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICLogs.
     */
    distinct?: MTICLogScalarFieldEnum | MTICLogScalarFieldEnum[]
  }

  /**
   * MTICLog findFirstOrThrow
   */
  export type MTICLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter, which MTICLog to fetch.
     */
    where?: MTICLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICLogs to fetch.
     */
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICLogs.
     */
    cursor?: MTICLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICLogs.
     */
    distinct?: MTICLogScalarFieldEnum | MTICLogScalarFieldEnum[]
  }

  /**
   * MTICLog findMany
   */
  export type MTICLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter, which MTICLogs to fetch.
     */
    where?: MTICLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICLogs to fetch.
     */
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MTICLogs.
     */
    cursor?: MTICLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICLogs.
     */
    skip?: number
    distinct?: MTICLogScalarFieldEnum | MTICLogScalarFieldEnum[]
  }

  /**
   * MTICLog create
   */
  export type MTICLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * The data needed to create a MTICLog.
     */
    data: XOR<MTICLogCreateInput, MTICLogUncheckedCreateInput>
  }

  /**
   * MTICLog createMany
   */
  export type MTICLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MTICLogs.
     */
    data: MTICLogCreateManyInput | MTICLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MTICLog createManyAndReturn
   */
  export type MTICLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MTICLogs.
     */
    data: MTICLogCreateManyInput | MTICLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MTICLog update
   */
  export type MTICLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * The data needed to update a MTICLog.
     */
    data: XOR<MTICLogUpdateInput, MTICLogUncheckedUpdateInput>
    /**
     * Choose, which MTICLog to update.
     */
    where: MTICLogWhereUniqueInput
  }

  /**
   * MTICLog updateMany
   */
  export type MTICLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MTICLogs.
     */
    data: XOR<MTICLogUpdateManyMutationInput, MTICLogUncheckedUpdateManyInput>
    /**
     * Filter which MTICLogs to update
     */
    where?: MTICLogWhereInput
  }

  /**
   * MTICLog upsert
   */
  export type MTICLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * The filter to search for the MTICLog to update in case it exists.
     */
    where: MTICLogWhereUniqueInput
    /**
     * In case the MTICLog found by the `where` argument doesn't exist, create a new MTICLog with this data.
     */
    create: XOR<MTICLogCreateInput, MTICLogUncheckedCreateInput>
    /**
     * In case the MTICLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MTICLogUpdateInput, MTICLogUncheckedUpdateInput>
  }

  /**
   * MTICLog delete
   */
  export type MTICLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    /**
     * Filter which MTICLog to delete.
     */
    where: MTICLogWhereUniqueInput
  }

  /**
   * MTICLog deleteMany
   */
  export type MTICLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICLogs to delete
     */
    where?: MTICLogWhereInput
  }

  /**
   * MTICLog.mticDocuments
   */
  export type MTICLog$mticDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    where?: MTICDocumentWhereInput
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    cursor?: MTICDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * MTICLog without action
   */
  export type MTICLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
  }


  /**
   * Model MTICReader
   */

  export type AggregateMTICReader = {
    _count: MTICReaderCountAggregateOutputType | null
    _min: MTICReaderMinAggregateOutputType | null
    _max: MTICReaderMaxAggregateOutputType | null
  }

  export type MTICReaderMinAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICReaderMaxAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICReaderCountAggregateOutputType = {
    id: number
    isActive: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MTICReaderMinAggregateInputType = {
    id?: true
    isActive?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICReaderMaxAggregateInputType = {
    id?: true
    isActive?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICReaderCountAggregateInputType = {
    id?: true
    isActive?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MTICReaderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICReader to aggregate.
     */
    where?: MTICReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICReaders to fetch.
     */
    orderBy?: MTICReaderOrderByWithRelationInput | MTICReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MTICReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICReaders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICReaders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MTICReaders
    **/
    _count?: true | MTICReaderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MTICReaderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MTICReaderMaxAggregateInputType
  }

  export type GetMTICReaderAggregateType<T extends MTICReaderAggregateArgs> = {
        [P in keyof T & keyof AggregateMTICReader]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMTICReader[P]>
      : GetScalarType<T[P], AggregateMTICReader[P]>
  }




  export type MTICReaderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICReaderWhereInput
    orderBy?: MTICReaderOrderByWithAggregationInput | MTICReaderOrderByWithAggregationInput[]
    by: MTICReaderScalarFieldEnum[] | MTICReaderScalarFieldEnum
    having?: MTICReaderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MTICReaderCountAggregateInputType | true
    _min?: MTICReaderMinAggregateInputType
    _max?: MTICReaderMaxAggregateInputType
  }

  export type MTICReaderGroupByOutputType = {
    id: string
    isActive: boolean
    tenantId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MTICReaderCountAggregateOutputType | null
    _min: MTICReaderMinAggregateOutputType | null
    _max: MTICReaderMaxAggregateOutputType | null
  }

  type GetMTICReaderGroupByPayload<T extends MTICReaderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MTICReaderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MTICReaderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MTICReaderGroupByOutputType[P]>
            : GetScalarType<T[P], MTICReaderGroupByOutputType[P]>
        }
      >
    >


  export type MTICReaderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | MTICReader$tenantArgs<ExtArgs>
    mticLogs?: boolean | MTICReader$mticLogsArgs<ExtArgs>
    _count?: boolean | MTICReaderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTICReader"]>

  export type MTICReaderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | MTICReader$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["mTICReader"]>

  export type MTICReaderSelectScalar = {
    id?: boolean
    isActive?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MTICReaderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | MTICReader$tenantArgs<ExtArgs>
    mticLogs?: boolean | MTICReader$mticLogsArgs<ExtArgs>
    _count?: boolean | MTICReaderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MTICReaderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | MTICReader$tenantArgs<ExtArgs>
  }

  export type $MTICReaderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MTICReader"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      mticLogs: Prisma.$MTICLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isActive: boolean
      tenantId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mTICReader"]>
    composites: {}
  }

  type MTICReaderGetPayload<S extends boolean | null | undefined | MTICReaderDefaultArgs> = $Result.GetResult<Prisma.$MTICReaderPayload, S>

  type MTICReaderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MTICReaderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MTICReaderCountAggregateInputType | true
    }

  export interface MTICReaderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MTICReader'], meta: { name: 'MTICReader' } }
    /**
     * Find zero or one MTICReader that matches the filter.
     * @param {MTICReaderFindUniqueArgs} args - Arguments to find a MTICReader
     * @example
     * // Get one MTICReader
     * const mTICReader = await prisma.mTICReader.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MTICReaderFindUniqueArgs>(args: SelectSubset<T, MTICReaderFindUniqueArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MTICReader that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MTICReaderFindUniqueOrThrowArgs} args - Arguments to find a MTICReader
     * @example
     * // Get one MTICReader
     * const mTICReader = await prisma.mTICReader.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MTICReaderFindUniqueOrThrowArgs>(args: SelectSubset<T, MTICReaderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MTICReader that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderFindFirstArgs} args - Arguments to find a MTICReader
     * @example
     * // Get one MTICReader
     * const mTICReader = await prisma.mTICReader.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MTICReaderFindFirstArgs>(args?: SelectSubset<T, MTICReaderFindFirstArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MTICReader that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderFindFirstOrThrowArgs} args - Arguments to find a MTICReader
     * @example
     * // Get one MTICReader
     * const mTICReader = await prisma.mTICReader.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MTICReaderFindFirstOrThrowArgs>(args?: SelectSubset<T, MTICReaderFindFirstOrThrowArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MTICReaders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MTICReaders
     * const mTICReaders = await prisma.mTICReader.findMany()
     * 
     * // Get first 10 MTICReaders
     * const mTICReaders = await prisma.mTICReader.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mTICReaderWithIdOnly = await prisma.mTICReader.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MTICReaderFindManyArgs>(args?: SelectSubset<T, MTICReaderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MTICReader.
     * @param {MTICReaderCreateArgs} args - Arguments to create a MTICReader.
     * @example
     * // Create one MTICReader
     * const MTICReader = await prisma.mTICReader.create({
     *   data: {
     *     // ... data to create a MTICReader
     *   }
     * })
     * 
     */
    create<T extends MTICReaderCreateArgs>(args: SelectSubset<T, MTICReaderCreateArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MTICReaders.
     * @param {MTICReaderCreateManyArgs} args - Arguments to create many MTICReaders.
     * @example
     * // Create many MTICReaders
     * const mTICReader = await prisma.mTICReader.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MTICReaderCreateManyArgs>(args?: SelectSubset<T, MTICReaderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MTICReaders and returns the data saved in the database.
     * @param {MTICReaderCreateManyAndReturnArgs} args - Arguments to create many MTICReaders.
     * @example
     * // Create many MTICReaders
     * const mTICReader = await prisma.mTICReader.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MTICReaders and only return the `id`
     * const mTICReaderWithIdOnly = await prisma.mTICReader.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MTICReaderCreateManyAndReturnArgs>(args?: SelectSubset<T, MTICReaderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MTICReader.
     * @param {MTICReaderDeleteArgs} args - Arguments to delete one MTICReader.
     * @example
     * // Delete one MTICReader
     * const MTICReader = await prisma.mTICReader.delete({
     *   where: {
     *     // ... filter to delete one MTICReader
     *   }
     * })
     * 
     */
    delete<T extends MTICReaderDeleteArgs>(args: SelectSubset<T, MTICReaderDeleteArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MTICReader.
     * @param {MTICReaderUpdateArgs} args - Arguments to update one MTICReader.
     * @example
     * // Update one MTICReader
     * const mTICReader = await prisma.mTICReader.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MTICReaderUpdateArgs>(args: SelectSubset<T, MTICReaderUpdateArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MTICReaders.
     * @param {MTICReaderDeleteManyArgs} args - Arguments to filter MTICReaders to delete.
     * @example
     * // Delete a few MTICReaders
     * const { count } = await prisma.mTICReader.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MTICReaderDeleteManyArgs>(args?: SelectSubset<T, MTICReaderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MTICReaders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MTICReaders
     * const mTICReader = await prisma.mTICReader.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MTICReaderUpdateManyArgs>(args: SelectSubset<T, MTICReaderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MTICReader.
     * @param {MTICReaderUpsertArgs} args - Arguments to update or create a MTICReader.
     * @example
     * // Update or create a MTICReader
     * const mTICReader = await prisma.mTICReader.upsert({
     *   create: {
     *     // ... data to create a MTICReader
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MTICReader we want to update
     *   }
     * })
     */
    upsert<T extends MTICReaderUpsertArgs>(args: SelectSubset<T, MTICReaderUpsertArgs<ExtArgs>>): Prisma__MTICReaderClient<$Result.GetResult<Prisma.$MTICReaderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MTICReaders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderCountArgs} args - Arguments to filter MTICReaders to count.
     * @example
     * // Count the number of MTICReaders
     * const count = await prisma.mTICReader.count({
     *   where: {
     *     // ... the filter for the MTICReaders we want to count
     *   }
     * })
    **/
    count<T extends MTICReaderCountArgs>(
      args?: Subset<T, MTICReaderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MTICReaderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MTICReader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MTICReaderAggregateArgs>(args: Subset<T, MTICReaderAggregateArgs>): Prisma.PrismaPromise<GetMTICReaderAggregateType<T>>

    /**
     * Group by MTICReader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICReaderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MTICReaderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MTICReaderGroupByArgs['orderBy'] }
        : { orderBy?: MTICReaderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MTICReaderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMTICReaderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MTICReader model
   */
  readonly fields: MTICReaderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MTICReader.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MTICReaderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends MTICReader$tenantArgs<ExtArgs> = {}>(args?: Subset<T, MTICReader$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    mticLogs<T extends MTICReader$mticLogsArgs<ExtArgs> = {}>(args?: Subset<T, MTICReader$mticLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MTICReader model
   */ 
  interface MTICReaderFieldRefs {
    readonly id: FieldRef<"MTICReader", 'String'>
    readonly isActive: FieldRef<"MTICReader", 'Boolean'>
    readonly tenantId: FieldRef<"MTICReader", 'String'>
    readonly createdAt: FieldRef<"MTICReader", 'DateTime'>
    readonly updatedAt: FieldRef<"MTICReader", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MTICReader findUnique
   */
  export type MTICReaderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter, which MTICReader to fetch.
     */
    where: MTICReaderWhereUniqueInput
  }

  /**
   * MTICReader findUniqueOrThrow
   */
  export type MTICReaderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter, which MTICReader to fetch.
     */
    where: MTICReaderWhereUniqueInput
  }

  /**
   * MTICReader findFirst
   */
  export type MTICReaderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter, which MTICReader to fetch.
     */
    where?: MTICReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICReaders to fetch.
     */
    orderBy?: MTICReaderOrderByWithRelationInput | MTICReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICReaders.
     */
    cursor?: MTICReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICReaders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICReaders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICReaders.
     */
    distinct?: MTICReaderScalarFieldEnum | MTICReaderScalarFieldEnum[]
  }

  /**
   * MTICReader findFirstOrThrow
   */
  export type MTICReaderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter, which MTICReader to fetch.
     */
    where?: MTICReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICReaders to fetch.
     */
    orderBy?: MTICReaderOrderByWithRelationInput | MTICReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICReaders.
     */
    cursor?: MTICReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICReaders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICReaders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICReaders.
     */
    distinct?: MTICReaderScalarFieldEnum | MTICReaderScalarFieldEnum[]
  }

  /**
   * MTICReader findMany
   */
  export type MTICReaderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter, which MTICReaders to fetch.
     */
    where?: MTICReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICReaders to fetch.
     */
    orderBy?: MTICReaderOrderByWithRelationInput | MTICReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MTICReaders.
     */
    cursor?: MTICReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICReaders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICReaders.
     */
    skip?: number
    distinct?: MTICReaderScalarFieldEnum | MTICReaderScalarFieldEnum[]
  }

  /**
   * MTICReader create
   */
  export type MTICReaderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * The data needed to create a MTICReader.
     */
    data: XOR<MTICReaderCreateInput, MTICReaderUncheckedCreateInput>
  }

  /**
   * MTICReader createMany
   */
  export type MTICReaderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MTICReaders.
     */
    data: MTICReaderCreateManyInput | MTICReaderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MTICReader createManyAndReturn
   */
  export type MTICReaderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MTICReaders.
     */
    data: MTICReaderCreateManyInput | MTICReaderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MTICReader update
   */
  export type MTICReaderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * The data needed to update a MTICReader.
     */
    data: XOR<MTICReaderUpdateInput, MTICReaderUncheckedUpdateInput>
    /**
     * Choose, which MTICReader to update.
     */
    where: MTICReaderWhereUniqueInput
  }

  /**
   * MTICReader updateMany
   */
  export type MTICReaderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MTICReaders.
     */
    data: XOR<MTICReaderUpdateManyMutationInput, MTICReaderUncheckedUpdateManyInput>
    /**
     * Filter which MTICReaders to update
     */
    where?: MTICReaderWhereInput
  }

  /**
   * MTICReader upsert
   */
  export type MTICReaderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * The filter to search for the MTICReader to update in case it exists.
     */
    where: MTICReaderWhereUniqueInput
    /**
     * In case the MTICReader found by the `where` argument doesn't exist, create a new MTICReader with this data.
     */
    create: XOR<MTICReaderCreateInput, MTICReaderUncheckedCreateInput>
    /**
     * In case the MTICReader was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MTICReaderUpdateInput, MTICReaderUncheckedUpdateInput>
  }

  /**
   * MTICReader delete
   */
  export type MTICReaderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
    /**
     * Filter which MTICReader to delete.
     */
    where: MTICReaderWhereUniqueInput
  }

  /**
   * MTICReader deleteMany
   */
  export type MTICReaderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICReaders to delete
     */
    where?: MTICReaderWhereInput
  }

  /**
   * MTICReader.tenant
   */
  export type MTICReader$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * MTICReader.mticLogs
   */
  export type MTICReader$mticLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICLog
     */
    select?: MTICLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICLogInclude<ExtArgs> | null
    where?: MTICLogWhereInput
    orderBy?: MTICLogOrderByWithRelationInput | MTICLogOrderByWithRelationInput[]
    cursor?: MTICLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MTICLogScalarFieldEnum | MTICLogScalarFieldEnum[]
  }

  /**
   * MTICReader without action
   */
  export type MTICReaderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICReader
     */
    select?: MTICReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICReaderInclude<ExtArgs> | null
  }


  /**
   * Model MTICDocument
   */

  export type AggregateMTICDocument = {
    _count: MTICDocumentCountAggregateOutputType | null
    _min: MTICDocumentMinAggregateOutputType | null
    _max: MTICDocumentMaxAggregateOutputType | null
  }

  export type MTICDocumentMinAggregateOutputType = {
    id: string | null
    mticId: string | null
    mticLogId: string | null
    documentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICDocumentMaxAggregateOutputType = {
    id: string | null
    mticId: string | null
    mticLogId: string | null
    documentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MTICDocumentCountAggregateOutputType = {
    id: number
    mticId: number
    mticLogId: number
    documentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MTICDocumentMinAggregateInputType = {
    id?: true
    mticId?: true
    mticLogId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICDocumentMaxAggregateInputType = {
    id?: true
    mticId?: true
    mticLogId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MTICDocumentCountAggregateInputType = {
    id?: true
    mticId?: true
    mticLogId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MTICDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICDocument to aggregate.
     */
    where?: MTICDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICDocuments to fetch.
     */
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MTICDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MTICDocuments
    **/
    _count?: true | MTICDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MTICDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MTICDocumentMaxAggregateInputType
  }

  export type GetMTICDocumentAggregateType<T extends MTICDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateMTICDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMTICDocument[P]>
      : GetScalarType<T[P], AggregateMTICDocument[P]>
  }




  export type MTICDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MTICDocumentWhereInput
    orderBy?: MTICDocumentOrderByWithAggregationInput | MTICDocumentOrderByWithAggregationInput[]
    by: MTICDocumentScalarFieldEnum[] | MTICDocumentScalarFieldEnum
    having?: MTICDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MTICDocumentCountAggregateInputType | true
    _min?: MTICDocumentMinAggregateInputType
    _max?: MTICDocumentMaxAggregateInputType
  }

  export type MTICDocumentGroupByOutputType = {
    id: string
    mticId: string | null
    mticLogId: string
    documentId: string
    createdAt: Date
    updatedAt: Date
    _count: MTICDocumentCountAggregateOutputType | null
    _min: MTICDocumentMinAggregateOutputType | null
    _max: MTICDocumentMaxAggregateOutputType | null
  }

  type GetMTICDocumentGroupByPayload<T extends MTICDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MTICDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MTICDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MTICDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], MTICDocumentGroupByOutputType[P]>
        }
      >
    >


  export type MTICDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mticId?: boolean
    mticLogId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mtic?: boolean | MTICDocument$mticArgs<ExtArgs>
    mticLog?: boolean | MTICLogDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTICDocument"]>

  export type MTICDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mticId?: boolean
    mticLogId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mtic?: boolean | MTICDocument$mticArgs<ExtArgs>
    mticLog?: boolean | MTICLogDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mTICDocument"]>

  export type MTICDocumentSelectScalar = {
    id?: boolean
    mticId?: boolean
    mticLogId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MTICDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDocument$mticArgs<ExtArgs>
    mticLog?: boolean | MTICLogDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }
  export type MTICDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDocument$mticArgs<ExtArgs>
    mticLog?: boolean | MTICLogDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }

  export type $MTICDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MTICDocument"
    objects: {
      mtic: Prisma.$MTICPayload<ExtArgs> | null
      mticLog: Prisma.$MTICLogPayload<ExtArgs>
      document: Prisma.$DocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mticId: string | null
      mticLogId: string
      documentId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mTICDocument"]>
    composites: {}
  }

  type MTICDocumentGetPayload<S extends boolean | null | undefined | MTICDocumentDefaultArgs> = $Result.GetResult<Prisma.$MTICDocumentPayload, S>

  type MTICDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MTICDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MTICDocumentCountAggregateInputType | true
    }

  export interface MTICDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MTICDocument'], meta: { name: 'MTICDocument' } }
    /**
     * Find zero or one MTICDocument that matches the filter.
     * @param {MTICDocumentFindUniqueArgs} args - Arguments to find a MTICDocument
     * @example
     * // Get one MTICDocument
     * const mTICDocument = await prisma.mTICDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MTICDocumentFindUniqueArgs>(args: SelectSubset<T, MTICDocumentFindUniqueArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MTICDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MTICDocumentFindUniqueOrThrowArgs} args - Arguments to find a MTICDocument
     * @example
     * // Get one MTICDocument
     * const mTICDocument = await prisma.mTICDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MTICDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, MTICDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MTICDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentFindFirstArgs} args - Arguments to find a MTICDocument
     * @example
     * // Get one MTICDocument
     * const mTICDocument = await prisma.mTICDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MTICDocumentFindFirstArgs>(args?: SelectSubset<T, MTICDocumentFindFirstArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MTICDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentFindFirstOrThrowArgs} args - Arguments to find a MTICDocument
     * @example
     * // Get one MTICDocument
     * const mTICDocument = await prisma.mTICDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MTICDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, MTICDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MTICDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MTICDocuments
     * const mTICDocuments = await prisma.mTICDocument.findMany()
     * 
     * // Get first 10 MTICDocuments
     * const mTICDocuments = await prisma.mTICDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mTICDocumentWithIdOnly = await prisma.mTICDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MTICDocumentFindManyArgs>(args?: SelectSubset<T, MTICDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MTICDocument.
     * @param {MTICDocumentCreateArgs} args - Arguments to create a MTICDocument.
     * @example
     * // Create one MTICDocument
     * const MTICDocument = await prisma.mTICDocument.create({
     *   data: {
     *     // ... data to create a MTICDocument
     *   }
     * })
     * 
     */
    create<T extends MTICDocumentCreateArgs>(args: SelectSubset<T, MTICDocumentCreateArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MTICDocuments.
     * @param {MTICDocumentCreateManyArgs} args - Arguments to create many MTICDocuments.
     * @example
     * // Create many MTICDocuments
     * const mTICDocument = await prisma.mTICDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MTICDocumentCreateManyArgs>(args?: SelectSubset<T, MTICDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MTICDocuments and returns the data saved in the database.
     * @param {MTICDocumentCreateManyAndReturnArgs} args - Arguments to create many MTICDocuments.
     * @example
     * // Create many MTICDocuments
     * const mTICDocument = await prisma.mTICDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MTICDocuments and only return the `id`
     * const mTICDocumentWithIdOnly = await prisma.mTICDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MTICDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, MTICDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MTICDocument.
     * @param {MTICDocumentDeleteArgs} args - Arguments to delete one MTICDocument.
     * @example
     * // Delete one MTICDocument
     * const MTICDocument = await prisma.mTICDocument.delete({
     *   where: {
     *     // ... filter to delete one MTICDocument
     *   }
     * })
     * 
     */
    delete<T extends MTICDocumentDeleteArgs>(args: SelectSubset<T, MTICDocumentDeleteArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MTICDocument.
     * @param {MTICDocumentUpdateArgs} args - Arguments to update one MTICDocument.
     * @example
     * // Update one MTICDocument
     * const mTICDocument = await prisma.mTICDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MTICDocumentUpdateArgs>(args: SelectSubset<T, MTICDocumentUpdateArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MTICDocuments.
     * @param {MTICDocumentDeleteManyArgs} args - Arguments to filter MTICDocuments to delete.
     * @example
     * // Delete a few MTICDocuments
     * const { count } = await prisma.mTICDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MTICDocumentDeleteManyArgs>(args?: SelectSubset<T, MTICDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MTICDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MTICDocuments
     * const mTICDocument = await prisma.mTICDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MTICDocumentUpdateManyArgs>(args: SelectSubset<T, MTICDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MTICDocument.
     * @param {MTICDocumentUpsertArgs} args - Arguments to update or create a MTICDocument.
     * @example
     * // Update or create a MTICDocument
     * const mTICDocument = await prisma.mTICDocument.upsert({
     *   create: {
     *     // ... data to create a MTICDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MTICDocument we want to update
     *   }
     * })
     */
    upsert<T extends MTICDocumentUpsertArgs>(args: SelectSubset<T, MTICDocumentUpsertArgs<ExtArgs>>): Prisma__MTICDocumentClient<$Result.GetResult<Prisma.$MTICDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MTICDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentCountArgs} args - Arguments to filter MTICDocuments to count.
     * @example
     * // Count the number of MTICDocuments
     * const count = await prisma.mTICDocument.count({
     *   where: {
     *     // ... the filter for the MTICDocuments we want to count
     *   }
     * })
    **/
    count<T extends MTICDocumentCountArgs>(
      args?: Subset<T, MTICDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MTICDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MTICDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MTICDocumentAggregateArgs>(args: Subset<T, MTICDocumentAggregateArgs>): Prisma.PrismaPromise<GetMTICDocumentAggregateType<T>>

    /**
     * Group by MTICDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MTICDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MTICDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MTICDocumentGroupByArgs['orderBy'] }
        : { orderBy?: MTICDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MTICDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMTICDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MTICDocument model
   */
  readonly fields: MTICDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MTICDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MTICDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mtic<T extends MTICDocument$mticArgs<ExtArgs> = {}>(args?: Subset<T, MTICDocument$mticArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    mticLog<T extends MTICLogDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MTICLogDefaultArgs<ExtArgs>>): Prisma__MTICLogClient<$Result.GetResult<Prisma.$MTICLogPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MTICDocument model
   */ 
  interface MTICDocumentFieldRefs {
    readonly id: FieldRef<"MTICDocument", 'String'>
    readonly mticId: FieldRef<"MTICDocument", 'String'>
    readonly mticLogId: FieldRef<"MTICDocument", 'String'>
    readonly documentId: FieldRef<"MTICDocument", 'String'>
    readonly createdAt: FieldRef<"MTICDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"MTICDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MTICDocument findUnique
   */
  export type MTICDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter, which MTICDocument to fetch.
     */
    where: MTICDocumentWhereUniqueInput
  }

  /**
   * MTICDocument findUniqueOrThrow
   */
  export type MTICDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter, which MTICDocument to fetch.
     */
    where: MTICDocumentWhereUniqueInput
  }

  /**
   * MTICDocument findFirst
   */
  export type MTICDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter, which MTICDocument to fetch.
     */
    where?: MTICDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICDocuments to fetch.
     */
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICDocuments.
     */
    cursor?: MTICDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICDocuments.
     */
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * MTICDocument findFirstOrThrow
   */
  export type MTICDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter, which MTICDocument to fetch.
     */
    where?: MTICDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICDocuments to fetch.
     */
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MTICDocuments.
     */
    cursor?: MTICDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MTICDocuments.
     */
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * MTICDocument findMany
   */
  export type MTICDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter, which MTICDocuments to fetch.
     */
    where?: MTICDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MTICDocuments to fetch.
     */
    orderBy?: MTICDocumentOrderByWithRelationInput | MTICDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MTICDocuments.
     */
    cursor?: MTICDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MTICDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MTICDocuments.
     */
    skip?: number
    distinct?: MTICDocumentScalarFieldEnum | MTICDocumentScalarFieldEnum[]
  }

  /**
   * MTICDocument create
   */
  export type MTICDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a MTICDocument.
     */
    data: XOR<MTICDocumentCreateInput, MTICDocumentUncheckedCreateInput>
  }

  /**
   * MTICDocument createMany
   */
  export type MTICDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MTICDocuments.
     */
    data: MTICDocumentCreateManyInput | MTICDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MTICDocument createManyAndReturn
   */
  export type MTICDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MTICDocuments.
     */
    data: MTICDocumentCreateManyInput | MTICDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MTICDocument update
   */
  export type MTICDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a MTICDocument.
     */
    data: XOR<MTICDocumentUpdateInput, MTICDocumentUncheckedUpdateInput>
    /**
     * Choose, which MTICDocument to update.
     */
    where: MTICDocumentWhereUniqueInput
  }

  /**
   * MTICDocument updateMany
   */
  export type MTICDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MTICDocuments.
     */
    data: XOR<MTICDocumentUpdateManyMutationInput, MTICDocumentUncheckedUpdateManyInput>
    /**
     * Filter which MTICDocuments to update
     */
    where?: MTICDocumentWhereInput
  }

  /**
   * MTICDocument upsert
   */
  export type MTICDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the MTICDocument to update in case it exists.
     */
    where: MTICDocumentWhereUniqueInput
    /**
     * In case the MTICDocument found by the `where` argument doesn't exist, create a new MTICDocument with this data.
     */
    create: XOR<MTICDocumentCreateInput, MTICDocumentUncheckedCreateInput>
    /**
     * In case the MTICDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MTICDocumentUpdateInput, MTICDocumentUncheckedUpdateInput>
  }

  /**
   * MTICDocument delete
   */
  export type MTICDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
    /**
     * Filter which MTICDocument to delete.
     */
    where: MTICDocumentWhereUniqueInput
  }

  /**
   * MTICDocument deleteMany
   */
  export type MTICDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MTICDocuments to delete
     */
    where?: MTICDocumentWhereInput
  }

  /**
   * MTICDocument.mtic
   */
  export type MTICDocument$mticArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTIC
     */
    select?: MTICSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICInclude<ExtArgs> | null
    where?: MTICWhereInput
  }

  /**
   * MTICDocument without action
   */
  export type MTICDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MTICDocument
     */
    select?: MTICDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MTICDocumentInclude<ExtArgs> | null
  }


  /**
   * Model PublishedDocument
   */

  export type AggregatePublishedDocument = {
    _count: PublishedDocumentCountAggregateOutputType | null
    _min: PublishedDocumentMinAggregateOutputType | null
    _max: PublishedDocumentMaxAggregateOutputType | null
  }

  export type PublishedDocumentMinAggregateOutputType = {
    id: string | null
    uid: string | null
    mticId: string | null
    createdById: string | null
    ownerId: string | null
    createdAt: Date | null
  }

  export type PublishedDocumentMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    mticId: string | null
    createdById: string | null
    ownerId: string | null
    createdAt: Date | null
  }

  export type PublishedDocumentCountAggregateOutputType = {
    id: number
    uid: number
    mticId: number
    documentJson: number
    createdById: number
    ownerId: number
    createdAt: number
    _all: number
  }


  export type PublishedDocumentMinAggregateInputType = {
    id?: true
    uid?: true
    mticId?: true
    createdById?: true
    ownerId?: true
    createdAt?: true
  }

  export type PublishedDocumentMaxAggregateInputType = {
    id?: true
    uid?: true
    mticId?: true
    createdById?: true
    ownerId?: true
    createdAt?: true
  }

  export type PublishedDocumentCountAggregateInputType = {
    id?: true
    uid?: true
    mticId?: true
    documentJson?: true
    createdById?: true
    ownerId?: true
    createdAt?: true
    _all?: true
  }

  export type PublishedDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedDocument to aggregate.
     */
    where?: PublishedDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedDocuments to fetch.
     */
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublishedDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublishedDocuments
    **/
    _count?: true | PublishedDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublishedDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublishedDocumentMaxAggregateInputType
  }

  export type GetPublishedDocumentAggregateType<T extends PublishedDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregatePublishedDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublishedDocument[P]>
      : GetScalarType<T[P], AggregatePublishedDocument[P]>
  }




  export type PublishedDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedDocumentWhereInput
    orderBy?: PublishedDocumentOrderByWithAggregationInput | PublishedDocumentOrderByWithAggregationInput[]
    by: PublishedDocumentScalarFieldEnum[] | PublishedDocumentScalarFieldEnum
    having?: PublishedDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublishedDocumentCountAggregateInputType | true
    _min?: PublishedDocumentMinAggregateInputType
    _max?: PublishedDocumentMaxAggregateInputType
  }

  export type PublishedDocumentGroupByOutputType = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonValue
    createdById: string
    ownerId: string
    createdAt: Date
    _count: PublishedDocumentCountAggregateOutputType | null
    _min: PublishedDocumentMinAggregateOutputType | null
    _max: PublishedDocumentMaxAggregateOutputType | null
  }

  type GetPublishedDocumentGroupByPayload<T extends PublishedDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublishedDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublishedDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublishedDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], PublishedDocumentGroupByOutputType[P]>
        }
      >
    >


  export type PublishedDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    mticId?: boolean
    documentJson?: boolean
    createdById?: boolean
    ownerId?: boolean
    createdAt?: boolean
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantDefaultArgs<ExtArgs>
    owner?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publishedDocument"]>

  export type PublishedDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    mticId?: boolean
    documentJson?: boolean
    createdById?: boolean
    ownerId?: boolean
    createdAt?: boolean
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantDefaultArgs<ExtArgs>
    owner?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publishedDocument"]>

  export type PublishedDocumentSelectScalar = {
    id?: boolean
    uid?: boolean
    mticId?: boolean
    documentJson?: boolean
    createdById?: boolean
    ownerId?: boolean
    createdAt?: boolean
  }

  export type PublishedDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantDefaultArgs<ExtArgs>
    owner?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PublishedDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mtic?: boolean | MTICDefaultArgs<ExtArgs>
    createdBy?: boolean | TenantDefaultArgs<ExtArgs>
    owner?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PublishedDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublishedDocument"
    objects: {
      mtic: Prisma.$MTICPayload<ExtArgs>
      createdBy: Prisma.$TenantPayload<ExtArgs>
      owner: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      mticId: string
      documentJson: Prisma.JsonValue
      createdById: string
      ownerId: string
      createdAt: Date
    }, ExtArgs["result"]["publishedDocument"]>
    composites: {}
  }

  type PublishedDocumentGetPayload<S extends boolean | null | undefined | PublishedDocumentDefaultArgs> = $Result.GetResult<Prisma.$PublishedDocumentPayload, S>

  type PublishedDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublishedDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublishedDocumentCountAggregateInputType | true
    }

  export interface PublishedDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublishedDocument'], meta: { name: 'PublishedDocument' } }
    /**
     * Find zero or one PublishedDocument that matches the filter.
     * @param {PublishedDocumentFindUniqueArgs} args - Arguments to find a PublishedDocument
     * @example
     * // Get one PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublishedDocumentFindUniqueArgs>(args: SelectSubset<T, PublishedDocumentFindUniqueArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PublishedDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublishedDocumentFindUniqueOrThrowArgs} args - Arguments to find a PublishedDocument
     * @example
     * // Get one PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublishedDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, PublishedDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PublishedDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentFindFirstArgs} args - Arguments to find a PublishedDocument
     * @example
     * // Get one PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublishedDocumentFindFirstArgs>(args?: SelectSubset<T, PublishedDocumentFindFirstArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PublishedDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentFindFirstOrThrowArgs} args - Arguments to find a PublishedDocument
     * @example
     * // Get one PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublishedDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, PublishedDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PublishedDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublishedDocuments
     * const publishedDocuments = await prisma.publishedDocument.findMany()
     * 
     * // Get first 10 PublishedDocuments
     * const publishedDocuments = await prisma.publishedDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publishedDocumentWithIdOnly = await prisma.publishedDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublishedDocumentFindManyArgs>(args?: SelectSubset<T, PublishedDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PublishedDocument.
     * @param {PublishedDocumentCreateArgs} args - Arguments to create a PublishedDocument.
     * @example
     * // Create one PublishedDocument
     * const PublishedDocument = await prisma.publishedDocument.create({
     *   data: {
     *     // ... data to create a PublishedDocument
     *   }
     * })
     * 
     */
    create<T extends PublishedDocumentCreateArgs>(args: SelectSubset<T, PublishedDocumentCreateArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PublishedDocuments.
     * @param {PublishedDocumentCreateManyArgs} args - Arguments to create many PublishedDocuments.
     * @example
     * // Create many PublishedDocuments
     * const publishedDocument = await prisma.publishedDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublishedDocumentCreateManyArgs>(args?: SelectSubset<T, PublishedDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublishedDocuments and returns the data saved in the database.
     * @param {PublishedDocumentCreateManyAndReturnArgs} args - Arguments to create many PublishedDocuments.
     * @example
     * // Create many PublishedDocuments
     * const publishedDocument = await prisma.publishedDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublishedDocuments and only return the `id`
     * const publishedDocumentWithIdOnly = await prisma.publishedDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublishedDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, PublishedDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PublishedDocument.
     * @param {PublishedDocumentDeleteArgs} args - Arguments to delete one PublishedDocument.
     * @example
     * // Delete one PublishedDocument
     * const PublishedDocument = await prisma.publishedDocument.delete({
     *   where: {
     *     // ... filter to delete one PublishedDocument
     *   }
     * })
     * 
     */
    delete<T extends PublishedDocumentDeleteArgs>(args: SelectSubset<T, PublishedDocumentDeleteArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PublishedDocument.
     * @param {PublishedDocumentUpdateArgs} args - Arguments to update one PublishedDocument.
     * @example
     * // Update one PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublishedDocumentUpdateArgs>(args: SelectSubset<T, PublishedDocumentUpdateArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PublishedDocuments.
     * @param {PublishedDocumentDeleteManyArgs} args - Arguments to filter PublishedDocuments to delete.
     * @example
     * // Delete a few PublishedDocuments
     * const { count } = await prisma.publishedDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublishedDocumentDeleteManyArgs>(args?: SelectSubset<T, PublishedDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublishedDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublishedDocuments
     * const publishedDocument = await prisma.publishedDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublishedDocumentUpdateManyArgs>(args: SelectSubset<T, PublishedDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PublishedDocument.
     * @param {PublishedDocumentUpsertArgs} args - Arguments to update or create a PublishedDocument.
     * @example
     * // Update or create a PublishedDocument
     * const publishedDocument = await prisma.publishedDocument.upsert({
     *   create: {
     *     // ... data to create a PublishedDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublishedDocument we want to update
     *   }
     * })
     */
    upsert<T extends PublishedDocumentUpsertArgs>(args: SelectSubset<T, PublishedDocumentUpsertArgs<ExtArgs>>): Prisma__PublishedDocumentClient<$Result.GetResult<Prisma.$PublishedDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PublishedDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentCountArgs} args - Arguments to filter PublishedDocuments to count.
     * @example
     * // Count the number of PublishedDocuments
     * const count = await prisma.publishedDocument.count({
     *   where: {
     *     // ... the filter for the PublishedDocuments we want to count
     *   }
     * })
    **/
    count<T extends PublishedDocumentCountArgs>(
      args?: Subset<T, PublishedDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublishedDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublishedDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublishedDocumentAggregateArgs>(args: Subset<T, PublishedDocumentAggregateArgs>): Prisma.PrismaPromise<GetPublishedDocumentAggregateType<T>>

    /**
     * Group by PublishedDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublishedDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublishedDocumentGroupByArgs['orderBy'] }
        : { orderBy?: PublishedDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublishedDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublishedDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublishedDocument model
   */
  readonly fields: PublishedDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublishedDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublishedDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mtic<T extends MTICDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MTICDefaultArgs<ExtArgs>>): Prisma__MTICClient<$Result.GetResult<Prisma.$MTICPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    owner<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublishedDocument model
   */ 
  interface PublishedDocumentFieldRefs {
    readonly id: FieldRef<"PublishedDocument", 'String'>
    readonly uid: FieldRef<"PublishedDocument", 'String'>
    readonly mticId: FieldRef<"PublishedDocument", 'String'>
    readonly documentJson: FieldRef<"PublishedDocument", 'Json'>
    readonly createdById: FieldRef<"PublishedDocument", 'String'>
    readonly ownerId: FieldRef<"PublishedDocument", 'String'>
    readonly createdAt: FieldRef<"PublishedDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PublishedDocument findUnique
   */
  export type PublishedDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PublishedDocument to fetch.
     */
    where: PublishedDocumentWhereUniqueInput
  }

  /**
   * PublishedDocument findUniqueOrThrow
   */
  export type PublishedDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PublishedDocument to fetch.
     */
    where: PublishedDocumentWhereUniqueInput
  }

  /**
   * PublishedDocument findFirst
   */
  export type PublishedDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PublishedDocument to fetch.
     */
    where?: PublishedDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedDocuments to fetch.
     */
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedDocuments.
     */
    cursor?: PublishedDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedDocuments.
     */
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * PublishedDocument findFirstOrThrow
   */
  export type PublishedDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PublishedDocument to fetch.
     */
    where?: PublishedDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedDocuments to fetch.
     */
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedDocuments.
     */
    cursor?: PublishedDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedDocuments.
     */
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * PublishedDocument findMany
   */
  export type PublishedDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter, which PublishedDocuments to fetch.
     */
    where?: PublishedDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedDocuments to fetch.
     */
    orderBy?: PublishedDocumentOrderByWithRelationInput | PublishedDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublishedDocuments.
     */
    cursor?: PublishedDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedDocuments.
     */
    skip?: number
    distinct?: PublishedDocumentScalarFieldEnum | PublishedDocumentScalarFieldEnum[]
  }

  /**
   * PublishedDocument create
   */
  export type PublishedDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a PublishedDocument.
     */
    data: XOR<PublishedDocumentCreateInput, PublishedDocumentUncheckedCreateInput>
  }

  /**
   * PublishedDocument createMany
   */
  export type PublishedDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublishedDocuments.
     */
    data: PublishedDocumentCreateManyInput | PublishedDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublishedDocument createManyAndReturn
   */
  export type PublishedDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PublishedDocuments.
     */
    data: PublishedDocumentCreateManyInput | PublishedDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PublishedDocument update
   */
  export type PublishedDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a PublishedDocument.
     */
    data: XOR<PublishedDocumentUpdateInput, PublishedDocumentUncheckedUpdateInput>
    /**
     * Choose, which PublishedDocument to update.
     */
    where: PublishedDocumentWhereUniqueInput
  }

  /**
   * PublishedDocument updateMany
   */
  export type PublishedDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublishedDocuments.
     */
    data: XOR<PublishedDocumentUpdateManyMutationInput, PublishedDocumentUncheckedUpdateManyInput>
    /**
     * Filter which PublishedDocuments to update
     */
    where?: PublishedDocumentWhereInput
  }

  /**
   * PublishedDocument upsert
   */
  export type PublishedDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the PublishedDocument to update in case it exists.
     */
    where: PublishedDocumentWhereUniqueInput
    /**
     * In case the PublishedDocument found by the `where` argument doesn't exist, create a new PublishedDocument with this data.
     */
    create: XOR<PublishedDocumentCreateInput, PublishedDocumentUncheckedCreateInput>
    /**
     * In case the PublishedDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublishedDocumentUpdateInput, PublishedDocumentUncheckedUpdateInput>
  }

  /**
   * PublishedDocument delete
   */
  export type PublishedDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
    /**
     * Filter which PublishedDocument to delete.
     */
    where: PublishedDocumentWhereUniqueInput
  }

  /**
   * PublishedDocument deleteMany
   */
  export type PublishedDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedDocuments to delete
     */
    where?: PublishedDocumentWhereInput
  }

  /**
   * PublishedDocument without action
   */
  export type PublishedDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedDocument
     */
    select?: PublishedDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedDocumentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    name: 'name',
    email: 'email',
    defaultTenantUserId: 'defaultTenantUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    logo: 'logo',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const TenantUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantUserScalarFieldEnum = (typeof TenantUserScalarFieldEnum)[keyof typeof TenantUserScalarFieldEnum]


  export const TenantOrgScalarFieldEnum: {
    id: 'id',
    name: 'name',
    parentId: 'parentId',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantOrgScalarFieldEnum = (typeof TenantOrgScalarFieldEnum)[keyof typeof TenantOrgScalarFieldEnum]


  export const TenantOrgUserScalarFieldEnum: {
    tenantOrgId: 'tenantOrgId',
    tenantUserId: 'tenantUserId',
    permission: 'permission',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantOrgUserScalarFieldEnum = (typeof TenantOrgUserScalarFieldEnum)[keyof typeof TenantOrgUserScalarFieldEnum]


  export const DocumentConfigScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    fieldConfig: 'fieldConfig',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentConfigScalarFieldEnum = (typeof DocumentConfigScalarFieldEnum)[keyof typeof DocumentConfigScalarFieldEnum]


  export const DocumentTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    documentConfigId: 'documentConfigId',
    templateFieldConfig: 'templateFieldConfig',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentTemplateScalarFieldEnum = (typeof DocumentTemplateScalarFieldEnum)[keyof typeof DocumentTemplateScalarFieldEnum]


  export const TenantOrgDocScalarFieldEnum: {
    tenantOrgId: 'tenantOrgId',
    documentTemplateId: 'documentTemplateId',
    permission: 'permission',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantOrgDocScalarFieldEnum = (typeof TenantOrgDocScalarFieldEnum)[keyof typeof TenantOrgDocScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    documentTemplateId: 'documentTemplateId',
    tenantOrgId: 'tenantOrgId',
    documentFields: 'documentFields',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const MTICScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MTICScalarFieldEnum = (typeof MTICScalarFieldEnum)[keyof typeof MTICScalarFieldEnum]


  export const MTICLogScalarFieldEnum: {
    id: 'id',
    mticId: 'mticId',
    mticReaderId: 'mticReaderId',
    lat: 'lat',
    lon: 'lon',
    event: 'event',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MTICLogScalarFieldEnum = (typeof MTICLogScalarFieldEnum)[keyof typeof MTICLogScalarFieldEnum]


  export const MTICReaderScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MTICReaderScalarFieldEnum = (typeof MTICReaderScalarFieldEnum)[keyof typeof MTICReaderScalarFieldEnum]


  export const MTICDocumentScalarFieldEnum: {
    id: 'id',
    mticId: 'mticId',
    mticLogId: 'mticLogId',
    documentId: 'documentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MTICDocumentScalarFieldEnum = (typeof MTICDocumentScalarFieldEnum)[keyof typeof MTICDocumentScalarFieldEnum]


  export const PublishedDocumentScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    mticId: 'mticId',
    documentJson: 'documentJson',
    createdById: 'createdById',
    ownerId: 'ownerId',
    createdAt: 'createdAt'
  };

  export type PublishedDocumentScalarFieldEnum = (typeof PublishedDocumentScalarFieldEnum)[keyof typeof PublishedDocumentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Permission'
   */
  export type EnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission'>
    


  /**
   * Reference to a field of type 'Permission[]'
   */
  export type ListEnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Event'
   */
  export type EnumEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Event'>
    


  /**
   * Reference to a field of type 'Event[]'
   */
  export type ListEnumEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Event[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    uid?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    defaultTenantUserId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    defaultTenantUser?: XOR<TenantUserNullableRelationFilter, TenantUserWhereInput> | null
    tenantUsers?: TenantUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    defaultTenantUserId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    defaultTenantUser?: TenantUserOrderByWithRelationInput
    tenantUsers?: TenantUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uid?: string
    defaultTenantUserId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    defaultTenantUser?: XOR<TenantUserNullableRelationFilter, TenantUserWhereInput> | null
    tenantUsers?: TenantUserListRelationFilter
  }, "id" | "uid" | "defaultTenantUserId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    defaultTenantUserId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    uid?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    defaultTenantUserId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    website?: StringFilter<"Tenant"> | string
    logo?: StringFilter<"Tenant"> | string
    isActive?: BoolFilter<"Tenant"> | boolean
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    tenantUsers?: TenantUserListRelationFilter
    documentConfig?: DocumentConfigListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
    createdPublishedDocuments?: PublishedDocumentListRelationFilter
    ownedPublishedDocuments?: PublishedDocumentListRelationFilter
    mticReaders?: MTICReaderListRelationFilter
    tenantOrgs?: TenantOrgListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantUsers?: TenantUserOrderByRelationAggregateInput
    documentConfig?: DocumentConfigOrderByRelationAggregateInput
    documentTemplates?: DocumentTemplateOrderByRelationAggregateInput
    createdPublishedDocuments?: PublishedDocumentOrderByRelationAggregateInput
    ownedPublishedDocuments?: PublishedDocumentOrderByRelationAggregateInput
    mticReaders?: MTICReaderOrderByRelationAggregateInput
    tenantOrgs?: TenantOrgOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    website?: StringFilter<"Tenant"> | string
    logo?: StringFilter<"Tenant"> | string
    isActive?: BoolFilter<"Tenant"> | boolean
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    tenantUsers?: TenantUserListRelationFilter
    documentConfig?: DocumentConfigListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
    createdPublishedDocuments?: PublishedDocumentListRelationFilter
    ownedPublishedDocuments?: PublishedDocumentListRelationFilter
    mticReaders?: MTICReaderListRelationFilter
    tenantOrgs?: TenantOrgListRelationFilter
  }, "id">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    website?: StringWithAggregatesFilter<"Tenant"> | string
    logo?: StringWithAggregatesFilter<"Tenant"> | string
    isActive?: BoolWithAggregatesFilter<"Tenant"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type TenantUserWhereInput = {
    AND?: TenantUserWhereInput | TenantUserWhereInput[]
    OR?: TenantUserWhereInput[]
    NOT?: TenantUserWhereInput | TenantUserWhereInput[]
    id?: StringFilter<"TenantUser"> | string
    userId?: StringNullableFilter<"TenantUser"> | string | null
    tenantId?: StringFilter<"TenantUser"> | string
    role?: EnumRoleFilter<"TenantUser"> | $Enums.Role
    isActive?: BoolFilter<"TenantUser"> | boolean
    createdAt?: DateTimeFilter<"TenantUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantUser"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    tenantOrgUser?: TenantOrgUserListRelationFilter
    documents?: DocumentListRelationFilter
    defaultUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TenantUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    tenantOrgUser?: TenantOrgUserOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    defaultUser?: UserOrderByWithRelationInput
  }

  export type TenantUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_tenantId?: TenantUserUserIdTenantIdCompoundUniqueInput
    AND?: TenantUserWhereInput | TenantUserWhereInput[]
    OR?: TenantUserWhereInput[]
    NOT?: TenantUserWhereInput | TenantUserWhereInput[]
    userId?: StringNullableFilter<"TenantUser"> | string | null
    tenantId?: StringFilter<"TenantUser"> | string
    role?: EnumRoleFilter<"TenantUser"> | $Enums.Role
    isActive?: BoolFilter<"TenantUser"> | boolean
    createdAt?: DateTimeFilter<"TenantUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantUser"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    tenantOrgUser?: TenantOrgUserListRelationFilter
    documents?: DocumentListRelationFilter
    defaultUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "userId_tenantId">

  export type TenantUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantUserCountOrderByAggregateInput
    _max?: TenantUserMaxOrderByAggregateInput
    _min?: TenantUserMinOrderByAggregateInput
  }

  export type TenantUserScalarWhereWithAggregatesInput = {
    AND?: TenantUserScalarWhereWithAggregatesInput | TenantUserScalarWhereWithAggregatesInput[]
    OR?: TenantUserScalarWhereWithAggregatesInput[]
    NOT?: TenantUserScalarWhereWithAggregatesInput | TenantUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TenantUser"> | string
    userId?: StringNullableWithAggregatesFilter<"TenantUser"> | string | null
    tenantId?: StringWithAggregatesFilter<"TenantUser"> | string
    role?: EnumRoleWithAggregatesFilter<"TenantUser"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"TenantUser"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TenantUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TenantUser"> | Date | string
  }

  export type TenantOrgWhereInput = {
    AND?: TenantOrgWhereInput | TenantOrgWhereInput[]
    OR?: TenantOrgWhereInput[]
    NOT?: TenantOrgWhereInput | TenantOrgWhereInput[]
    id?: StringFilter<"TenantOrg"> | string
    name?: StringFilter<"TenantOrg"> | string
    parentId?: StringNullableFilter<"TenantOrg"> | string | null
    tenantId?: StringFilter<"TenantOrg"> | string
    createdAt?: DateTimeFilter<"TenantOrg"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrg"> | Date | string
    parent?: XOR<TenantOrgNullableRelationFilter, TenantOrgWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    subOrgs?: TenantOrgListRelationFilter
    tenantOrgUsers?: TenantOrgUserListRelationFilter
    tenantOrgDocs?: TenantOrgDocListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type TenantOrgOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: TenantOrgOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    subOrgs?: TenantOrgOrderByRelationAggregateInput
    tenantOrgUsers?: TenantOrgUserOrderByRelationAggregateInput
    tenantOrgDocs?: TenantOrgDocOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type TenantOrgWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TenantOrgWhereInput | TenantOrgWhereInput[]
    OR?: TenantOrgWhereInput[]
    NOT?: TenantOrgWhereInput | TenantOrgWhereInput[]
    name?: StringFilter<"TenantOrg"> | string
    parentId?: StringNullableFilter<"TenantOrg"> | string | null
    tenantId?: StringFilter<"TenantOrg"> | string
    createdAt?: DateTimeFilter<"TenantOrg"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrg"> | Date | string
    parent?: XOR<TenantOrgNullableRelationFilter, TenantOrgWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    subOrgs?: TenantOrgListRelationFilter
    tenantOrgUsers?: TenantOrgUserListRelationFilter
    tenantOrgDocs?: TenantOrgDocListRelationFilter
    documents?: DocumentListRelationFilter
  }, "id">

  export type TenantOrgOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantOrgCountOrderByAggregateInput
    _max?: TenantOrgMaxOrderByAggregateInput
    _min?: TenantOrgMinOrderByAggregateInput
  }

  export type TenantOrgScalarWhereWithAggregatesInput = {
    AND?: TenantOrgScalarWhereWithAggregatesInput | TenantOrgScalarWhereWithAggregatesInput[]
    OR?: TenantOrgScalarWhereWithAggregatesInput[]
    NOT?: TenantOrgScalarWhereWithAggregatesInput | TenantOrgScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TenantOrg"> | string
    name?: StringWithAggregatesFilter<"TenantOrg"> | string
    parentId?: StringNullableWithAggregatesFilter<"TenantOrg"> | string | null
    tenantId?: StringWithAggregatesFilter<"TenantOrg"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TenantOrg"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TenantOrg"> | Date | string
  }

  export type TenantOrgUserWhereInput = {
    AND?: TenantOrgUserWhereInput | TenantOrgUserWhereInput[]
    OR?: TenantOrgUserWhereInput[]
    NOT?: TenantOrgUserWhereInput | TenantOrgUserWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgUser"> | string
    tenantUserId?: StringFilter<"TenantOrgUser"> | string
    permission?: EnumPermissionFilter<"TenantOrgUser"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    tenantUser?: XOR<TenantUserRelationFilter, TenantUserWhereInput>
  }

  export type TenantOrgUserOrderByWithRelationInput = {
    tenantOrgId?: SortOrder
    tenantUserId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantOrg?: TenantOrgOrderByWithRelationInput
    tenantUser?: TenantUserOrderByWithRelationInput
  }

  export type TenantOrgUserWhereUniqueInput = Prisma.AtLeast<{
    tenantOrgId_tenantUserId?: TenantOrgUserTenantOrgIdTenantUserIdCompoundUniqueInput
    AND?: TenantOrgUserWhereInput | TenantOrgUserWhereInput[]
    OR?: TenantOrgUserWhereInput[]
    NOT?: TenantOrgUserWhereInput | TenantOrgUserWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgUser"> | string
    tenantUserId?: StringFilter<"TenantOrgUser"> | string
    permission?: EnumPermissionFilter<"TenantOrgUser"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    tenantUser?: XOR<TenantUserRelationFilter, TenantUserWhereInput>
  }, "tenantOrgId_tenantUserId">

  export type TenantOrgUserOrderByWithAggregationInput = {
    tenantOrgId?: SortOrder
    tenantUserId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantOrgUserCountOrderByAggregateInput
    _max?: TenantOrgUserMaxOrderByAggregateInput
    _min?: TenantOrgUserMinOrderByAggregateInput
  }

  export type TenantOrgUserScalarWhereWithAggregatesInput = {
    AND?: TenantOrgUserScalarWhereWithAggregatesInput | TenantOrgUserScalarWhereWithAggregatesInput[]
    OR?: TenantOrgUserScalarWhereWithAggregatesInput[]
    NOT?: TenantOrgUserScalarWhereWithAggregatesInput | TenantOrgUserScalarWhereWithAggregatesInput[]
    tenantOrgId?: StringWithAggregatesFilter<"TenantOrgUser"> | string
    tenantUserId?: StringWithAggregatesFilter<"TenantOrgUser"> | string
    permission?: EnumPermissionWithAggregatesFilter<"TenantOrgUser"> | $Enums.Permission
    createdAt?: DateTimeWithAggregatesFilter<"TenantOrgUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TenantOrgUser"> | Date | string
  }

  export type DocumentConfigWhereInput = {
    AND?: DocumentConfigWhereInput | DocumentConfigWhereInput[]
    OR?: DocumentConfigWhereInput[]
    NOT?: DocumentConfigWhereInput | DocumentConfigWhereInput[]
    id?: StringFilter<"DocumentConfig"> | string
    name?: StringFilter<"DocumentConfig"> | string
    description?: StringFilter<"DocumentConfig"> | string
    fieldConfig?: JsonFilter<"DocumentConfig">
    tenantId?: StringFilter<"DocumentConfig"> | string
    createdAt?: DateTimeFilter<"DocumentConfig"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentConfig"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    documentTemplates?: DocumentTemplateListRelationFilter
  }

  export type DocumentConfigOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    documentTemplates?: DocumentTemplateOrderByRelationAggregateInput
  }

  export type DocumentConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentConfigWhereInput | DocumentConfigWhereInput[]
    OR?: DocumentConfigWhereInput[]
    NOT?: DocumentConfigWhereInput | DocumentConfigWhereInput[]
    name?: StringFilter<"DocumentConfig"> | string
    description?: StringFilter<"DocumentConfig"> | string
    fieldConfig?: JsonFilter<"DocumentConfig">
    tenantId?: StringFilter<"DocumentConfig"> | string
    createdAt?: DateTimeFilter<"DocumentConfig"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentConfig"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    documentTemplates?: DocumentTemplateListRelationFilter
  }, "id">

  export type DocumentConfigOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentConfigCountOrderByAggregateInput
    _max?: DocumentConfigMaxOrderByAggregateInput
    _min?: DocumentConfigMinOrderByAggregateInput
  }

  export type DocumentConfigScalarWhereWithAggregatesInput = {
    AND?: DocumentConfigScalarWhereWithAggregatesInput | DocumentConfigScalarWhereWithAggregatesInput[]
    OR?: DocumentConfigScalarWhereWithAggregatesInput[]
    NOT?: DocumentConfigScalarWhereWithAggregatesInput | DocumentConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentConfig"> | string
    name?: StringWithAggregatesFilter<"DocumentConfig"> | string
    description?: StringWithAggregatesFilter<"DocumentConfig"> | string
    fieldConfig?: JsonWithAggregatesFilter<"DocumentConfig">
    tenantId?: StringWithAggregatesFilter<"DocumentConfig"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentConfig"> | Date | string
  }

  export type DocumentTemplateWhereInput = {
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    id?: StringFilter<"DocumentTemplate"> | string
    name?: StringFilter<"DocumentTemplate"> | string
    description?: StringFilter<"DocumentTemplate"> | string
    image?: StringNullableFilter<"DocumentTemplate"> | string | null
    documentConfigId?: StringFilter<"DocumentTemplate"> | string
    templateFieldConfig?: JsonFilter<"DocumentTemplate">
    tenantId?: StringFilter<"DocumentTemplate"> | string
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    documentConfig?: XOR<DocumentConfigRelationFilter, DocumentConfigWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    tenantOrgDocs?: TenantOrgDocListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type DocumentTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    documentConfigId?: SortOrder
    templateFieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentConfig?: DocumentConfigOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    tenantOrgDocs?: TenantOrgDocOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type DocumentTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    name?: StringFilter<"DocumentTemplate"> | string
    description?: StringFilter<"DocumentTemplate"> | string
    image?: StringNullableFilter<"DocumentTemplate"> | string | null
    documentConfigId?: StringFilter<"DocumentTemplate"> | string
    templateFieldConfig?: JsonFilter<"DocumentTemplate">
    tenantId?: StringFilter<"DocumentTemplate"> | string
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    documentConfig?: XOR<DocumentConfigRelationFilter, DocumentConfigWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    tenantOrgDocs?: TenantOrgDocListRelationFilter
    documents?: DocumentListRelationFilter
  }, "id">

  export type DocumentTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    documentConfigId?: SortOrder
    templateFieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentTemplateCountOrderByAggregateInput
    _max?: DocumentTemplateMaxOrderByAggregateInput
    _min?: DocumentTemplateMinOrderByAggregateInput
  }

  export type DocumentTemplateScalarWhereWithAggregatesInput = {
    AND?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    OR?: DocumentTemplateScalarWhereWithAggregatesInput[]
    NOT?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    name?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    description?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    image?: StringNullableWithAggregatesFilter<"DocumentTemplate"> | string | null
    documentConfigId?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    templateFieldConfig?: JsonWithAggregatesFilter<"DocumentTemplate">
    tenantId?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentTemplate"> | Date | string
  }

  export type TenantOrgDocWhereInput = {
    AND?: TenantOrgDocWhereInput | TenantOrgDocWhereInput[]
    OR?: TenantOrgDocWhereInput[]
    NOT?: TenantOrgDocWhereInput | TenantOrgDocWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgDoc"> | string
    documentTemplateId?: StringFilter<"TenantOrgDoc"> | string
    permission?: EnumPermissionFilter<"TenantOrgDoc"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
  }

  export type TenantOrgDocOrderByWithRelationInput = {
    tenantOrgId?: SortOrder
    documentTemplateId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantOrg?: TenantOrgOrderByWithRelationInput
    documentTemplate?: DocumentTemplateOrderByWithRelationInput
  }

  export type TenantOrgDocWhereUniqueInput = Prisma.AtLeast<{
    tenantOrgId_documentTemplateId?: TenantOrgDocTenantOrgIdDocumentTemplateIdCompoundUniqueInput
    AND?: TenantOrgDocWhereInput | TenantOrgDocWhereInput[]
    OR?: TenantOrgDocWhereInput[]
    NOT?: TenantOrgDocWhereInput | TenantOrgDocWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgDoc"> | string
    documentTemplateId?: StringFilter<"TenantOrgDoc"> | string
    permission?: EnumPermissionFilter<"TenantOrgDoc"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
  }, "tenantOrgId_documentTemplateId">

  export type TenantOrgDocOrderByWithAggregationInput = {
    tenantOrgId?: SortOrder
    documentTemplateId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantOrgDocCountOrderByAggregateInput
    _max?: TenantOrgDocMaxOrderByAggregateInput
    _min?: TenantOrgDocMinOrderByAggregateInput
  }

  export type TenantOrgDocScalarWhereWithAggregatesInput = {
    AND?: TenantOrgDocScalarWhereWithAggregatesInput | TenantOrgDocScalarWhereWithAggregatesInput[]
    OR?: TenantOrgDocScalarWhereWithAggregatesInput[]
    NOT?: TenantOrgDocScalarWhereWithAggregatesInput | TenantOrgDocScalarWhereWithAggregatesInput[]
    tenantOrgId?: StringWithAggregatesFilter<"TenantOrgDoc"> | string
    documentTemplateId?: StringWithAggregatesFilter<"TenantOrgDoc"> | string
    permission?: EnumPermissionWithAggregatesFilter<"TenantOrgDoc"> | $Enums.Permission
    createdAt?: DateTimeWithAggregatesFilter<"TenantOrgDoc"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TenantOrgDoc"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    uid?: StringFilter<"Document"> | string
    documentTemplateId?: StringFilter<"Document"> | string
    tenantOrgId?: StringFilter<"Document"> | string
    documentFields?: JsonFilter<"Document">
    createdById?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    createdBy?: XOR<TenantUserRelationFilter, TenantUserWhereInput>
    mticDocuments?: MTICDocumentListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    documentTemplateId?: SortOrder
    tenantOrgId?: SortOrder
    documentFields?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentTemplate?: DocumentTemplateOrderByWithRelationInput
    tenantOrg?: TenantOrgOrderByWithRelationInput
    createdBy?: TenantUserOrderByWithRelationInput
    mticDocuments?: MTICDocumentOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    uid?: StringFilter<"Document"> | string
    documentTemplateId?: StringFilter<"Document"> | string
    tenantOrgId?: StringFilter<"Document"> | string
    documentFields?: JsonFilter<"Document">
    createdById?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
    tenantOrg?: XOR<TenantOrgRelationFilter, TenantOrgWhereInput>
    createdBy?: XOR<TenantUserRelationFilter, TenantUserWhereInput>
    mticDocuments?: MTICDocumentListRelationFilter
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    documentTemplateId?: SortOrder
    tenantOrgId?: SortOrder
    documentFields?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    uid?: StringWithAggregatesFilter<"Document"> | string
    documentTemplateId?: StringWithAggregatesFilter<"Document"> | string
    tenantOrgId?: StringWithAggregatesFilter<"Document"> | string
    documentFields?: JsonWithAggregatesFilter<"Document">
    createdById?: StringWithAggregatesFilter<"Document"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type MTICWhereInput = {
    AND?: MTICWhereInput | MTICWhereInput[]
    OR?: MTICWhereInput[]
    NOT?: MTICWhereInput | MTICWhereInput[]
    id?: StringFilter<"MTIC"> | string
    uid?: StringFilter<"MTIC"> | string
    createdAt?: DateTimeFilter<"MTIC"> | Date | string
    updatedAt?: DateTimeFilter<"MTIC"> | Date | string
    mticLogs?: MTICLogListRelationFilter
    publishedDocuments?: PublishedDocumentListRelationFilter
    mticDocuments?: MTICDocumentListRelationFilter
  }

  export type MTICOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mticLogs?: MTICLogOrderByRelationAggregateInput
    publishedDocuments?: PublishedDocumentOrderByRelationAggregateInput
    mticDocuments?: MTICDocumentOrderByRelationAggregateInput
  }

  export type MTICWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MTICWhereInput | MTICWhereInput[]
    OR?: MTICWhereInput[]
    NOT?: MTICWhereInput | MTICWhereInput[]
    uid?: StringFilter<"MTIC"> | string
    createdAt?: DateTimeFilter<"MTIC"> | Date | string
    updatedAt?: DateTimeFilter<"MTIC"> | Date | string
    mticLogs?: MTICLogListRelationFilter
    publishedDocuments?: PublishedDocumentListRelationFilter
    mticDocuments?: MTICDocumentListRelationFilter
  }, "id">

  export type MTICOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MTICCountOrderByAggregateInput
    _max?: MTICMaxOrderByAggregateInput
    _min?: MTICMinOrderByAggregateInput
  }

  export type MTICScalarWhereWithAggregatesInput = {
    AND?: MTICScalarWhereWithAggregatesInput | MTICScalarWhereWithAggregatesInput[]
    OR?: MTICScalarWhereWithAggregatesInput[]
    NOT?: MTICScalarWhereWithAggregatesInput | MTICScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MTIC"> | string
    uid?: StringWithAggregatesFilter<"MTIC"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MTIC"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MTIC"> | Date | string
  }

  export type MTICLogWhereInput = {
    AND?: MTICLogWhereInput | MTICLogWhereInput[]
    OR?: MTICLogWhereInput[]
    NOT?: MTICLogWhereInput | MTICLogWhereInput[]
    id?: StringFilter<"MTICLog"> | string
    mticId?: StringFilter<"MTICLog"> | string
    mticReaderId?: StringFilter<"MTICLog"> | string
    lat?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    lon?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    event?: EnumEventFilter<"MTICLog"> | $Enums.Event
    createdAt?: DateTimeFilter<"MTICLog"> | Date | string
    updatedAt?: DateTimeFilter<"MTICLog"> | Date | string
    mtic?: XOR<MTICRelationFilter, MTICWhereInput>
    mticReader?: XOR<MTICReaderRelationFilter, MTICReaderWhereInput>
    mticDocuments?: MTICDocumentListRelationFilter
  }

  export type MTICLogOrderByWithRelationInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticReaderId?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    event?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mtic?: MTICOrderByWithRelationInput
    mticReader?: MTICReaderOrderByWithRelationInput
    mticDocuments?: MTICDocumentOrderByRelationAggregateInput
  }

  export type MTICLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MTICLogWhereInput | MTICLogWhereInput[]
    OR?: MTICLogWhereInput[]
    NOT?: MTICLogWhereInput | MTICLogWhereInput[]
    mticId?: StringFilter<"MTICLog"> | string
    mticReaderId?: StringFilter<"MTICLog"> | string
    lat?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    lon?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    event?: EnumEventFilter<"MTICLog"> | $Enums.Event
    createdAt?: DateTimeFilter<"MTICLog"> | Date | string
    updatedAt?: DateTimeFilter<"MTICLog"> | Date | string
    mtic?: XOR<MTICRelationFilter, MTICWhereInput>
    mticReader?: XOR<MTICReaderRelationFilter, MTICReaderWhereInput>
    mticDocuments?: MTICDocumentListRelationFilter
  }, "id">

  export type MTICLogOrderByWithAggregationInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticReaderId?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    event?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MTICLogCountOrderByAggregateInput
    _avg?: MTICLogAvgOrderByAggregateInput
    _max?: MTICLogMaxOrderByAggregateInput
    _min?: MTICLogMinOrderByAggregateInput
    _sum?: MTICLogSumOrderByAggregateInput
  }

  export type MTICLogScalarWhereWithAggregatesInput = {
    AND?: MTICLogScalarWhereWithAggregatesInput | MTICLogScalarWhereWithAggregatesInput[]
    OR?: MTICLogScalarWhereWithAggregatesInput[]
    NOT?: MTICLogScalarWhereWithAggregatesInput | MTICLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MTICLog"> | string
    mticId?: StringWithAggregatesFilter<"MTICLog"> | string
    mticReaderId?: StringWithAggregatesFilter<"MTICLog"> | string
    lat?: DecimalWithAggregatesFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    lon?: DecimalWithAggregatesFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    event?: EnumEventWithAggregatesFilter<"MTICLog"> | $Enums.Event
    createdAt?: DateTimeWithAggregatesFilter<"MTICLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MTICLog"> | Date | string
  }

  export type MTICReaderWhereInput = {
    AND?: MTICReaderWhereInput | MTICReaderWhereInput[]
    OR?: MTICReaderWhereInput[]
    NOT?: MTICReaderWhereInput | MTICReaderWhereInput[]
    id?: StringFilter<"MTICReader"> | string
    isActive?: BoolFilter<"MTICReader"> | boolean
    tenantId?: StringNullableFilter<"MTICReader"> | string | null
    createdAt?: DateTimeFilter<"MTICReader"> | Date | string
    updatedAt?: DateTimeFilter<"MTICReader"> | Date | string
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
    mticLogs?: MTICLogListRelationFilter
  }

  export type MTICReaderOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    mticLogs?: MTICLogOrderByRelationAggregateInput
  }

  export type MTICReaderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MTICReaderWhereInput | MTICReaderWhereInput[]
    OR?: MTICReaderWhereInput[]
    NOT?: MTICReaderWhereInput | MTICReaderWhereInput[]
    isActive?: BoolFilter<"MTICReader"> | boolean
    tenantId?: StringNullableFilter<"MTICReader"> | string | null
    createdAt?: DateTimeFilter<"MTICReader"> | Date | string
    updatedAt?: DateTimeFilter<"MTICReader"> | Date | string
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
    mticLogs?: MTICLogListRelationFilter
  }, "id">

  export type MTICReaderOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MTICReaderCountOrderByAggregateInput
    _max?: MTICReaderMaxOrderByAggregateInput
    _min?: MTICReaderMinOrderByAggregateInput
  }

  export type MTICReaderScalarWhereWithAggregatesInput = {
    AND?: MTICReaderScalarWhereWithAggregatesInput | MTICReaderScalarWhereWithAggregatesInput[]
    OR?: MTICReaderScalarWhereWithAggregatesInput[]
    NOT?: MTICReaderScalarWhereWithAggregatesInput | MTICReaderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MTICReader"> | string
    isActive?: BoolWithAggregatesFilter<"MTICReader"> | boolean
    tenantId?: StringNullableWithAggregatesFilter<"MTICReader"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MTICReader"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MTICReader"> | Date | string
  }

  export type MTICDocumentWhereInput = {
    AND?: MTICDocumentWhereInput | MTICDocumentWhereInput[]
    OR?: MTICDocumentWhereInput[]
    NOT?: MTICDocumentWhereInput | MTICDocumentWhereInput[]
    id?: StringFilter<"MTICDocument"> | string
    mticId?: StringNullableFilter<"MTICDocument"> | string | null
    mticLogId?: StringFilter<"MTICDocument"> | string
    documentId?: StringFilter<"MTICDocument"> | string
    createdAt?: DateTimeFilter<"MTICDocument"> | Date | string
    updatedAt?: DateTimeFilter<"MTICDocument"> | Date | string
    mtic?: XOR<MTICNullableRelationFilter, MTICWhereInput> | null
    mticLog?: XOR<MTICLogRelationFilter, MTICLogWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }

  export type MTICDocumentOrderByWithRelationInput = {
    id?: SortOrder
    mticId?: SortOrderInput | SortOrder
    mticLogId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mtic?: MTICOrderByWithRelationInput
    mticLog?: MTICLogOrderByWithRelationInput
    document?: DocumentOrderByWithRelationInput
  }

  export type MTICDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MTICDocumentWhereInput | MTICDocumentWhereInput[]
    OR?: MTICDocumentWhereInput[]
    NOT?: MTICDocumentWhereInput | MTICDocumentWhereInput[]
    mticId?: StringNullableFilter<"MTICDocument"> | string | null
    mticLogId?: StringFilter<"MTICDocument"> | string
    documentId?: StringFilter<"MTICDocument"> | string
    createdAt?: DateTimeFilter<"MTICDocument"> | Date | string
    updatedAt?: DateTimeFilter<"MTICDocument"> | Date | string
    mtic?: XOR<MTICNullableRelationFilter, MTICWhereInput> | null
    mticLog?: XOR<MTICLogRelationFilter, MTICLogWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }, "id">

  export type MTICDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    mticId?: SortOrderInput | SortOrder
    mticLogId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MTICDocumentCountOrderByAggregateInput
    _max?: MTICDocumentMaxOrderByAggregateInput
    _min?: MTICDocumentMinOrderByAggregateInput
  }

  export type MTICDocumentScalarWhereWithAggregatesInput = {
    AND?: MTICDocumentScalarWhereWithAggregatesInput | MTICDocumentScalarWhereWithAggregatesInput[]
    OR?: MTICDocumentScalarWhereWithAggregatesInput[]
    NOT?: MTICDocumentScalarWhereWithAggregatesInput | MTICDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MTICDocument"> | string
    mticId?: StringNullableWithAggregatesFilter<"MTICDocument"> | string | null
    mticLogId?: StringWithAggregatesFilter<"MTICDocument"> | string
    documentId?: StringWithAggregatesFilter<"MTICDocument"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MTICDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MTICDocument"> | Date | string
  }

  export type PublishedDocumentWhereInput = {
    AND?: PublishedDocumentWhereInput | PublishedDocumentWhereInput[]
    OR?: PublishedDocumentWhereInput[]
    NOT?: PublishedDocumentWhereInput | PublishedDocumentWhereInput[]
    id?: StringFilter<"PublishedDocument"> | string
    uid?: StringFilter<"PublishedDocument"> | string
    mticId?: StringFilter<"PublishedDocument"> | string
    documentJson?: JsonFilter<"PublishedDocument">
    createdById?: StringFilter<"PublishedDocument"> | string
    ownerId?: StringFilter<"PublishedDocument"> | string
    createdAt?: DateTimeFilter<"PublishedDocument"> | Date | string
    mtic?: XOR<MTICRelationFilter, MTICWhereInput>
    createdBy?: XOR<TenantRelationFilter, TenantWhereInput>
    owner?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type PublishedDocumentOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    mticId?: SortOrder
    documentJson?: SortOrder
    createdById?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    mtic?: MTICOrderByWithRelationInput
    createdBy?: TenantOrderByWithRelationInput
    owner?: TenantOrderByWithRelationInput
  }

  export type PublishedDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublishedDocumentWhereInput | PublishedDocumentWhereInput[]
    OR?: PublishedDocumentWhereInput[]
    NOT?: PublishedDocumentWhereInput | PublishedDocumentWhereInput[]
    uid?: StringFilter<"PublishedDocument"> | string
    mticId?: StringFilter<"PublishedDocument"> | string
    documentJson?: JsonFilter<"PublishedDocument">
    createdById?: StringFilter<"PublishedDocument"> | string
    ownerId?: StringFilter<"PublishedDocument"> | string
    createdAt?: DateTimeFilter<"PublishedDocument"> | Date | string
    mtic?: XOR<MTICRelationFilter, MTICWhereInput>
    createdBy?: XOR<TenantRelationFilter, TenantWhereInput>
    owner?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type PublishedDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    mticId?: SortOrder
    documentJson?: SortOrder
    createdById?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    _count?: PublishedDocumentCountOrderByAggregateInput
    _max?: PublishedDocumentMaxOrderByAggregateInput
    _min?: PublishedDocumentMinOrderByAggregateInput
  }

  export type PublishedDocumentScalarWhereWithAggregatesInput = {
    AND?: PublishedDocumentScalarWhereWithAggregatesInput | PublishedDocumentScalarWhereWithAggregatesInput[]
    OR?: PublishedDocumentScalarWhereWithAggregatesInput[]
    NOT?: PublishedDocumentScalarWhereWithAggregatesInput | PublishedDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublishedDocument"> | string
    uid?: StringWithAggregatesFilter<"PublishedDocument"> | string
    mticId?: StringWithAggregatesFilter<"PublishedDocument"> | string
    documentJson?: JsonWithAggregatesFilter<"PublishedDocument">
    createdById?: StringWithAggregatesFilter<"PublishedDocument"> | string
    ownerId?: StringWithAggregatesFilter<"PublishedDocument"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PublishedDocument"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    uid: string
    name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    defaultTenantUser?: TenantUserCreateNestedOneWithoutDefaultUserInput
    tenantUsers?: TenantUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    uid: string
    name: string
    email: string
    defaultTenantUserId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultTenantUser?: TenantUserUpdateOneWithoutDefaultUserNestedInput
    tenantUsers?: TenantUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    defaultTenantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    uid: string
    name: string
    email: string
    defaultTenantUserId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    defaultTenantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUserCreateInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTenantUsersInput
    tenant: TenantCreateNestedOneWithoutTenantUsersInput
    tenantOrgUser?: TenantOrgUserCreateNestedManyWithoutTenantUserInput
    documents?: DocumentCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUncheckedCreateInput = {
    id?: string
    userId?: string | null
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUser?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTenantUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantUsersNestedInput
    tenantOrgUser?: TenantOrgUserUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUser?: TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserCreateManyInput = {
    id?: string
    userId?: string | null
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgCreateManyInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserCreateInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrg: TenantOrgCreateNestedOneWithoutTenantOrgUsersInput
    tenantUser: TenantUserCreateNestedOneWithoutTenantOrgUserInput
  }

  export type TenantOrgUserUncheckedCreateInput = {
    tenantOrgId: string
    tenantUserId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserUpdateInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutTenantOrgUsersNestedInput
    tenantUser?: TenantUserUpdateOneRequiredWithoutTenantOrgUserNestedInput
  }

  export type TenantOrgUserUncheckedUpdateInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    tenantUserId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserCreateManyInput = {
    tenantOrgId: string
    tenantUserId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserUpdateManyMutationInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserUncheckedUpdateManyInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    tenantUserId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentConfigCreateInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutDocumentConfigInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutDocumentConfigInput
  }

  export type DocumentConfigUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutDocumentConfigInput
  }

  export type DocumentConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutDocumentConfigNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutDocumentConfigNestedInput
  }

  export type DocumentConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutDocumentConfigNestedInput
  }

  export type DocumentConfigCreateManyInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTemplateCreateInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig: DocumentConfigCreateNestedOneWithoutDocumentTemplatesInput
    tenant: TenantCreateNestedOneWithoutDocumentTemplatesInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateCreateManyInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocCreateInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrg: TenantOrgCreateNestedOneWithoutTenantOrgDocsInput
    documentTemplate: DocumentTemplateCreateNestedOneWithoutTenantOrgDocsInput
  }

  export type TenantOrgDocUncheckedCreateInput = {
    tenantOrgId: string
    documentTemplateId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocUpdateInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutTenantOrgDocsNestedInput
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutTenantOrgDocsNestedInput
  }

  export type TenantOrgDocUncheckedUpdateInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocCreateManyInput = {
    tenantOrgId: string
    documentTemplateId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocUpdateManyMutationInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocUncheckedUpdateManyInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    uid?: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    tenantOrg: TenantOrgCreateNestedOneWithoutDocumentsInput
    createdBy: TenantUserCreateNestedOneWithoutDocumentsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentsNestedInput
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutDocumentsNestedInput
    createdBy?: TenantUserUpdateOneRequiredWithoutDocumentsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICCreateInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogCreateNestedManyWithoutMticInput
    publishedDocuments?: PublishedDocumentCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticInput
  }

  export type MTICUncheckedCreateInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogUncheckedCreateNestedManyWithoutMticInput
    publishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticInput
  }

  export type MTICUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUpdateManyWithoutMticNestedInput
    publishedDocuments?: PublishedDocumentUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticNestedInput
  }

  export type MTICUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUncheckedUpdateManyWithoutMticNestedInput
    publishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticNestedInput
  }

  export type MTICCreateManyInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICLogCreateInput = {
    id?: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic: MTICCreateNestedOneWithoutMticLogsInput
    mticReader: MTICReaderCreateNestedOneWithoutMticLogsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogUncheckedCreateInput = {
    id?: string
    mticId: string
    mticReaderId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutMticLogsNestedInput
    mticReader?: MTICReaderUpdateOneRequiredWithoutMticLogsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    mticReaderId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogCreateManyInput = {
    id?: string
    mticId: string
    mticReaderId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    mticReaderId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICReaderCreateInput = {
    id: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutMticReadersInput
    mticLogs?: MTICLogCreateNestedManyWithoutMticReaderInput
  }

  export type MTICReaderUncheckedCreateInput = {
    id: string
    isActive?: boolean
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogUncheckedCreateNestedManyWithoutMticReaderInput
  }

  export type MTICReaderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutMticReadersNestedInput
    mticLogs?: MTICLogUpdateManyWithoutMticReaderNestedInput
  }

  export type MTICReaderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUncheckedUpdateManyWithoutMticReaderNestedInput
  }

  export type MTICReaderCreateManyInput = {
    id: string
    isActive?: boolean
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICReaderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICReaderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic?: MTICCreateNestedOneWithoutMticDocumentsInput
    mticLog: MTICLogCreateNestedOneWithoutMticDocumentsInput
    document: DocumentCreateNestedOneWithoutMticDocumentsInput
  }

  export type MTICDocumentUncheckedCreateInput = {
    id?: string
    mticId?: string | null
    mticLogId: string
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneWithoutMticDocumentsNestedInput
    mticLog?: MTICLogUpdateOneRequiredWithoutMticDocumentsNestedInput
    document?: DocumentUpdateOneRequiredWithoutMticDocumentsNestedInput
  }

  export type MTICDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    mticLogId?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentCreateManyInput = {
    id?: string
    mticId?: string | null
    mticLogId: string
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    mticLogId?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentCreateInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    mtic: MTICCreateNestedOneWithoutPublishedDocumentsInput
    createdBy: TenantCreateNestedOneWithoutCreatedPublishedDocumentsInput
    owner: TenantCreateNestedOneWithoutOwnedPublishedDocumentsInput
  }

  export type PublishedDocumentUncheckedCreateInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    ownerId: string
    createdAt?: Date | string
  }

  export type PublishedDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutPublishedDocumentsNestedInput
    createdBy?: TenantUpdateOneRequiredWithoutCreatedPublishedDocumentsNestedInput
    owner?: TenantUpdateOneRequiredWithoutOwnedPublishedDocumentsNestedInput
  }

  export type PublishedDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentCreateManyInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    ownerId: string
    createdAt?: Date | string
  }

  export type PublishedDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TenantUserNullableRelationFilter = {
    is?: TenantUserWhereInput | null
    isNot?: TenantUserWhereInput | null
  }

  export type TenantUserListRelationFilter = {
    every?: TenantUserWhereInput
    some?: TenantUserWhereInput
    none?: TenantUserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TenantUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    defaultTenantUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    defaultTenantUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    defaultTenantUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DocumentConfigListRelationFilter = {
    every?: DocumentConfigWhereInput
    some?: DocumentConfigWhereInput
    none?: DocumentConfigWhereInput
  }

  export type DocumentTemplateListRelationFilter = {
    every?: DocumentTemplateWhereInput
    some?: DocumentTemplateWhereInput
    none?: DocumentTemplateWhereInput
  }

  export type PublishedDocumentListRelationFilter = {
    every?: PublishedDocumentWhereInput
    some?: PublishedDocumentWhereInput
    none?: PublishedDocumentWhereInput
  }

  export type MTICReaderListRelationFilter = {
    every?: MTICReaderWhereInput
    some?: MTICReaderWhereInput
    none?: MTICReaderWhereInput
  }

  export type TenantOrgListRelationFilter = {
    every?: TenantOrgWhereInput
    some?: TenantOrgWhereInput
    none?: TenantOrgWhereInput
  }

  export type DocumentConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublishedDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MTICReaderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantOrgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type TenantOrgUserListRelationFilter = {
    every?: TenantOrgUserWhereInput
    some?: TenantOrgUserWhereInput
    none?: TenantOrgUserWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type TenantOrgUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantUserUserIdTenantIdCompoundUniqueInput = {
    userId: string
    tenantId: string
  }

  export type TenantUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type TenantOrgNullableRelationFilter = {
    is?: TenantOrgWhereInput | null
    isNot?: TenantOrgWhereInput | null
  }

  export type TenantOrgDocListRelationFilter = {
    every?: TenantOrgDocWhereInput
    some?: TenantOrgDocWhereInput
    none?: TenantOrgDocWhereInput
  }

  export type TenantOrgDocOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantOrgCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionFilter<$PrismaModel> | $Enums.Permission
  }

  export type TenantOrgRelationFilter = {
    is?: TenantOrgWhereInput
    isNot?: TenantOrgWhereInput
  }

  export type TenantUserRelationFilter = {
    is?: TenantUserWhereInput
    isNot?: TenantUserWhereInput
  }

  export type TenantOrgUserTenantOrgIdTenantUserIdCompoundUniqueInput = {
    tenantOrgId: string
    tenantUserId: string
  }

  export type TenantOrgUserCountOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    tenantUserId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgUserMaxOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    tenantUserId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgUserMinOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    tenantUserId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionWithAggregatesFilter<$PrismaModel> | $Enums.Permission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionFilter<$PrismaModel>
    _max?: NestedEnumPermissionFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DocumentConfigCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentConfigMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DocumentConfigRelationFilter = {
    is?: DocumentConfigWhereInput
    isNot?: DocumentConfigWhereInput
  }

  export type DocumentTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    documentConfigId?: SortOrder
    templateFieldConfig?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    documentConfigId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    documentConfigId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentTemplateRelationFilter = {
    is?: DocumentTemplateWhereInput
    isNot?: DocumentTemplateWhereInput
  }

  export type TenantOrgDocTenantOrgIdDocumentTemplateIdCompoundUniqueInput = {
    tenantOrgId: string
    documentTemplateId: string
  }

  export type TenantOrgDocCountOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    documentTemplateId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgDocMaxOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    documentTemplateId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantOrgDocMinOrderByAggregateInput = {
    tenantOrgId?: SortOrder
    documentTemplateId?: SortOrder
    permission?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICDocumentListRelationFilter = {
    every?: MTICDocumentWhereInput
    some?: MTICDocumentWhereInput
    none?: MTICDocumentWhereInput
  }

  export type MTICDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    documentTemplateId?: SortOrder
    tenantOrgId?: SortOrder
    documentFields?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    documentTemplateId?: SortOrder
    tenantOrgId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    documentTemplateId?: SortOrder
    tenantOrgId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICLogListRelationFilter = {
    every?: MTICLogWhereInput
    some?: MTICLogWhereInput
    none?: MTICLogWhereInput
  }

  export type MTICLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MTICCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumEventFilter<$PrismaModel = never> = {
    equals?: $Enums.Event | EnumEventFieldRefInput<$PrismaModel>
    in?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    not?: NestedEnumEventFilter<$PrismaModel> | $Enums.Event
  }

  export type MTICRelationFilter = {
    is?: MTICWhereInput
    isNot?: MTICWhereInput
  }

  export type MTICReaderRelationFilter = {
    is?: MTICReaderWhereInput
    isNot?: MTICReaderWhereInput
  }

  export type MTICLogCountOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticReaderId?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    event?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICLogAvgOrderByAggregateInput = {
    lat?: SortOrder
    lon?: SortOrder
  }

  export type MTICLogMaxOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticReaderId?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    event?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICLogMinOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticReaderId?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    event?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICLogSumOrderByAggregateInput = {
    lat?: SortOrder
    lon?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Event | EnumEventFieldRefInput<$PrismaModel>
    in?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    not?: NestedEnumEventWithAggregatesFilter<$PrismaModel> | $Enums.Event
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventFilter<$PrismaModel>
    _max?: NestedEnumEventFilter<$PrismaModel>
  }

  export type TenantNullableRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type MTICReaderCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICReaderMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICReaderMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICNullableRelationFilter = {
    is?: MTICWhereInput | null
    isNot?: MTICWhereInput | null
  }

  export type MTICLogRelationFilter = {
    is?: MTICLogWhereInput
    isNot?: MTICLogWhereInput
  }

  export type DocumentRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type MTICDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticLogId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticLogId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MTICDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    mticId?: SortOrder
    mticLogId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublishedDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    mticId?: SortOrder
    documentJson?: SortOrder
    createdById?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type PublishedDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    mticId?: SortOrder
    createdById?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type PublishedDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    mticId?: SortOrder
    createdById?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantUserCreateNestedOneWithoutDefaultUserInput = {
    create?: XOR<TenantUserCreateWithoutDefaultUserInput, TenantUserUncheckedCreateWithoutDefaultUserInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutDefaultUserInput
    connect?: TenantUserWhereUniqueInput
  }

  export type TenantUserCreateNestedManyWithoutUserInput = {
    create?: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput> | TenantUserCreateWithoutUserInput[] | TenantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutUserInput | TenantUserCreateOrConnectWithoutUserInput[]
    createMany?: TenantUserCreateManyUserInputEnvelope
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
  }

  export type TenantUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput> | TenantUserCreateWithoutUserInput[] | TenantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutUserInput | TenantUserCreateOrConnectWithoutUserInput[]
    createMany?: TenantUserCreateManyUserInputEnvelope
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TenantUserUpdateOneWithoutDefaultUserNestedInput = {
    create?: XOR<TenantUserCreateWithoutDefaultUserInput, TenantUserUncheckedCreateWithoutDefaultUserInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutDefaultUserInput
    upsert?: TenantUserUpsertWithoutDefaultUserInput
    disconnect?: TenantUserWhereInput | boolean
    delete?: TenantUserWhereInput | boolean
    connect?: TenantUserWhereUniqueInput
    update?: XOR<XOR<TenantUserUpdateToOneWithWhereWithoutDefaultUserInput, TenantUserUpdateWithoutDefaultUserInput>, TenantUserUncheckedUpdateWithoutDefaultUserInput>
  }

  export type TenantUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput> | TenantUserCreateWithoutUserInput[] | TenantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutUserInput | TenantUserCreateOrConnectWithoutUserInput[]
    upsert?: TenantUserUpsertWithWhereUniqueWithoutUserInput | TenantUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TenantUserCreateManyUserInputEnvelope
    set?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    disconnect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    delete?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    update?: TenantUserUpdateWithWhereUniqueWithoutUserInput | TenantUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TenantUserUpdateManyWithWhereWithoutUserInput | TenantUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TenantUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput> | TenantUserCreateWithoutUserInput[] | TenantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutUserInput | TenantUserCreateOrConnectWithoutUserInput[]
    upsert?: TenantUserUpsertWithWhereUniqueWithoutUserInput | TenantUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TenantUserCreateManyUserInputEnvelope
    set?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    disconnect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    delete?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    update?: TenantUserUpdateWithWhereUniqueWithoutUserInput | TenantUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TenantUserUpdateManyWithWhereWithoutUserInput | TenantUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
  }

  export type TenantUserCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput> | TenantUserCreateWithoutTenantInput[] | TenantUserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantInput | TenantUserCreateOrConnectWithoutTenantInput[]
    createMany?: TenantUserCreateManyTenantInputEnvelope
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
  }

  export type DocumentConfigCreateNestedManyWithoutTenantInput = {
    create?: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput> | DocumentConfigCreateWithoutTenantInput[] | DocumentConfigUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutTenantInput | DocumentConfigCreateOrConnectWithoutTenantInput[]
    createMany?: DocumentConfigCreateManyTenantInputEnvelope
    connect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
  }

  export type DocumentTemplateCreateNestedManyWithoutTenantInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput> | DocumentTemplateCreateWithoutTenantInput[] | DocumentTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantInput | DocumentTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: DocumentTemplateCreateManyTenantInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type PublishedDocumentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput> | PublishedDocumentCreateWithoutCreatedByInput[] | PublishedDocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutCreatedByInput | PublishedDocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PublishedDocumentCreateManyCreatedByInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type PublishedDocumentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput> | PublishedDocumentCreateWithoutOwnerInput[] | PublishedDocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutOwnerInput | PublishedDocumentCreateOrConnectWithoutOwnerInput[]
    createMany?: PublishedDocumentCreateManyOwnerInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type MTICReaderCreateNestedManyWithoutTenantInput = {
    create?: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput> | MTICReaderCreateWithoutTenantInput[] | MTICReaderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MTICReaderCreateOrConnectWithoutTenantInput | MTICReaderCreateOrConnectWithoutTenantInput[]
    createMany?: MTICReaderCreateManyTenantInputEnvelope
    connect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
  }

  export type TenantOrgCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput> | TenantOrgCreateWithoutTenantInput[] | TenantOrgUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantInput | TenantOrgCreateOrConnectWithoutTenantInput[]
    createMany?: TenantOrgCreateManyTenantInputEnvelope
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
  }

  export type TenantUserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput> | TenantUserCreateWithoutTenantInput[] | TenantUserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantInput | TenantUserCreateOrConnectWithoutTenantInput[]
    createMany?: TenantUserCreateManyTenantInputEnvelope
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
  }

  export type DocumentConfigUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput> | DocumentConfigCreateWithoutTenantInput[] | DocumentConfigUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutTenantInput | DocumentConfigCreateOrConnectWithoutTenantInput[]
    createMany?: DocumentConfigCreateManyTenantInputEnvelope
    connect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
  }

  export type DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput> | DocumentTemplateCreateWithoutTenantInput[] | DocumentTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantInput | DocumentTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: DocumentTemplateCreateManyTenantInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput> | PublishedDocumentCreateWithoutCreatedByInput[] | PublishedDocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutCreatedByInput | PublishedDocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PublishedDocumentCreateManyCreatedByInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput> | PublishedDocumentCreateWithoutOwnerInput[] | PublishedDocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutOwnerInput | PublishedDocumentCreateOrConnectWithoutOwnerInput[]
    createMany?: PublishedDocumentCreateManyOwnerInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type MTICReaderUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput> | MTICReaderCreateWithoutTenantInput[] | MTICReaderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MTICReaderCreateOrConnectWithoutTenantInput | MTICReaderCreateOrConnectWithoutTenantInput[]
    createMany?: MTICReaderCreateManyTenantInputEnvelope
    connect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
  }

  export type TenantOrgUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput> | TenantOrgCreateWithoutTenantInput[] | TenantOrgUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantInput | TenantOrgCreateOrConnectWithoutTenantInput[]
    createMany?: TenantOrgCreateManyTenantInputEnvelope
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TenantUserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput> | TenantUserCreateWithoutTenantInput[] | TenantUserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantInput | TenantUserCreateOrConnectWithoutTenantInput[]
    upsert?: TenantUserUpsertWithWhereUniqueWithoutTenantInput | TenantUserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantUserCreateManyTenantInputEnvelope
    set?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    disconnect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    delete?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    update?: TenantUserUpdateWithWhereUniqueWithoutTenantInput | TenantUserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantUserUpdateManyWithWhereWithoutTenantInput | TenantUserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
  }

  export type DocumentConfigUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput> | DocumentConfigCreateWithoutTenantInput[] | DocumentConfigUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutTenantInput | DocumentConfigCreateOrConnectWithoutTenantInput[]
    upsert?: DocumentConfigUpsertWithWhereUniqueWithoutTenantInput | DocumentConfigUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DocumentConfigCreateManyTenantInputEnvelope
    set?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    disconnect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    delete?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    connect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    update?: DocumentConfigUpdateWithWhereUniqueWithoutTenantInput | DocumentConfigUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DocumentConfigUpdateManyWithWhereWithoutTenantInput | DocumentConfigUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DocumentConfigScalarWhereInput | DocumentConfigScalarWhereInput[]
  }

  export type DocumentTemplateUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput> | DocumentTemplateCreateWithoutTenantInput[] | DocumentTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantInput | DocumentTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutTenantInput | DocumentTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DocumentTemplateCreateManyTenantInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutTenantInput | DocumentTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutTenantInput | DocumentTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type PublishedDocumentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput> | PublishedDocumentCreateWithoutCreatedByInput[] | PublishedDocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutCreatedByInput | PublishedDocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutCreatedByInput | PublishedDocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PublishedDocumentCreateManyCreatedByInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutCreatedByInput | PublishedDocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutCreatedByInput | PublishedDocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type PublishedDocumentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput> | PublishedDocumentCreateWithoutOwnerInput[] | PublishedDocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutOwnerInput | PublishedDocumentCreateOrConnectWithoutOwnerInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutOwnerInput | PublishedDocumentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PublishedDocumentCreateManyOwnerInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutOwnerInput | PublishedDocumentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutOwnerInput | PublishedDocumentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type MTICReaderUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput> | MTICReaderCreateWithoutTenantInput[] | MTICReaderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MTICReaderCreateOrConnectWithoutTenantInput | MTICReaderCreateOrConnectWithoutTenantInput[]
    upsert?: MTICReaderUpsertWithWhereUniqueWithoutTenantInput | MTICReaderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MTICReaderCreateManyTenantInputEnvelope
    set?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    disconnect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    delete?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    connect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    update?: MTICReaderUpdateWithWhereUniqueWithoutTenantInput | MTICReaderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MTICReaderUpdateManyWithWhereWithoutTenantInput | MTICReaderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MTICReaderScalarWhereInput | MTICReaderScalarWhereInput[]
  }

  export type TenantOrgUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput> | TenantOrgCreateWithoutTenantInput[] | TenantOrgUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantInput | TenantOrgCreateOrConnectWithoutTenantInput[]
    upsert?: TenantOrgUpsertWithWhereUniqueWithoutTenantInput | TenantOrgUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantOrgCreateManyTenantInputEnvelope
    set?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    disconnect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    delete?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    update?: TenantOrgUpdateWithWhereUniqueWithoutTenantInput | TenantOrgUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantOrgUpdateManyWithWhereWithoutTenantInput | TenantOrgUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
  }

  export type TenantUserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput> | TenantUserCreateWithoutTenantInput[] | TenantUserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantInput | TenantUserCreateOrConnectWithoutTenantInput[]
    upsert?: TenantUserUpsertWithWhereUniqueWithoutTenantInput | TenantUserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantUserCreateManyTenantInputEnvelope
    set?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    disconnect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    delete?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    connect?: TenantUserWhereUniqueInput | TenantUserWhereUniqueInput[]
    update?: TenantUserUpdateWithWhereUniqueWithoutTenantInput | TenantUserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantUserUpdateManyWithWhereWithoutTenantInput | TenantUserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
  }

  export type DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput> | DocumentConfigCreateWithoutTenantInput[] | DocumentConfigUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutTenantInput | DocumentConfigCreateOrConnectWithoutTenantInput[]
    upsert?: DocumentConfigUpsertWithWhereUniqueWithoutTenantInput | DocumentConfigUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DocumentConfigCreateManyTenantInputEnvelope
    set?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    disconnect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    delete?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    connect?: DocumentConfigWhereUniqueInput | DocumentConfigWhereUniqueInput[]
    update?: DocumentConfigUpdateWithWhereUniqueWithoutTenantInput | DocumentConfigUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DocumentConfigUpdateManyWithWhereWithoutTenantInput | DocumentConfigUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DocumentConfigScalarWhereInput | DocumentConfigScalarWhereInput[]
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput> | DocumentTemplateCreateWithoutTenantInput[] | DocumentTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantInput | DocumentTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutTenantInput | DocumentTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DocumentTemplateCreateManyTenantInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutTenantInput | DocumentTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutTenantInput | DocumentTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput> | PublishedDocumentCreateWithoutCreatedByInput[] | PublishedDocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutCreatedByInput | PublishedDocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutCreatedByInput | PublishedDocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PublishedDocumentCreateManyCreatedByInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutCreatedByInput | PublishedDocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutCreatedByInput | PublishedDocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput> | PublishedDocumentCreateWithoutOwnerInput[] | PublishedDocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutOwnerInput | PublishedDocumentCreateOrConnectWithoutOwnerInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutOwnerInput | PublishedDocumentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PublishedDocumentCreateManyOwnerInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutOwnerInput | PublishedDocumentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutOwnerInput | PublishedDocumentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type MTICReaderUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput> | MTICReaderCreateWithoutTenantInput[] | MTICReaderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MTICReaderCreateOrConnectWithoutTenantInput | MTICReaderCreateOrConnectWithoutTenantInput[]
    upsert?: MTICReaderUpsertWithWhereUniqueWithoutTenantInput | MTICReaderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MTICReaderCreateManyTenantInputEnvelope
    set?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    disconnect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    delete?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    connect?: MTICReaderWhereUniqueInput | MTICReaderWhereUniqueInput[]
    update?: MTICReaderUpdateWithWhereUniqueWithoutTenantInput | MTICReaderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MTICReaderUpdateManyWithWhereWithoutTenantInput | MTICReaderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MTICReaderScalarWhereInput | MTICReaderScalarWhereInput[]
  }

  export type TenantOrgUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput> | TenantOrgCreateWithoutTenantInput[] | TenantOrgUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantInput | TenantOrgCreateOrConnectWithoutTenantInput[]
    upsert?: TenantOrgUpsertWithWhereUniqueWithoutTenantInput | TenantOrgUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantOrgCreateManyTenantInputEnvelope
    set?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    disconnect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    delete?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    update?: TenantOrgUpdateWithWhereUniqueWithoutTenantInput | TenantOrgUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantOrgUpdateManyWithWhereWithoutTenantInput | TenantOrgUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTenantUsersInput = {
    create?: XOR<UserCreateWithoutTenantUsersInput, UserUncheckedCreateWithoutTenantUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTenantUsersInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutTenantUsersInput = {
    create?: XOR<TenantCreateWithoutTenantUsersInput, TenantUncheckedCreateWithoutTenantUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTenantUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantOrgUserCreateNestedManyWithoutTenantUserInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput> | TenantOrgUserCreateWithoutTenantUserInput[] | TenantOrgUserUncheckedCreateWithoutTenantUserInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantUserInput | TenantOrgUserCreateOrConnectWithoutTenantUserInput[]
    createMany?: TenantOrgUserCreateManyTenantUserInputEnvelope
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutDefaultTenantUserInput = {
    create?: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultTenantUserInput
    connect?: UserWhereUniqueInput
  }

  export type TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput> | TenantOrgUserCreateWithoutTenantUserInput[] | TenantOrgUserUncheckedCreateWithoutTenantUserInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantUserInput | TenantOrgUserCreateOrConnectWithoutTenantUserInput[]
    createMany?: TenantOrgUserCreateManyTenantUserInputEnvelope
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput = {
    create?: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultTenantUserInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type UserUpdateOneWithoutTenantUsersNestedInput = {
    create?: XOR<UserCreateWithoutTenantUsersInput, UserUncheckedCreateWithoutTenantUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTenantUsersInput
    upsert?: UserUpsertWithoutTenantUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTenantUsersInput, UserUpdateWithoutTenantUsersInput>, UserUncheckedUpdateWithoutTenantUsersInput>
  }

  export type TenantUpdateOneRequiredWithoutTenantUsersNestedInput = {
    create?: XOR<TenantCreateWithoutTenantUsersInput, TenantUncheckedCreateWithoutTenantUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTenantUsersInput
    upsert?: TenantUpsertWithoutTenantUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTenantUsersInput, TenantUpdateWithoutTenantUsersInput>, TenantUncheckedUpdateWithoutTenantUsersInput>
  }

  export type TenantOrgUserUpdateManyWithoutTenantUserNestedInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput> | TenantOrgUserCreateWithoutTenantUserInput[] | TenantOrgUserUncheckedCreateWithoutTenantUserInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantUserInput | TenantOrgUserCreateOrConnectWithoutTenantUserInput[]
    upsert?: TenantOrgUserUpsertWithWhereUniqueWithoutTenantUserInput | TenantOrgUserUpsertWithWhereUniqueWithoutTenantUserInput[]
    createMany?: TenantOrgUserCreateManyTenantUserInputEnvelope
    set?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    disconnect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    delete?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    update?: TenantOrgUserUpdateWithWhereUniqueWithoutTenantUserInput | TenantOrgUserUpdateWithWhereUniqueWithoutTenantUserInput[]
    updateMany?: TenantOrgUserUpdateManyWithWhereWithoutTenantUserInput | TenantOrgUserUpdateManyWithWhereWithoutTenantUserInput[]
    deleteMany?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutDefaultTenantUserNestedInput = {
    create?: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultTenantUserInput
    upsert?: UserUpsertWithoutDefaultTenantUserInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDefaultTenantUserInput, UserUpdateWithoutDefaultTenantUserInput>, UserUncheckedUpdateWithoutDefaultTenantUserInput>
  }

  export type TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput> | TenantOrgUserCreateWithoutTenantUserInput[] | TenantOrgUserUncheckedCreateWithoutTenantUserInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantUserInput | TenantOrgUserCreateOrConnectWithoutTenantUserInput[]
    upsert?: TenantOrgUserUpsertWithWhereUniqueWithoutTenantUserInput | TenantOrgUserUpsertWithWhereUniqueWithoutTenantUserInput[]
    createMany?: TenantOrgUserCreateManyTenantUserInputEnvelope
    set?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    disconnect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    delete?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    update?: TenantOrgUserUpdateWithWhereUniqueWithoutTenantUserInput | TenantOrgUserUpdateWithWhereUniqueWithoutTenantUserInput[]
    updateMany?: TenantOrgUserUpdateManyWithWhereWithoutTenantUserInput | TenantOrgUserUpdateManyWithWhereWithoutTenantUserInput[]
    deleteMany?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput = {
    create?: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultTenantUserInput
    upsert?: UserUpsertWithoutDefaultTenantUserInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDefaultTenantUserInput, UserUpdateWithoutDefaultTenantUserInput>, UserUncheckedUpdateWithoutDefaultTenantUserInput>
  }

  export type TenantOrgCreateNestedOneWithoutSubOrgsInput = {
    create?: XOR<TenantOrgCreateWithoutSubOrgsInput, TenantOrgUncheckedCreateWithoutSubOrgsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutSubOrgsInput
    connect?: TenantOrgWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutTenantOrgsInput = {
    create?: XOR<TenantCreateWithoutTenantOrgsInput, TenantUncheckedCreateWithoutTenantOrgsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTenantOrgsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantOrgCreateNestedManyWithoutParentInput = {
    create?: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput> | TenantOrgCreateWithoutParentInput[] | TenantOrgUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutParentInput | TenantOrgCreateOrConnectWithoutParentInput[]
    createMany?: TenantOrgCreateManyParentInputEnvelope
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
  }

  export type TenantOrgUserCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput> | TenantOrgUserCreateWithoutTenantOrgInput[] | TenantOrgUserUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantOrgInput | TenantOrgUserCreateOrConnectWithoutTenantOrgInput[]
    createMany?: TenantOrgUserCreateManyTenantOrgInputEnvelope
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
  }

  export type TenantOrgDocCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput> | TenantOrgDocCreateWithoutTenantOrgInput[] | TenantOrgDocUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutTenantOrgInput | TenantOrgDocCreateOrConnectWithoutTenantOrgInput[]
    createMany?: TenantOrgDocCreateManyTenantOrgInputEnvelope
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput> | DocumentCreateWithoutTenantOrgInput[] | DocumentUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTenantOrgInput | DocumentCreateOrConnectWithoutTenantOrgInput[]
    createMany?: DocumentCreateManyTenantOrgInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type TenantOrgUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput> | TenantOrgCreateWithoutParentInput[] | TenantOrgUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutParentInput | TenantOrgCreateOrConnectWithoutParentInput[]
    createMany?: TenantOrgCreateManyParentInputEnvelope
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
  }

  export type TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput> | TenantOrgUserCreateWithoutTenantOrgInput[] | TenantOrgUserUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantOrgInput | TenantOrgUserCreateOrConnectWithoutTenantOrgInput[]
    createMany?: TenantOrgUserCreateManyTenantOrgInputEnvelope
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
  }

  export type TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput> | TenantOrgDocCreateWithoutTenantOrgInput[] | TenantOrgDocUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutTenantOrgInput | TenantOrgDocCreateOrConnectWithoutTenantOrgInput[]
    createMany?: TenantOrgDocCreateManyTenantOrgInputEnvelope
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutTenantOrgInput = {
    create?: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput> | DocumentCreateWithoutTenantOrgInput[] | DocumentUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTenantOrgInput | DocumentCreateOrConnectWithoutTenantOrgInput[]
    createMany?: DocumentCreateManyTenantOrgInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type TenantOrgUpdateOneWithoutSubOrgsNestedInput = {
    create?: XOR<TenantOrgCreateWithoutSubOrgsInput, TenantOrgUncheckedCreateWithoutSubOrgsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutSubOrgsInput
    upsert?: TenantOrgUpsertWithoutSubOrgsInput
    disconnect?: TenantOrgWhereInput | boolean
    delete?: TenantOrgWhereInput | boolean
    connect?: TenantOrgWhereUniqueInput
    update?: XOR<XOR<TenantOrgUpdateToOneWithWhereWithoutSubOrgsInput, TenantOrgUpdateWithoutSubOrgsInput>, TenantOrgUncheckedUpdateWithoutSubOrgsInput>
  }

  export type TenantUpdateOneRequiredWithoutTenantOrgsNestedInput = {
    create?: XOR<TenantCreateWithoutTenantOrgsInput, TenantUncheckedCreateWithoutTenantOrgsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTenantOrgsInput
    upsert?: TenantUpsertWithoutTenantOrgsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTenantOrgsInput, TenantUpdateWithoutTenantOrgsInput>, TenantUncheckedUpdateWithoutTenantOrgsInput>
  }

  export type TenantOrgUpdateManyWithoutParentNestedInput = {
    create?: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput> | TenantOrgCreateWithoutParentInput[] | TenantOrgUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutParentInput | TenantOrgCreateOrConnectWithoutParentInput[]
    upsert?: TenantOrgUpsertWithWhereUniqueWithoutParentInput | TenantOrgUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: TenantOrgCreateManyParentInputEnvelope
    set?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    disconnect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    delete?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    update?: TenantOrgUpdateWithWhereUniqueWithoutParentInput | TenantOrgUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: TenantOrgUpdateManyWithWhereWithoutParentInput | TenantOrgUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
  }

  export type TenantOrgUserUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput> | TenantOrgUserCreateWithoutTenantOrgInput[] | TenantOrgUserUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantOrgInput | TenantOrgUserCreateOrConnectWithoutTenantOrgInput[]
    upsert?: TenantOrgUserUpsertWithWhereUniqueWithoutTenantOrgInput | TenantOrgUserUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: TenantOrgUserCreateManyTenantOrgInputEnvelope
    set?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    disconnect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    delete?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    update?: TenantOrgUserUpdateWithWhereUniqueWithoutTenantOrgInput | TenantOrgUserUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: TenantOrgUserUpdateManyWithWhereWithoutTenantOrgInput | TenantOrgUserUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
  }

  export type TenantOrgDocUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput> | TenantOrgDocCreateWithoutTenantOrgInput[] | TenantOrgDocUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutTenantOrgInput | TenantOrgDocCreateOrConnectWithoutTenantOrgInput[]
    upsert?: TenantOrgDocUpsertWithWhereUniqueWithoutTenantOrgInput | TenantOrgDocUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: TenantOrgDocCreateManyTenantOrgInputEnvelope
    set?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    disconnect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    delete?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    update?: TenantOrgDocUpdateWithWhereUniqueWithoutTenantOrgInput | TenantOrgDocUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: TenantOrgDocUpdateManyWithWhereWithoutTenantOrgInput | TenantOrgDocUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput> | DocumentCreateWithoutTenantOrgInput[] | DocumentUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTenantOrgInput | DocumentCreateOrConnectWithoutTenantOrgInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTenantOrgInput | DocumentUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: DocumentCreateManyTenantOrgInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTenantOrgInput | DocumentUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTenantOrgInput | DocumentUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type TenantOrgUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput> | TenantOrgCreateWithoutParentInput[] | TenantOrgUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantOrgCreateOrConnectWithoutParentInput | TenantOrgCreateOrConnectWithoutParentInput[]
    upsert?: TenantOrgUpsertWithWhereUniqueWithoutParentInput | TenantOrgUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: TenantOrgCreateManyParentInputEnvelope
    set?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    disconnect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    delete?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    connect?: TenantOrgWhereUniqueInput | TenantOrgWhereUniqueInput[]
    update?: TenantOrgUpdateWithWhereUniqueWithoutParentInput | TenantOrgUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: TenantOrgUpdateManyWithWhereWithoutParentInput | TenantOrgUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
  }

  export type TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput> | TenantOrgUserCreateWithoutTenantOrgInput[] | TenantOrgUserUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgUserCreateOrConnectWithoutTenantOrgInput | TenantOrgUserCreateOrConnectWithoutTenantOrgInput[]
    upsert?: TenantOrgUserUpsertWithWhereUniqueWithoutTenantOrgInput | TenantOrgUserUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: TenantOrgUserCreateManyTenantOrgInputEnvelope
    set?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    disconnect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    delete?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    connect?: TenantOrgUserWhereUniqueInput | TenantOrgUserWhereUniqueInput[]
    update?: TenantOrgUserUpdateWithWhereUniqueWithoutTenantOrgInput | TenantOrgUserUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: TenantOrgUserUpdateManyWithWhereWithoutTenantOrgInput | TenantOrgUserUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
  }

  export type TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput> | TenantOrgDocCreateWithoutTenantOrgInput[] | TenantOrgDocUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutTenantOrgInput | TenantOrgDocCreateOrConnectWithoutTenantOrgInput[]
    upsert?: TenantOrgDocUpsertWithWhereUniqueWithoutTenantOrgInput | TenantOrgDocUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: TenantOrgDocCreateManyTenantOrgInputEnvelope
    set?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    disconnect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    delete?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    update?: TenantOrgDocUpdateWithWhereUniqueWithoutTenantOrgInput | TenantOrgDocUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: TenantOrgDocUpdateManyWithWhereWithoutTenantOrgInput | TenantOrgDocUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput = {
    create?: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput> | DocumentCreateWithoutTenantOrgInput[] | DocumentUncheckedCreateWithoutTenantOrgInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTenantOrgInput | DocumentCreateOrConnectWithoutTenantOrgInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTenantOrgInput | DocumentUpsertWithWhereUniqueWithoutTenantOrgInput[]
    createMany?: DocumentCreateManyTenantOrgInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTenantOrgInput | DocumentUpdateWithWhereUniqueWithoutTenantOrgInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTenantOrgInput | DocumentUpdateManyWithWhereWithoutTenantOrgInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type TenantOrgCreateNestedOneWithoutTenantOrgUsersInput = {
    create?: XOR<TenantOrgCreateWithoutTenantOrgUsersInput, TenantOrgUncheckedCreateWithoutTenantOrgUsersInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantOrgUsersInput
    connect?: TenantOrgWhereUniqueInput
  }

  export type TenantUserCreateNestedOneWithoutTenantOrgUserInput = {
    create?: XOR<TenantUserCreateWithoutTenantOrgUserInput, TenantUserUncheckedCreateWithoutTenantOrgUserInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantOrgUserInput
    connect?: TenantUserWhereUniqueInput
  }

  export type EnumPermissionFieldUpdateOperationsInput = {
    set?: $Enums.Permission
  }

  export type TenantOrgUpdateOneRequiredWithoutTenantOrgUsersNestedInput = {
    create?: XOR<TenantOrgCreateWithoutTenantOrgUsersInput, TenantOrgUncheckedCreateWithoutTenantOrgUsersInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantOrgUsersInput
    upsert?: TenantOrgUpsertWithoutTenantOrgUsersInput
    connect?: TenantOrgWhereUniqueInput
    update?: XOR<XOR<TenantOrgUpdateToOneWithWhereWithoutTenantOrgUsersInput, TenantOrgUpdateWithoutTenantOrgUsersInput>, TenantOrgUncheckedUpdateWithoutTenantOrgUsersInput>
  }

  export type TenantUserUpdateOneRequiredWithoutTenantOrgUserNestedInput = {
    create?: XOR<TenantUserCreateWithoutTenantOrgUserInput, TenantUserUncheckedCreateWithoutTenantOrgUserInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutTenantOrgUserInput
    upsert?: TenantUserUpsertWithoutTenantOrgUserInput
    connect?: TenantUserWhereUniqueInput
    update?: XOR<XOR<TenantUserUpdateToOneWithWhereWithoutTenantOrgUserInput, TenantUserUpdateWithoutTenantOrgUserInput>, TenantUserUncheckedUpdateWithoutTenantOrgUserInput>
  }

  export type TenantCreateNestedOneWithoutDocumentConfigInput = {
    create?: XOR<TenantCreateWithoutDocumentConfigInput, TenantUncheckedCreateWithoutDocumentConfigInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDocumentConfigInput
    connect?: TenantWhereUniqueInput
  }

  export type DocumentTemplateCreateNestedManyWithoutDocumentConfigInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput> | DocumentTemplateCreateWithoutDocumentConfigInput[] | DocumentTemplateUncheckedCreateWithoutDocumentConfigInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentConfigInput | DocumentTemplateCreateOrConnectWithoutDocumentConfigInput[]
    createMany?: DocumentTemplateCreateManyDocumentConfigInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type DocumentTemplateUncheckedCreateNestedManyWithoutDocumentConfigInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput> | DocumentTemplateCreateWithoutDocumentConfigInput[] | DocumentTemplateUncheckedCreateWithoutDocumentConfigInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentConfigInput | DocumentTemplateCreateOrConnectWithoutDocumentConfigInput[]
    createMany?: DocumentTemplateCreateManyDocumentConfigInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutDocumentConfigNestedInput = {
    create?: XOR<TenantCreateWithoutDocumentConfigInput, TenantUncheckedCreateWithoutDocumentConfigInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDocumentConfigInput
    upsert?: TenantUpsertWithoutDocumentConfigInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutDocumentConfigInput, TenantUpdateWithoutDocumentConfigInput>, TenantUncheckedUpdateWithoutDocumentConfigInput>
  }

  export type DocumentTemplateUpdateManyWithoutDocumentConfigNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput> | DocumentTemplateCreateWithoutDocumentConfigInput[] | DocumentTemplateUncheckedCreateWithoutDocumentConfigInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentConfigInput | DocumentTemplateCreateOrConnectWithoutDocumentConfigInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutDocumentConfigInput | DocumentTemplateUpsertWithWhereUniqueWithoutDocumentConfigInput[]
    createMany?: DocumentTemplateCreateManyDocumentConfigInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutDocumentConfigInput | DocumentTemplateUpdateWithWhereUniqueWithoutDocumentConfigInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutDocumentConfigInput | DocumentTemplateUpdateManyWithWhereWithoutDocumentConfigInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutDocumentConfigNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput> | DocumentTemplateCreateWithoutDocumentConfigInput[] | DocumentTemplateUncheckedCreateWithoutDocumentConfigInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentConfigInput | DocumentTemplateCreateOrConnectWithoutDocumentConfigInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutDocumentConfigInput | DocumentTemplateUpsertWithWhereUniqueWithoutDocumentConfigInput[]
    createMany?: DocumentTemplateCreateManyDocumentConfigInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutDocumentConfigInput | DocumentTemplateUpdateWithWhereUniqueWithoutDocumentConfigInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutDocumentConfigInput | DocumentTemplateUpdateManyWithWhereWithoutDocumentConfigInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type DocumentConfigCreateNestedOneWithoutDocumentTemplatesInput = {
    create?: XOR<DocumentConfigCreateWithoutDocumentTemplatesInput, DocumentConfigUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutDocumentTemplatesInput
    connect?: DocumentConfigWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutDocumentTemplatesInput = {
    create?: XOR<TenantCreateWithoutDocumentTemplatesInput, TenantUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDocumentTemplatesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantOrgDocCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput> | TenantOrgDocCreateWithoutDocumentTemplateInput[] | TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput | TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: TenantOrgDocCreateManyDocumentTemplateInputEnvelope
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput> | DocumentCreateWithoutDocumentTemplateInput[] | DocumentUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTemplateInput | DocumentCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: DocumentCreateManyDocumentTemplateInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type TenantOrgDocUncheckedCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput> | TenantOrgDocCreateWithoutDocumentTemplateInput[] | TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput | TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: TenantOrgDocCreateManyDocumentTemplateInputEnvelope
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput> | DocumentCreateWithoutDocumentTemplateInput[] | DocumentUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTemplateInput | DocumentCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: DocumentCreateManyDocumentTemplateInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentConfigUpdateOneRequiredWithoutDocumentTemplatesNestedInput = {
    create?: XOR<DocumentConfigCreateWithoutDocumentTemplatesInput, DocumentConfigUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: DocumentConfigCreateOrConnectWithoutDocumentTemplatesInput
    upsert?: DocumentConfigUpsertWithoutDocumentTemplatesInput
    connect?: DocumentConfigWhereUniqueInput
    update?: XOR<XOR<DocumentConfigUpdateToOneWithWhereWithoutDocumentTemplatesInput, DocumentConfigUpdateWithoutDocumentTemplatesInput>, DocumentConfigUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type TenantUpdateOneRequiredWithoutDocumentTemplatesNestedInput = {
    create?: XOR<TenantCreateWithoutDocumentTemplatesInput, TenantUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDocumentTemplatesInput
    upsert?: TenantUpsertWithoutDocumentTemplatesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutDocumentTemplatesInput, TenantUpdateWithoutDocumentTemplatesInput>, TenantUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type TenantOrgDocUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput> | TenantOrgDocCreateWithoutDocumentTemplateInput[] | TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput | TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: TenantOrgDocUpsertWithWhereUniqueWithoutDocumentTemplateInput | TenantOrgDocUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: TenantOrgDocCreateManyDocumentTemplateInputEnvelope
    set?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    disconnect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    delete?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    update?: TenantOrgDocUpdateWithWhereUniqueWithoutDocumentTemplateInput | TenantOrgDocUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: TenantOrgDocUpdateManyWithWhereWithoutDocumentTemplateInput | TenantOrgDocUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput> | DocumentCreateWithoutDocumentTemplateInput[] | DocumentUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTemplateInput | DocumentCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentTemplateInput | DocumentUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: DocumentCreateManyDocumentTemplateInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentTemplateInput | DocumentUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentTemplateInput | DocumentUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput> | TenantOrgDocCreateWithoutDocumentTemplateInput[] | TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput | TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: TenantOrgDocUpsertWithWhereUniqueWithoutDocumentTemplateInput | TenantOrgDocUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: TenantOrgDocCreateManyDocumentTemplateInputEnvelope
    set?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    disconnect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    delete?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    connect?: TenantOrgDocWhereUniqueInput | TenantOrgDocWhereUniqueInput[]
    update?: TenantOrgDocUpdateWithWhereUniqueWithoutDocumentTemplateInput | TenantOrgDocUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: TenantOrgDocUpdateManyWithWhereWithoutDocumentTemplateInput | TenantOrgDocUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput> | DocumentCreateWithoutDocumentTemplateInput[] | DocumentUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTemplateInput | DocumentCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentTemplateInput | DocumentUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: DocumentCreateManyDocumentTemplateInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentTemplateInput | DocumentUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentTemplateInput | DocumentUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type TenantOrgCreateNestedOneWithoutTenantOrgDocsInput = {
    create?: XOR<TenantOrgCreateWithoutTenantOrgDocsInput, TenantOrgUncheckedCreateWithoutTenantOrgDocsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantOrgDocsInput
    connect?: TenantOrgWhereUniqueInput
  }

  export type DocumentTemplateCreateNestedOneWithoutTenantOrgDocsInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedCreateWithoutTenantOrgDocsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantOrgDocsInput
    connect?: DocumentTemplateWhereUniqueInput
  }

  export type TenantOrgUpdateOneRequiredWithoutTenantOrgDocsNestedInput = {
    create?: XOR<TenantOrgCreateWithoutTenantOrgDocsInput, TenantOrgUncheckedCreateWithoutTenantOrgDocsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutTenantOrgDocsInput
    upsert?: TenantOrgUpsertWithoutTenantOrgDocsInput
    connect?: TenantOrgWhereUniqueInput
    update?: XOR<XOR<TenantOrgUpdateToOneWithWhereWithoutTenantOrgDocsInput, TenantOrgUpdateWithoutTenantOrgDocsInput>, TenantOrgUncheckedUpdateWithoutTenantOrgDocsInput>
  }

  export type DocumentTemplateUpdateOneRequiredWithoutTenantOrgDocsNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedCreateWithoutTenantOrgDocsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTenantOrgDocsInput
    upsert?: DocumentTemplateUpsertWithoutTenantOrgDocsInput
    connect?: DocumentTemplateWhereUniqueInput
    update?: XOR<XOR<DocumentTemplateUpdateToOneWithWhereWithoutTenantOrgDocsInput, DocumentTemplateUpdateWithoutTenantOrgDocsInput>, DocumentTemplateUncheckedUpdateWithoutTenantOrgDocsInput>
  }

  export type DocumentTemplateCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentsInput
    connect?: DocumentTemplateWhereUniqueInput
  }

  export type TenantOrgCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<TenantOrgCreateWithoutDocumentsInput, TenantOrgUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutDocumentsInput
    connect?: TenantOrgWhereUniqueInput
  }

  export type TenantUserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<TenantUserCreateWithoutDocumentsInput, TenantUserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutDocumentsInput
    connect?: TenantUserWhereUniqueInput
  }

  export type MTICDocumentCreateNestedManyWithoutDocumentInput = {
    create?: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput> | MTICDocumentCreateWithoutDocumentInput[] | MTICDocumentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutDocumentInput | MTICDocumentCreateOrConnectWithoutDocumentInput[]
    createMany?: MTICDocumentCreateManyDocumentInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type MTICDocumentUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput> | MTICDocumentCreateWithoutDocumentInput[] | MTICDocumentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutDocumentInput | MTICDocumentCreateOrConnectWithoutDocumentInput[]
    createMany?: MTICDocumentCreateManyDocumentInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type DocumentTemplateUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentsInput
    upsert?: DocumentTemplateUpsertWithoutDocumentsInput
    connect?: DocumentTemplateWhereUniqueInput
    update?: XOR<XOR<DocumentTemplateUpdateToOneWithWhereWithoutDocumentsInput, DocumentTemplateUpdateWithoutDocumentsInput>, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
  }

  export type TenantOrgUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<TenantOrgCreateWithoutDocumentsInput, TenantOrgUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TenantOrgCreateOrConnectWithoutDocumentsInput
    upsert?: TenantOrgUpsertWithoutDocumentsInput
    connect?: TenantOrgWhereUniqueInput
    update?: XOR<XOR<TenantOrgUpdateToOneWithWhereWithoutDocumentsInput, TenantOrgUpdateWithoutDocumentsInput>, TenantOrgUncheckedUpdateWithoutDocumentsInput>
  }

  export type TenantUserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<TenantUserCreateWithoutDocumentsInput, TenantUserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: TenantUserCreateOrConnectWithoutDocumentsInput
    upsert?: TenantUserUpsertWithoutDocumentsInput
    connect?: TenantUserWhereUniqueInput
    update?: XOR<XOR<TenantUserUpdateToOneWithWhereWithoutDocumentsInput, TenantUserUpdateWithoutDocumentsInput>, TenantUserUncheckedUpdateWithoutDocumentsInput>
  }

  export type MTICDocumentUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput> | MTICDocumentCreateWithoutDocumentInput[] | MTICDocumentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutDocumentInput | MTICDocumentCreateOrConnectWithoutDocumentInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutDocumentInput | MTICDocumentUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: MTICDocumentCreateManyDocumentInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutDocumentInput | MTICDocumentUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutDocumentInput | MTICDocumentUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type MTICDocumentUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput> | MTICDocumentCreateWithoutDocumentInput[] | MTICDocumentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutDocumentInput | MTICDocumentCreateOrConnectWithoutDocumentInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutDocumentInput | MTICDocumentUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: MTICDocumentCreateManyDocumentInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutDocumentInput | MTICDocumentUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutDocumentInput | MTICDocumentUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type MTICLogCreateNestedManyWithoutMticInput = {
    create?: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput> | MTICLogCreateWithoutMticInput[] | MTICLogUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticInput | MTICLogCreateOrConnectWithoutMticInput[]
    createMany?: MTICLogCreateManyMticInputEnvelope
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
  }

  export type PublishedDocumentCreateNestedManyWithoutMticInput = {
    create?: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput> | PublishedDocumentCreateWithoutMticInput[] | PublishedDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutMticInput | PublishedDocumentCreateOrConnectWithoutMticInput[]
    createMany?: PublishedDocumentCreateManyMticInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type MTICDocumentCreateNestedManyWithoutMticInput = {
    create?: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput> | MTICDocumentCreateWithoutMticInput[] | MTICDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticInput | MTICDocumentCreateOrConnectWithoutMticInput[]
    createMany?: MTICDocumentCreateManyMticInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type MTICLogUncheckedCreateNestedManyWithoutMticInput = {
    create?: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput> | MTICLogCreateWithoutMticInput[] | MTICLogUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticInput | MTICLogCreateOrConnectWithoutMticInput[]
    createMany?: MTICLogCreateManyMticInputEnvelope
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
  }

  export type PublishedDocumentUncheckedCreateNestedManyWithoutMticInput = {
    create?: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput> | PublishedDocumentCreateWithoutMticInput[] | PublishedDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutMticInput | PublishedDocumentCreateOrConnectWithoutMticInput[]
    createMany?: PublishedDocumentCreateManyMticInputEnvelope
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
  }

  export type MTICDocumentUncheckedCreateNestedManyWithoutMticInput = {
    create?: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput> | MTICDocumentCreateWithoutMticInput[] | MTICDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticInput | MTICDocumentCreateOrConnectWithoutMticInput[]
    createMany?: MTICDocumentCreateManyMticInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type MTICLogUpdateManyWithoutMticNestedInput = {
    create?: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput> | MTICLogCreateWithoutMticInput[] | MTICLogUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticInput | MTICLogCreateOrConnectWithoutMticInput[]
    upsert?: MTICLogUpsertWithWhereUniqueWithoutMticInput | MTICLogUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: MTICLogCreateManyMticInputEnvelope
    set?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    disconnect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    delete?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    update?: MTICLogUpdateWithWhereUniqueWithoutMticInput | MTICLogUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: MTICLogUpdateManyWithWhereWithoutMticInput | MTICLogUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
  }

  export type PublishedDocumentUpdateManyWithoutMticNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput> | PublishedDocumentCreateWithoutMticInput[] | PublishedDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutMticInput | PublishedDocumentCreateOrConnectWithoutMticInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutMticInput | PublishedDocumentUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: PublishedDocumentCreateManyMticInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutMticInput | PublishedDocumentUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutMticInput | PublishedDocumentUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type MTICDocumentUpdateManyWithoutMticNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput> | MTICDocumentCreateWithoutMticInput[] | MTICDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticInput | MTICDocumentCreateOrConnectWithoutMticInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutMticInput | MTICDocumentUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: MTICDocumentCreateManyMticInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutMticInput | MTICDocumentUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutMticInput | MTICDocumentUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type MTICLogUncheckedUpdateManyWithoutMticNestedInput = {
    create?: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput> | MTICLogCreateWithoutMticInput[] | MTICLogUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticInput | MTICLogCreateOrConnectWithoutMticInput[]
    upsert?: MTICLogUpsertWithWhereUniqueWithoutMticInput | MTICLogUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: MTICLogCreateManyMticInputEnvelope
    set?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    disconnect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    delete?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    update?: MTICLogUpdateWithWhereUniqueWithoutMticInput | MTICLogUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: MTICLogUpdateManyWithWhereWithoutMticInput | MTICLogUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutMticNestedInput = {
    create?: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput> | PublishedDocumentCreateWithoutMticInput[] | PublishedDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: PublishedDocumentCreateOrConnectWithoutMticInput | PublishedDocumentCreateOrConnectWithoutMticInput[]
    upsert?: PublishedDocumentUpsertWithWhereUniqueWithoutMticInput | PublishedDocumentUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: PublishedDocumentCreateManyMticInputEnvelope
    set?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    disconnect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    delete?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    connect?: PublishedDocumentWhereUniqueInput | PublishedDocumentWhereUniqueInput[]
    update?: PublishedDocumentUpdateWithWhereUniqueWithoutMticInput | PublishedDocumentUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: PublishedDocumentUpdateManyWithWhereWithoutMticInput | PublishedDocumentUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
  }

  export type MTICDocumentUncheckedUpdateManyWithoutMticNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput> | MTICDocumentCreateWithoutMticInput[] | MTICDocumentUncheckedCreateWithoutMticInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticInput | MTICDocumentCreateOrConnectWithoutMticInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutMticInput | MTICDocumentUpsertWithWhereUniqueWithoutMticInput[]
    createMany?: MTICDocumentCreateManyMticInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutMticInput | MTICDocumentUpdateWithWhereUniqueWithoutMticInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutMticInput | MTICDocumentUpdateManyWithWhereWithoutMticInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type MTICCreateNestedOneWithoutMticLogsInput = {
    create?: XOR<MTICCreateWithoutMticLogsInput, MTICUncheckedCreateWithoutMticLogsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutMticLogsInput
    connect?: MTICWhereUniqueInput
  }

  export type MTICReaderCreateNestedOneWithoutMticLogsInput = {
    create?: XOR<MTICReaderCreateWithoutMticLogsInput, MTICReaderUncheckedCreateWithoutMticLogsInput>
    connectOrCreate?: MTICReaderCreateOrConnectWithoutMticLogsInput
    connect?: MTICReaderWhereUniqueInput
  }

  export type MTICDocumentCreateNestedManyWithoutMticLogInput = {
    create?: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput> | MTICDocumentCreateWithoutMticLogInput[] | MTICDocumentUncheckedCreateWithoutMticLogInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticLogInput | MTICDocumentCreateOrConnectWithoutMticLogInput[]
    createMany?: MTICDocumentCreateManyMticLogInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type MTICDocumentUncheckedCreateNestedManyWithoutMticLogInput = {
    create?: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput> | MTICDocumentCreateWithoutMticLogInput[] | MTICDocumentUncheckedCreateWithoutMticLogInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticLogInput | MTICDocumentCreateOrConnectWithoutMticLogInput[]
    createMany?: MTICDocumentCreateManyMticLogInputEnvelope
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumEventFieldUpdateOperationsInput = {
    set?: $Enums.Event
  }

  export type MTICUpdateOneRequiredWithoutMticLogsNestedInput = {
    create?: XOR<MTICCreateWithoutMticLogsInput, MTICUncheckedCreateWithoutMticLogsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutMticLogsInput
    upsert?: MTICUpsertWithoutMticLogsInput
    connect?: MTICWhereUniqueInput
    update?: XOR<XOR<MTICUpdateToOneWithWhereWithoutMticLogsInput, MTICUpdateWithoutMticLogsInput>, MTICUncheckedUpdateWithoutMticLogsInput>
  }

  export type MTICReaderUpdateOneRequiredWithoutMticLogsNestedInput = {
    create?: XOR<MTICReaderCreateWithoutMticLogsInput, MTICReaderUncheckedCreateWithoutMticLogsInput>
    connectOrCreate?: MTICReaderCreateOrConnectWithoutMticLogsInput
    upsert?: MTICReaderUpsertWithoutMticLogsInput
    connect?: MTICReaderWhereUniqueInput
    update?: XOR<XOR<MTICReaderUpdateToOneWithWhereWithoutMticLogsInput, MTICReaderUpdateWithoutMticLogsInput>, MTICReaderUncheckedUpdateWithoutMticLogsInput>
  }

  export type MTICDocumentUpdateManyWithoutMticLogNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput> | MTICDocumentCreateWithoutMticLogInput[] | MTICDocumentUncheckedCreateWithoutMticLogInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticLogInput | MTICDocumentCreateOrConnectWithoutMticLogInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutMticLogInput | MTICDocumentUpsertWithWhereUniqueWithoutMticLogInput[]
    createMany?: MTICDocumentCreateManyMticLogInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutMticLogInput | MTICDocumentUpdateWithWhereUniqueWithoutMticLogInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutMticLogInput | MTICDocumentUpdateManyWithWhereWithoutMticLogInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type MTICDocumentUncheckedUpdateManyWithoutMticLogNestedInput = {
    create?: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput> | MTICDocumentCreateWithoutMticLogInput[] | MTICDocumentUncheckedCreateWithoutMticLogInput[]
    connectOrCreate?: MTICDocumentCreateOrConnectWithoutMticLogInput | MTICDocumentCreateOrConnectWithoutMticLogInput[]
    upsert?: MTICDocumentUpsertWithWhereUniqueWithoutMticLogInput | MTICDocumentUpsertWithWhereUniqueWithoutMticLogInput[]
    createMany?: MTICDocumentCreateManyMticLogInputEnvelope
    set?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    disconnect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    delete?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    connect?: MTICDocumentWhereUniqueInput | MTICDocumentWhereUniqueInput[]
    update?: MTICDocumentUpdateWithWhereUniqueWithoutMticLogInput | MTICDocumentUpdateWithWhereUniqueWithoutMticLogInput[]
    updateMany?: MTICDocumentUpdateManyWithWhereWithoutMticLogInput | MTICDocumentUpdateManyWithWhereWithoutMticLogInput[]
    deleteMany?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutMticReadersInput = {
    create?: XOR<TenantCreateWithoutMticReadersInput, TenantUncheckedCreateWithoutMticReadersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMticReadersInput
    connect?: TenantWhereUniqueInput
  }

  export type MTICLogCreateNestedManyWithoutMticReaderInput = {
    create?: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput> | MTICLogCreateWithoutMticReaderInput[] | MTICLogUncheckedCreateWithoutMticReaderInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticReaderInput | MTICLogCreateOrConnectWithoutMticReaderInput[]
    createMany?: MTICLogCreateManyMticReaderInputEnvelope
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
  }

  export type MTICLogUncheckedCreateNestedManyWithoutMticReaderInput = {
    create?: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput> | MTICLogCreateWithoutMticReaderInput[] | MTICLogUncheckedCreateWithoutMticReaderInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticReaderInput | MTICLogCreateOrConnectWithoutMticReaderInput[]
    createMany?: MTICLogCreateManyMticReaderInputEnvelope
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
  }

  export type TenantUpdateOneWithoutMticReadersNestedInput = {
    create?: XOR<TenantCreateWithoutMticReadersInput, TenantUncheckedCreateWithoutMticReadersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMticReadersInput
    upsert?: TenantUpsertWithoutMticReadersInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMticReadersInput, TenantUpdateWithoutMticReadersInput>, TenantUncheckedUpdateWithoutMticReadersInput>
  }

  export type MTICLogUpdateManyWithoutMticReaderNestedInput = {
    create?: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput> | MTICLogCreateWithoutMticReaderInput[] | MTICLogUncheckedCreateWithoutMticReaderInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticReaderInput | MTICLogCreateOrConnectWithoutMticReaderInput[]
    upsert?: MTICLogUpsertWithWhereUniqueWithoutMticReaderInput | MTICLogUpsertWithWhereUniqueWithoutMticReaderInput[]
    createMany?: MTICLogCreateManyMticReaderInputEnvelope
    set?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    disconnect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    delete?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    update?: MTICLogUpdateWithWhereUniqueWithoutMticReaderInput | MTICLogUpdateWithWhereUniqueWithoutMticReaderInput[]
    updateMany?: MTICLogUpdateManyWithWhereWithoutMticReaderInput | MTICLogUpdateManyWithWhereWithoutMticReaderInput[]
    deleteMany?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
  }

  export type MTICLogUncheckedUpdateManyWithoutMticReaderNestedInput = {
    create?: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput> | MTICLogCreateWithoutMticReaderInput[] | MTICLogUncheckedCreateWithoutMticReaderInput[]
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticReaderInput | MTICLogCreateOrConnectWithoutMticReaderInput[]
    upsert?: MTICLogUpsertWithWhereUniqueWithoutMticReaderInput | MTICLogUpsertWithWhereUniqueWithoutMticReaderInput[]
    createMany?: MTICLogCreateManyMticReaderInputEnvelope
    set?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    disconnect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    delete?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    connect?: MTICLogWhereUniqueInput | MTICLogWhereUniqueInput[]
    update?: MTICLogUpdateWithWhereUniqueWithoutMticReaderInput | MTICLogUpdateWithWhereUniqueWithoutMticReaderInput[]
    updateMany?: MTICLogUpdateManyWithWhereWithoutMticReaderInput | MTICLogUpdateManyWithWhereWithoutMticReaderInput[]
    deleteMany?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
  }

  export type MTICCreateNestedOneWithoutMticDocumentsInput = {
    create?: XOR<MTICCreateWithoutMticDocumentsInput, MTICUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutMticDocumentsInput
    connect?: MTICWhereUniqueInput
  }

  export type MTICLogCreateNestedOneWithoutMticDocumentsInput = {
    create?: XOR<MTICLogCreateWithoutMticDocumentsInput, MTICLogUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticDocumentsInput
    connect?: MTICLogWhereUniqueInput
  }

  export type DocumentCreateNestedOneWithoutMticDocumentsInput = {
    create?: XOR<DocumentCreateWithoutMticDocumentsInput, DocumentUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutMticDocumentsInput
    connect?: DocumentWhereUniqueInput
  }

  export type MTICUpdateOneWithoutMticDocumentsNestedInput = {
    create?: XOR<MTICCreateWithoutMticDocumentsInput, MTICUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutMticDocumentsInput
    upsert?: MTICUpsertWithoutMticDocumentsInput
    disconnect?: MTICWhereInput | boolean
    delete?: MTICWhereInput | boolean
    connect?: MTICWhereUniqueInput
    update?: XOR<XOR<MTICUpdateToOneWithWhereWithoutMticDocumentsInput, MTICUpdateWithoutMticDocumentsInput>, MTICUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type MTICLogUpdateOneRequiredWithoutMticDocumentsNestedInput = {
    create?: XOR<MTICLogCreateWithoutMticDocumentsInput, MTICLogUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: MTICLogCreateOrConnectWithoutMticDocumentsInput
    upsert?: MTICLogUpsertWithoutMticDocumentsInput
    connect?: MTICLogWhereUniqueInput
    update?: XOR<XOR<MTICLogUpdateToOneWithWhereWithoutMticDocumentsInput, MTICLogUpdateWithoutMticDocumentsInput>, MTICLogUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type DocumentUpdateOneRequiredWithoutMticDocumentsNestedInput = {
    create?: XOR<DocumentCreateWithoutMticDocumentsInput, DocumentUncheckedCreateWithoutMticDocumentsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutMticDocumentsInput
    upsert?: DocumentUpsertWithoutMticDocumentsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutMticDocumentsInput, DocumentUpdateWithoutMticDocumentsInput>, DocumentUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type MTICCreateNestedOneWithoutPublishedDocumentsInput = {
    create?: XOR<MTICCreateWithoutPublishedDocumentsInput, MTICUncheckedCreateWithoutPublishedDocumentsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutPublishedDocumentsInput
    connect?: MTICWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutCreatedPublishedDocumentsInput = {
    create?: XOR<TenantCreateWithoutCreatedPublishedDocumentsInput, TenantUncheckedCreateWithoutCreatedPublishedDocumentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCreatedPublishedDocumentsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutOwnedPublishedDocumentsInput = {
    create?: XOR<TenantCreateWithoutOwnedPublishedDocumentsInput, TenantUncheckedCreateWithoutOwnedPublishedDocumentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutOwnedPublishedDocumentsInput
    connect?: TenantWhereUniqueInput
  }

  export type MTICUpdateOneRequiredWithoutPublishedDocumentsNestedInput = {
    create?: XOR<MTICCreateWithoutPublishedDocumentsInput, MTICUncheckedCreateWithoutPublishedDocumentsInput>
    connectOrCreate?: MTICCreateOrConnectWithoutPublishedDocumentsInput
    upsert?: MTICUpsertWithoutPublishedDocumentsInput
    connect?: MTICWhereUniqueInput
    update?: XOR<XOR<MTICUpdateToOneWithWhereWithoutPublishedDocumentsInput, MTICUpdateWithoutPublishedDocumentsInput>, MTICUncheckedUpdateWithoutPublishedDocumentsInput>
  }

  export type TenantUpdateOneRequiredWithoutCreatedPublishedDocumentsNestedInput = {
    create?: XOR<TenantCreateWithoutCreatedPublishedDocumentsInput, TenantUncheckedCreateWithoutCreatedPublishedDocumentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCreatedPublishedDocumentsInput
    upsert?: TenantUpsertWithoutCreatedPublishedDocumentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCreatedPublishedDocumentsInput, TenantUpdateWithoutCreatedPublishedDocumentsInput>, TenantUncheckedUpdateWithoutCreatedPublishedDocumentsInput>
  }

  export type TenantUpdateOneRequiredWithoutOwnedPublishedDocumentsNestedInput = {
    create?: XOR<TenantCreateWithoutOwnedPublishedDocumentsInput, TenantUncheckedCreateWithoutOwnedPublishedDocumentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutOwnedPublishedDocumentsInput
    upsert?: TenantUpsertWithoutOwnedPublishedDocumentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutOwnedPublishedDocumentsInput, TenantUpdateWithoutOwnedPublishedDocumentsInput>, TenantUncheckedUpdateWithoutOwnedPublishedDocumentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionFilter<$PrismaModel> | $Enums.Permission
  }

  export type NestedEnumPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionWithAggregatesFilter<$PrismaModel> | $Enums.Permission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionFilter<$PrismaModel>
    _max?: NestedEnumPermissionFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumEventFilter<$PrismaModel = never> = {
    equals?: $Enums.Event | EnumEventFieldRefInput<$PrismaModel>
    in?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    not?: NestedEnumEventFilter<$PrismaModel> | $Enums.Event
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Event | EnumEventFieldRefInput<$PrismaModel>
    in?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.Event[] | ListEnumEventFieldRefInput<$PrismaModel>
    not?: NestedEnumEventWithAggregatesFilter<$PrismaModel> | $Enums.Event
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventFilter<$PrismaModel>
    _max?: NestedEnumEventFilter<$PrismaModel>
  }

  export type TenantUserCreateWithoutDefaultUserInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTenantUsersInput
    tenant: TenantCreateNestedOneWithoutTenantUsersInput
    tenantOrgUser?: TenantOrgUserCreateNestedManyWithoutTenantUserInput
    documents?: DocumentCreateNestedManyWithoutCreatedByInput
  }

  export type TenantUserUncheckedCreateWithoutDefaultUserInput = {
    id?: string
    userId?: string | null
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUser?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type TenantUserCreateOrConnectWithoutDefaultUserInput = {
    where: TenantUserWhereUniqueInput
    create: XOR<TenantUserCreateWithoutDefaultUserInput, TenantUserUncheckedCreateWithoutDefaultUserInput>
  }

  export type TenantUserCreateWithoutUserInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutTenantUsersInput
    tenantOrgUser?: TenantOrgUserCreateNestedManyWithoutTenantUserInput
    documents?: DocumentCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUncheckedCreateWithoutUserInput = {
    id?: string
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUser?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserCreateOrConnectWithoutUserInput = {
    where: TenantUserWhereUniqueInput
    create: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput>
  }

  export type TenantUserCreateManyUserInputEnvelope = {
    data: TenantUserCreateManyUserInput | TenantUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TenantUserUpsertWithoutDefaultUserInput = {
    update: XOR<TenantUserUpdateWithoutDefaultUserInput, TenantUserUncheckedUpdateWithoutDefaultUserInput>
    create: XOR<TenantUserCreateWithoutDefaultUserInput, TenantUserUncheckedCreateWithoutDefaultUserInput>
    where?: TenantUserWhereInput
  }

  export type TenantUserUpdateToOneWithWhereWithoutDefaultUserInput = {
    where?: TenantUserWhereInput
    data: XOR<TenantUserUpdateWithoutDefaultUserInput, TenantUserUncheckedUpdateWithoutDefaultUserInput>
  }

  export type TenantUserUpdateWithoutDefaultUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTenantUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantUsersNestedInput
    tenantOrgUser?: TenantOrgUserUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUpdateManyWithoutCreatedByNestedInput
  }

  export type TenantUserUncheckedUpdateWithoutDefaultUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUser?: TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type TenantUserUpsertWithWhereUniqueWithoutUserInput = {
    where: TenantUserWhereUniqueInput
    update: XOR<TenantUserUpdateWithoutUserInput, TenantUserUncheckedUpdateWithoutUserInput>
    create: XOR<TenantUserCreateWithoutUserInput, TenantUserUncheckedCreateWithoutUserInput>
  }

  export type TenantUserUpdateWithWhereUniqueWithoutUserInput = {
    where: TenantUserWhereUniqueInput
    data: XOR<TenantUserUpdateWithoutUserInput, TenantUserUncheckedUpdateWithoutUserInput>
  }

  export type TenantUserUpdateManyWithWhereWithoutUserInput = {
    where: TenantUserScalarWhereInput
    data: XOR<TenantUserUpdateManyMutationInput, TenantUserUncheckedUpdateManyWithoutUserInput>
  }

  export type TenantUserScalarWhereInput = {
    AND?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
    OR?: TenantUserScalarWhereInput[]
    NOT?: TenantUserScalarWhereInput | TenantUserScalarWhereInput[]
    id?: StringFilter<"TenantUser"> | string
    userId?: StringNullableFilter<"TenantUser"> | string | null
    tenantId?: StringFilter<"TenantUser"> | string
    role?: EnumRoleFilter<"TenantUser"> | $Enums.Role
    isActive?: BoolFilter<"TenantUser"> | boolean
    createdAt?: DateTimeFilter<"TenantUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantUser"> | Date | string
  }

  export type TenantUserCreateWithoutTenantInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTenantUsersInput
    tenantOrgUser?: TenantOrgUserCreateNestedManyWithoutTenantUserInput
    documents?: DocumentCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUncheckedCreateWithoutTenantInput = {
    id?: string
    userId?: string | null
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUser?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserCreateOrConnectWithoutTenantInput = {
    where: TenantUserWhereUniqueInput
    create: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput>
  }

  export type TenantUserCreateManyTenantInputEnvelope = {
    data: TenantUserCreateManyTenantInput | TenantUserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type DocumentConfigCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutDocumentConfigInput
  }

  export type DocumentConfigUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutDocumentConfigInput
  }

  export type DocumentConfigCreateOrConnectWithoutTenantInput = {
    where: DocumentConfigWhereUniqueInput
    create: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput>
  }

  export type DocumentConfigCreateManyTenantInputEnvelope = {
    data: DocumentConfigCreateManyTenantInput | DocumentConfigCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig: DocumentConfigCreateNestedOneWithoutDocumentTemplatesInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutTenantInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput>
  }

  export type DocumentTemplateCreateManyTenantInputEnvelope = {
    data: DocumentTemplateCreateManyTenantInput | DocumentTemplateCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PublishedDocumentCreateWithoutCreatedByInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    mtic: MTICCreateNestedOneWithoutPublishedDocumentsInput
    owner: TenantCreateNestedOneWithoutOwnedPublishedDocumentsInput
  }

  export type PublishedDocumentUncheckedCreateWithoutCreatedByInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    ownerId: string
    createdAt?: Date | string
  }

  export type PublishedDocumentCreateOrConnectWithoutCreatedByInput = {
    where: PublishedDocumentWhereUniqueInput
    create: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type PublishedDocumentCreateManyCreatedByInputEnvelope = {
    data: PublishedDocumentCreateManyCreatedByInput | PublishedDocumentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PublishedDocumentCreateWithoutOwnerInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    mtic: MTICCreateNestedOneWithoutPublishedDocumentsInput
    createdBy: TenantCreateNestedOneWithoutCreatedPublishedDocumentsInput
  }

  export type PublishedDocumentUncheckedCreateWithoutOwnerInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
  }

  export type PublishedDocumentCreateOrConnectWithoutOwnerInput = {
    where: PublishedDocumentWhereUniqueInput
    create: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput>
  }

  export type PublishedDocumentCreateManyOwnerInputEnvelope = {
    data: PublishedDocumentCreateManyOwnerInput | PublishedDocumentCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type MTICReaderCreateWithoutTenantInput = {
    id: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogCreateNestedManyWithoutMticReaderInput
  }

  export type MTICReaderUncheckedCreateWithoutTenantInput = {
    id: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogUncheckedCreateNestedManyWithoutMticReaderInput
  }

  export type MTICReaderCreateOrConnectWithoutTenantInput = {
    where: MTICReaderWhereUniqueInput
    create: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput>
  }

  export type MTICReaderCreateManyTenantInputEnvelope = {
    data: MTICReaderCreateManyTenantInput | MTICReaderCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TenantOrgCreateWithoutTenantInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutTenantInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput>
  }

  export type TenantOrgCreateManyTenantInputEnvelope = {
    data: TenantOrgCreateManyTenantInput | TenantOrgCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TenantUserUpsertWithWhereUniqueWithoutTenantInput = {
    where: TenantUserWhereUniqueInput
    update: XOR<TenantUserUpdateWithoutTenantInput, TenantUserUncheckedUpdateWithoutTenantInput>
    create: XOR<TenantUserCreateWithoutTenantInput, TenantUserUncheckedCreateWithoutTenantInput>
  }

  export type TenantUserUpdateWithWhereUniqueWithoutTenantInput = {
    where: TenantUserWhereUniqueInput
    data: XOR<TenantUserUpdateWithoutTenantInput, TenantUserUncheckedUpdateWithoutTenantInput>
  }

  export type TenantUserUpdateManyWithWhereWithoutTenantInput = {
    where: TenantUserScalarWhereInput
    data: XOR<TenantUserUpdateManyMutationInput, TenantUserUncheckedUpdateManyWithoutTenantInput>
  }

  export type DocumentConfigUpsertWithWhereUniqueWithoutTenantInput = {
    where: DocumentConfigWhereUniqueInput
    update: XOR<DocumentConfigUpdateWithoutTenantInput, DocumentConfigUncheckedUpdateWithoutTenantInput>
    create: XOR<DocumentConfigCreateWithoutTenantInput, DocumentConfigUncheckedCreateWithoutTenantInput>
  }

  export type DocumentConfigUpdateWithWhereUniqueWithoutTenantInput = {
    where: DocumentConfigWhereUniqueInput
    data: XOR<DocumentConfigUpdateWithoutTenantInput, DocumentConfigUncheckedUpdateWithoutTenantInput>
  }

  export type DocumentConfigUpdateManyWithWhereWithoutTenantInput = {
    where: DocumentConfigScalarWhereInput
    data: XOR<DocumentConfigUpdateManyMutationInput, DocumentConfigUncheckedUpdateManyWithoutTenantInput>
  }

  export type DocumentConfigScalarWhereInput = {
    AND?: DocumentConfigScalarWhereInput | DocumentConfigScalarWhereInput[]
    OR?: DocumentConfigScalarWhereInput[]
    NOT?: DocumentConfigScalarWhereInput | DocumentConfigScalarWhereInput[]
    id?: StringFilter<"DocumentConfig"> | string
    name?: StringFilter<"DocumentConfig"> | string
    description?: StringFilter<"DocumentConfig"> | string
    fieldConfig?: JsonFilter<"DocumentConfig">
    tenantId?: StringFilter<"DocumentConfig"> | string
    createdAt?: DateTimeFilter<"DocumentConfig"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentConfig"> | Date | string
  }

  export type DocumentTemplateUpsertWithWhereUniqueWithoutTenantInput = {
    where: DocumentTemplateWhereUniqueInput
    update: XOR<DocumentTemplateUpdateWithoutTenantInput, DocumentTemplateUncheckedUpdateWithoutTenantInput>
    create: XOR<DocumentTemplateCreateWithoutTenantInput, DocumentTemplateUncheckedCreateWithoutTenantInput>
  }

  export type DocumentTemplateUpdateWithWhereUniqueWithoutTenantInput = {
    where: DocumentTemplateWhereUniqueInput
    data: XOR<DocumentTemplateUpdateWithoutTenantInput, DocumentTemplateUncheckedUpdateWithoutTenantInput>
  }

  export type DocumentTemplateUpdateManyWithWhereWithoutTenantInput = {
    where: DocumentTemplateScalarWhereInput
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyWithoutTenantInput>
  }

  export type DocumentTemplateScalarWhereInput = {
    AND?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
    OR?: DocumentTemplateScalarWhereInput[]
    NOT?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
    id?: StringFilter<"DocumentTemplate"> | string
    name?: StringFilter<"DocumentTemplate"> | string
    description?: StringFilter<"DocumentTemplate"> | string
    image?: StringNullableFilter<"DocumentTemplate"> | string | null
    documentConfigId?: StringFilter<"DocumentTemplate"> | string
    templateFieldConfig?: JsonFilter<"DocumentTemplate">
    tenantId?: StringFilter<"DocumentTemplate"> | string
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
  }

  export type PublishedDocumentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PublishedDocumentWhereUniqueInput
    update: XOR<PublishedDocumentUpdateWithoutCreatedByInput, PublishedDocumentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PublishedDocumentCreateWithoutCreatedByInput, PublishedDocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type PublishedDocumentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PublishedDocumentWhereUniqueInput
    data: XOR<PublishedDocumentUpdateWithoutCreatedByInput, PublishedDocumentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PublishedDocumentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PublishedDocumentScalarWhereInput
    data: XOR<PublishedDocumentUpdateManyMutationInput, PublishedDocumentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PublishedDocumentScalarWhereInput = {
    AND?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
    OR?: PublishedDocumentScalarWhereInput[]
    NOT?: PublishedDocumentScalarWhereInput | PublishedDocumentScalarWhereInput[]
    id?: StringFilter<"PublishedDocument"> | string
    uid?: StringFilter<"PublishedDocument"> | string
    mticId?: StringFilter<"PublishedDocument"> | string
    documentJson?: JsonFilter<"PublishedDocument">
    createdById?: StringFilter<"PublishedDocument"> | string
    ownerId?: StringFilter<"PublishedDocument"> | string
    createdAt?: DateTimeFilter<"PublishedDocument"> | Date | string
  }

  export type PublishedDocumentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PublishedDocumentWhereUniqueInput
    update: XOR<PublishedDocumentUpdateWithoutOwnerInput, PublishedDocumentUncheckedUpdateWithoutOwnerInput>
    create: XOR<PublishedDocumentCreateWithoutOwnerInput, PublishedDocumentUncheckedCreateWithoutOwnerInput>
  }

  export type PublishedDocumentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PublishedDocumentWhereUniqueInput
    data: XOR<PublishedDocumentUpdateWithoutOwnerInput, PublishedDocumentUncheckedUpdateWithoutOwnerInput>
  }

  export type PublishedDocumentUpdateManyWithWhereWithoutOwnerInput = {
    where: PublishedDocumentScalarWhereInput
    data: XOR<PublishedDocumentUpdateManyMutationInput, PublishedDocumentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type MTICReaderUpsertWithWhereUniqueWithoutTenantInput = {
    where: MTICReaderWhereUniqueInput
    update: XOR<MTICReaderUpdateWithoutTenantInput, MTICReaderUncheckedUpdateWithoutTenantInput>
    create: XOR<MTICReaderCreateWithoutTenantInput, MTICReaderUncheckedCreateWithoutTenantInput>
  }

  export type MTICReaderUpdateWithWhereUniqueWithoutTenantInput = {
    where: MTICReaderWhereUniqueInput
    data: XOR<MTICReaderUpdateWithoutTenantInput, MTICReaderUncheckedUpdateWithoutTenantInput>
  }

  export type MTICReaderUpdateManyWithWhereWithoutTenantInput = {
    where: MTICReaderScalarWhereInput
    data: XOR<MTICReaderUpdateManyMutationInput, MTICReaderUncheckedUpdateManyWithoutTenantInput>
  }

  export type MTICReaderScalarWhereInput = {
    AND?: MTICReaderScalarWhereInput | MTICReaderScalarWhereInput[]
    OR?: MTICReaderScalarWhereInput[]
    NOT?: MTICReaderScalarWhereInput | MTICReaderScalarWhereInput[]
    id?: StringFilter<"MTICReader"> | string
    isActive?: BoolFilter<"MTICReader"> | boolean
    tenantId?: StringNullableFilter<"MTICReader"> | string | null
    createdAt?: DateTimeFilter<"MTICReader"> | Date | string
    updatedAt?: DateTimeFilter<"MTICReader"> | Date | string
  }

  export type TenantOrgUpsertWithWhereUniqueWithoutTenantInput = {
    where: TenantOrgWhereUniqueInput
    update: XOR<TenantOrgUpdateWithoutTenantInput, TenantOrgUncheckedUpdateWithoutTenantInput>
    create: XOR<TenantOrgCreateWithoutTenantInput, TenantOrgUncheckedCreateWithoutTenantInput>
  }

  export type TenantOrgUpdateWithWhereUniqueWithoutTenantInput = {
    where: TenantOrgWhereUniqueInput
    data: XOR<TenantOrgUpdateWithoutTenantInput, TenantOrgUncheckedUpdateWithoutTenantInput>
  }

  export type TenantOrgUpdateManyWithWhereWithoutTenantInput = {
    where: TenantOrgScalarWhereInput
    data: XOR<TenantOrgUpdateManyMutationInput, TenantOrgUncheckedUpdateManyWithoutTenantInput>
  }

  export type TenantOrgScalarWhereInput = {
    AND?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
    OR?: TenantOrgScalarWhereInput[]
    NOT?: TenantOrgScalarWhereInput | TenantOrgScalarWhereInput[]
    id?: StringFilter<"TenantOrg"> | string
    name?: StringFilter<"TenantOrg"> | string
    parentId?: StringNullableFilter<"TenantOrg"> | string | null
    tenantId?: StringFilter<"TenantOrg"> | string
    createdAt?: DateTimeFilter<"TenantOrg"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrg"> | Date | string
  }

  export type UserCreateWithoutTenantUsersInput = {
    id?: string
    uid: string
    name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    defaultTenantUser?: TenantUserCreateNestedOneWithoutDefaultUserInput
  }

  export type UserUncheckedCreateWithoutTenantUsersInput = {
    id?: string
    uid: string
    name: string
    email: string
    defaultTenantUserId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTenantUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantUsersInput, UserUncheckedCreateWithoutTenantUsersInput>
  }

  export type TenantCreateWithoutTenantUsersInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTenantUsersInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTenantUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTenantUsersInput, TenantUncheckedCreateWithoutTenantUsersInput>
  }

  export type TenantOrgUserCreateWithoutTenantUserInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrg: TenantOrgCreateNestedOneWithoutTenantOrgUsersInput
  }

  export type TenantOrgUserUncheckedCreateWithoutTenantUserInput = {
    tenantOrgId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserCreateOrConnectWithoutTenantUserInput = {
    where: TenantOrgUserWhereUniqueInput
    create: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput>
  }

  export type TenantOrgUserCreateManyTenantUserInputEnvelope = {
    data: TenantOrgUserCreateManyTenantUserInput | TenantOrgUserCreateManyTenantUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutCreatedByInput = {
    id?: string
    uid?: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    tenantOrg: TenantOrgCreateNestedOneWithoutDocumentsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentCreateManyCreatedByInputEnvelope = {
    data: DocumentCreateManyCreatedByInput | DocumentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDefaultTenantUserInput = {
    id?: string
    uid: string
    name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDefaultTenantUserInput = {
    id?: string
    uid: string
    name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDefaultTenantUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
  }

  export type UserUpsertWithoutTenantUsersInput = {
    update: XOR<UserUpdateWithoutTenantUsersInput, UserUncheckedUpdateWithoutTenantUsersInput>
    create: XOR<UserCreateWithoutTenantUsersInput, UserUncheckedCreateWithoutTenantUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTenantUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTenantUsersInput, UserUncheckedUpdateWithoutTenantUsersInput>
  }

  export type UserUpdateWithoutTenantUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultTenantUser?: TenantUserUpdateOneWithoutDefaultUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    defaultTenantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUpsertWithoutTenantUsersInput = {
    update: XOR<TenantUpdateWithoutTenantUsersInput, TenantUncheckedUpdateWithoutTenantUsersInput>
    create: XOR<TenantCreateWithoutTenantUsersInput, TenantUncheckedCreateWithoutTenantUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTenantUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTenantUsersInput, TenantUncheckedUpdateWithoutTenantUsersInput>
  }

  export type TenantUpdateWithoutTenantUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTenantUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantOrgUserUpsertWithWhereUniqueWithoutTenantUserInput = {
    where: TenantOrgUserWhereUniqueInput
    update: XOR<TenantOrgUserUpdateWithoutTenantUserInput, TenantOrgUserUncheckedUpdateWithoutTenantUserInput>
    create: XOR<TenantOrgUserCreateWithoutTenantUserInput, TenantOrgUserUncheckedCreateWithoutTenantUserInput>
  }

  export type TenantOrgUserUpdateWithWhereUniqueWithoutTenantUserInput = {
    where: TenantOrgUserWhereUniqueInput
    data: XOR<TenantOrgUserUpdateWithoutTenantUserInput, TenantOrgUserUncheckedUpdateWithoutTenantUserInput>
  }

  export type TenantOrgUserUpdateManyWithWhereWithoutTenantUserInput = {
    where: TenantOrgUserScalarWhereInput
    data: XOR<TenantOrgUserUpdateManyMutationInput, TenantOrgUserUncheckedUpdateManyWithoutTenantUserInput>
  }

  export type TenantOrgUserScalarWhereInput = {
    AND?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
    OR?: TenantOrgUserScalarWhereInput[]
    NOT?: TenantOrgUserScalarWhereInput | TenantOrgUserScalarWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgUser"> | string
    tenantUserId?: StringFilter<"TenantOrgUser"> | string
    permission?: EnumPermissionFilter<"TenantOrgUser"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgUser"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCreatedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    uid?: StringFilter<"Document"> | string
    documentTemplateId?: StringFilter<"Document"> | string
    tenantOrgId?: StringFilter<"Document"> | string
    documentFields?: JsonFilter<"Document">
    createdById?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type UserUpsertWithoutDefaultTenantUserInput = {
    update: XOR<UserUpdateWithoutDefaultTenantUserInput, UserUncheckedUpdateWithoutDefaultTenantUserInput>
    create: XOR<UserCreateWithoutDefaultTenantUserInput, UserUncheckedCreateWithoutDefaultTenantUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDefaultTenantUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDefaultTenantUserInput, UserUncheckedUpdateWithoutDefaultTenantUserInput>
  }

  export type UserUpdateWithoutDefaultTenantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDefaultTenantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantOrgCreateWithoutSubOrgsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutSubOrgsInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutSubOrgsInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutSubOrgsInput, TenantOrgUncheckedCreateWithoutSubOrgsInput>
  }

  export type TenantCreateWithoutTenantOrgsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTenantOrgsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTenantOrgsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTenantOrgsInput, TenantUncheckedCreateWithoutTenantOrgsInput>
  }

  export type TenantOrgCreateWithoutParentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutParentInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput>
  }

  export type TenantOrgCreateManyParentInputEnvelope = {
    data: TenantOrgCreateManyParentInput | TenantOrgCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type TenantOrgUserCreateWithoutTenantOrgInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUser: TenantUserCreateNestedOneWithoutTenantOrgUserInput
  }

  export type TenantOrgUserUncheckedCreateWithoutTenantOrgInput = {
    tenantUserId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserCreateOrConnectWithoutTenantOrgInput = {
    where: TenantOrgUserWhereUniqueInput
    create: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput>
  }

  export type TenantOrgUserCreateManyTenantOrgInputEnvelope = {
    data: TenantOrgUserCreateManyTenantOrgInput | TenantOrgUserCreateManyTenantOrgInput[]
    skipDuplicates?: boolean
  }

  export type TenantOrgDocCreateWithoutTenantOrgInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutTenantOrgDocsInput
  }

  export type TenantOrgDocUncheckedCreateWithoutTenantOrgInput = {
    documentTemplateId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocCreateOrConnectWithoutTenantOrgInput = {
    where: TenantOrgDocWhereUniqueInput
    create: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput>
  }

  export type TenantOrgDocCreateManyTenantOrgInputEnvelope = {
    data: TenantOrgDocCreateManyTenantOrgInput | TenantOrgDocCreateManyTenantOrgInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutTenantOrgInput = {
    id?: string
    uid?: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    createdBy: TenantUserCreateNestedOneWithoutDocumentsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutTenantOrgInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutTenantOrgInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput>
  }

  export type DocumentCreateManyTenantOrgInputEnvelope = {
    data: DocumentCreateManyTenantOrgInput | DocumentCreateManyTenantOrgInput[]
    skipDuplicates?: boolean
  }

  export type TenantOrgUpsertWithoutSubOrgsInput = {
    update: XOR<TenantOrgUpdateWithoutSubOrgsInput, TenantOrgUncheckedUpdateWithoutSubOrgsInput>
    create: XOR<TenantOrgCreateWithoutSubOrgsInput, TenantOrgUncheckedCreateWithoutSubOrgsInput>
    where?: TenantOrgWhereInput
  }

  export type TenantOrgUpdateToOneWithWhereWithoutSubOrgsInput = {
    where?: TenantOrgWhereInput
    data: XOR<TenantOrgUpdateWithoutSubOrgsInput, TenantOrgUncheckedUpdateWithoutSubOrgsInput>
  }

  export type TenantOrgUpdateWithoutSubOrgsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutSubOrgsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantUpsertWithoutTenantOrgsInput = {
    update: XOR<TenantUpdateWithoutTenantOrgsInput, TenantUncheckedUpdateWithoutTenantOrgsInput>
    create: XOR<TenantCreateWithoutTenantOrgsInput, TenantUncheckedCreateWithoutTenantOrgsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTenantOrgsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTenantOrgsInput, TenantUncheckedUpdateWithoutTenantOrgsInput>
  }

  export type TenantUpdateWithoutTenantOrgsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTenantOrgsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantOrgUpsertWithWhereUniqueWithoutParentInput = {
    where: TenantOrgWhereUniqueInput
    update: XOR<TenantOrgUpdateWithoutParentInput, TenantOrgUncheckedUpdateWithoutParentInput>
    create: XOR<TenantOrgCreateWithoutParentInput, TenantOrgUncheckedCreateWithoutParentInput>
  }

  export type TenantOrgUpdateWithWhereUniqueWithoutParentInput = {
    where: TenantOrgWhereUniqueInput
    data: XOR<TenantOrgUpdateWithoutParentInput, TenantOrgUncheckedUpdateWithoutParentInput>
  }

  export type TenantOrgUpdateManyWithWhereWithoutParentInput = {
    where: TenantOrgScalarWhereInput
    data: XOR<TenantOrgUpdateManyMutationInput, TenantOrgUncheckedUpdateManyWithoutParentInput>
  }

  export type TenantOrgUserUpsertWithWhereUniqueWithoutTenantOrgInput = {
    where: TenantOrgUserWhereUniqueInput
    update: XOR<TenantOrgUserUpdateWithoutTenantOrgInput, TenantOrgUserUncheckedUpdateWithoutTenantOrgInput>
    create: XOR<TenantOrgUserCreateWithoutTenantOrgInput, TenantOrgUserUncheckedCreateWithoutTenantOrgInput>
  }

  export type TenantOrgUserUpdateWithWhereUniqueWithoutTenantOrgInput = {
    where: TenantOrgUserWhereUniqueInput
    data: XOR<TenantOrgUserUpdateWithoutTenantOrgInput, TenantOrgUserUncheckedUpdateWithoutTenantOrgInput>
  }

  export type TenantOrgUserUpdateManyWithWhereWithoutTenantOrgInput = {
    where: TenantOrgUserScalarWhereInput
    data: XOR<TenantOrgUserUpdateManyMutationInput, TenantOrgUserUncheckedUpdateManyWithoutTenantOrgInput>
  }

  export type TenantOrgDocUpsertWithWhereUniqueWithoutTenantOrgInput = {
    where: TenantOrgDocWhereUniqueInput
    update: XOR<TenantOrgDocUpdateWithoutTenantOrgInput, TenantOrgDocUncheckedUpdateWithoutTenantOrgInput>
    create: XOR<TenantOrgDocCreateWithoutTenantOrgInput, TenantOrgDocUncheckedCreateWithoutTenantOrgInput>
  }

  export type TenantOrgDocUpdateWithWhereUniqueWithoutTenantOrgInput = {
    where: TenantOrgDocWhereUniqueInput
    data: XOR<TenantOrgDocUpdateWithoutTenantOrgInput, TenantOrgDocUncheckedUpdateWithoutTenantOrgInput>
  }

  export type TenantOrgDocUpdateManyWithWhereWithoutTenantOrgInput = {
    where: TenantOrgDocScalarWhereInput
    data: XOR<TenantOrgDocUpdateManyMutationInput, TenantOrgDocUncheckedUpdateManyWithoutTenantOrgInput>
  }

  export type TenantOrgDocScalarWhereInput = {
    AND?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
    OR?: TenantOrgDocScalarWhereInput[]
    NOT?: TenantOrgDocScalarWhereInput | TenantOrgDocScalarWhereInput[]
    tenantOrgId?: StringFilter<"TenantOrgDoc"> | string
    documentTemplateId?: StringFilter<"TenantOrgDoc"> | string
    permission?: EnumPermissionFilter<"TenantOrgDoc"> | $Enums.Permission
    createdAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
    updatedAt?: DateTimeFilter<"TenantOrgDoc"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutTenantOrgInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutTenantOrgInput, DocumentUncheckedUpdateWithoutTenantOrgInput>
    create: XOR<DocumentCreateWithoutTenantOrgInput, DocumentUncheckedCreateWithoutTenantOrgInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutTenantOrgInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutTenantOrgInput, DocumentUncheckedUpdateWithoutTenantOrgInput>
  }

  export type DocumentUpdateManyWithWhereWithoutTenantOrgInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutTenantOrgInput>
  }

  export type TenantOrgCreateWithoutTenantOrgUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutTenantOrgUsersInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutTenantOrgUsersInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutTenantOrgUsersInput, TenantOrgUncheckedCreateWithoutTenantOrgUsersInput>
  }

  export type TenantUserCreateWithoutTenantOrgUserInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTenantUsersInput
    tenant: TenantCreateNestedOneWithoutTenantUsersInput
    documents?: DocumentCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUncheckedCreateWithoutTenantOrgUserInput = {
    id?: string
    userId?: string | null
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    defaultUser?: UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserCreateOrConnectWithoutTenantOrgUserInput = {
    where: TenantUserWhereUniqueInput
    create: XOR<TenantUserCreateWithoutTenantOrgUserInput, TenantUserUncheckedCreateWithoutTenantOrgUserInput>
  }

  export type TenantOrgUpsertWithoutTenantOrgUsersInput = {
    update: XOR<TenantOrgUpdateWithoutTenantOrgUsersInput, TenantOrgUncheckedUpdateWithoutTenantOrgUsersInput>
    create: XOR<TenantOrgCreateWithoutTenantOrgUsersInput, TenantOrgUncheckedCreateWithoutTenantOrgUsersInput>
    where?: TenantOrgWhereInput
  }

  export type TenantOrgUpdateToOneWithWhereWithoutTenantOrgUsersInput = {
    where?: TenantOrgWhereInput
    data: XOR<TenantOrgUpdateWithoutTenantOrgUsersInput, TenantOrgUncheckedUpdateWithoutTenantOrgUsersInput>
  }

  export type TenantOrgUpdateWithoutTenantOrgUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutTenantOrgUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantUserUpsertWithoutTenantOrgUserInput = {
    update: XOR<TenantUserUpdateWithoutTenantOrgUserInput, TenantUserUncheckedUpdateWithoutTenantOrgUserInput>
    create: XOR<TenantUserCreateWithoutTenantOrgUserInput, TenantUserUncheckedCreateWithoutTenantOrgUserInput>
    where?: TenantUserWhereInput
  }

  export type TenantUserUpdateToOneWithWhereWithoutTenantOrgUserInput = {
    where?: TenantUserWhereInput
    data: XOR<TenantUserUpdateWithoutTenantOrgUserInput, TenantUserUncheckedUpdateWithoutTenantOrgUserInput>
  }

  export type TenantUserUpdateWithoutTenantOrgUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTenantUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantUsersNestedInput
    documents?: DocumentUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateWithoutTenantOrgUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantCreateWithoutDocumentConfigInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutDocumentConfigInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutDocumentConfigInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutDocumentConfigInput, TenantUncheckedCreateWithoutDocumentConfigInput>
  }

  export type DocumentTemplateCreateWithoutDocumentConfigInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutDocumentTemplatesInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutDocumentConfigInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutDocumentTemplateInput
    documents?: DocumentUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutDocumentConfigInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput>
  }

  export type DocumentTemplateCreateManyDocumentConfigInputEnvelope = {
    data: DocumentTemplateCreateManyDocumentConfigInput | DocumentTemplateCreateManyDocumentConfigInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutDocumentConfigInput = {
    update: XOR<TenantUpdateWithoutDocumentConfigInput, TenantUncheckedUpdateWithoutDocumentConfigInput>
    create: XOR<TenantCreateWithoutDocumentConfigInput, TenantUncheckedCreateWithoutDocumentConfigInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutDocumentConfigInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutDocumentConfigInput, TenantUncheckedUpdateWithoutDocumentConfigInput>
  }

  export type TenantUpdateWithoutDocumentConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutDocumentConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type DocumentTemplateUpsertWithWhereUniqueWithoutDocumentConfigInput = {
    where: DocumentTemplateWhereUniqueInput
    update: XOR<DocumentTemplateUpdateWithoutDocumentConfigInput, DocumentTemplateUncheckedUpdateWithoutDocumentConfigInput>
    create: XOR<DocumentTemplateCreateWithoutDocumentConfigInput, DocumentTemplateUncheckedCreateWithoutDocumentConfigInput>
  }

  export type DocumentTemplateUpdateWithWhereUniqueWithoutDocumentConfigInput = {
    where: DocumentTemplateWhereUniqueInput
    data: XOR<DocumentTemplateUpdateWithoutDocumentConfigInput, DocumentTemplateUncheckedUpdateWithoutDocumentConfigInput>
  }

  export type DocumentTemplateUpdateManyWithWhereWithoutDocumentConfigInput = {
    where: DocumentTemplateScalarWhereInput
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyWithoutDocumentConfigInput>
  }

  export type DocumentConfigCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutDocumentConfigInput
  }

  export type DocumentConfigUncheckedCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentConfigCreateOrConnectWithoutDocumentTemplatesInput = {
    where: DocumentConfigWhereUniqueInput
    create: XOR<DocumentConfigCreateWithoutDocumentTemplatesInput, DocumentConfigUncheckedCreateWithoutDocumentTemplatesInput>
  }

  export type TenantCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutDocumentTemplatesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutDocumentTemplatesInput, TenantUncheckedCreateWithoutDocumentTemplatesInput>
  }

  export type TenantOrgDocCreateWithoutDocumentTemplateInput = {
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrg: TenantOrgCreateNestedOneWithoutTenantOrgDocsInput
  }

  export type TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput = {
    tenantOrgId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocCreateOrConnectWithoutDocumentTemplateInput = {
    where: TenantOrgDocWhereUniqueInput
    create: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type TenantOrgDocCreateManyDocumentTemplateInputEnvelope = {
    data: TenantOrgDocCreateManyDocumentTemplateInput | TenantOrgDocCreateManyDocumentTemplateInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutDocumentTemplateInput = {
    id?: string
    uid?: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrg: TenantOrgCreateNestedOneWithoutDocumentsInput
    createdBy: TenantUserCreateNestedOneWithoutDocumentsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutDocumentTemplateInput = {
    id?: string
    uid?: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutDocumentTemplateInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type DocumentCreateManyDocumentTemplateInputEnvelope = {
    data: DocumentCreateManyDocumentTemplateInput | DocumentCreateManyDocumentTemplateInput[]
    skipDuplicates?: boolean
  }

  export type DocumentConfigUpsertWithoutDocumentTemplatesInput = {
    update: XOR<DocumentConfigUpdateWithoutDocumentTemplatesInput, DocumentConfigUncheckedUpdateWithoutDocumentTemplatesInput>
    create: XOR<DocumentConfigCreateWithoutDocumentTemplatesInput, DocumentConfigUncheckedCreateWithoutDocumentTemplatesInput>
    where?: DocumentConfigWhereInput
  }

  export type DocumentConfigUpdateToOneWithWhereWithoutDocumentTemplatesInput = {
    where?: DocumentConfigWhereInput
    data: XOR<DocumentConfigUpdateWithoutDocumentTemplatesInput, DocumentConfigUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type DocumentConfigUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutDocumentConfigNestedInput
  }

  export type DocumentConfigUncheckedUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUpsertWithoutDocumentTemplatesInput = {
    update: XOR<TenantUpdateWithoutDocumentTemplatesInput, TenantUncheckedUpdateWithoutDocumentTemplatesInput>
    create: XOR<TenantCreateWithoutDocumentTemplatesInput, TenantUncheckedCreateWithoutDocumentTemplatesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutDocumentTemplatesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutDocumentTemplatesInput, TenantUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type TenantUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantOrgDocUpsertWithWhereUniqueWithoutDocumentTemplateInput = {
    where: TenantOrgDocWhereUniqueInput
    update: XOR<TenantOrgDocUpdateWithoutDocumentTemplateInput, TenantOrgDocUncheckedUpdateWithoutDocumentTemplateInput>
    create: XOR<TenantOrgDocCreateWithoutDocumentTemplateInput, TenantOrgDocUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type TenantOrgDocUpdateWithWhereUniqueWithoutDocumentTemplateInput = {
    where: TenantOrgDocWhereUniqueInput
    data: XOR<TenantOrgDocUpdateWithoutDocumentTemplateInput, TenantOrgDocUncheckedUpdateWithoutDocumentTemplateInput>
  }

  export type TenantOrgDocUpdateManyWithWhereWithoutDocumentTemplateInput = {
    where: TenantOrgDocScalarWhereInput
    data: XOR<TenantOrgDocUpdateManyMutationInput, TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutDocumentTemplateInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutDocumentTemplateInput, DocumentUncheckedUpdateWithoutDocumentTemplateInput>
    create: XOR<DocumentCreateWithoutDocumentTemplateInput, DocumentUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutDocumentTemplateInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutDocumentTemplateInput, DocumentUncheckedUpdateWithoutDocumentTemplateInput>
  }

  export type DocumentUpdateManyWithWhereWithoutDocumentTemplateInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutDocumentTemplateInput>
  }

  export type TenantOrgCreateWithoutTenantOrgDocsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutTenantOrgDocsInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    documents?: DocumentUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutTenantOrgDocsInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutTenantOrgDocsInput, TenantOrgUncheckedCreateWithoutTenantOrgDocsInput>
  }

  export type DocumentTemplateCreateWithoutTenantOrgDocsInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig: DocumentConfigCreateNestedOneWithoutDocumentTemplatesInput
    tenant: TenantCreateNestedOneWithoutDocumentTemplatesInput
    documents?: DocumentCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutTenantOrgDocsInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutTenantOrgDocsInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedCreateWithoutTenantOrgDocsInput>
  }

  export type TenantOrgUpsertWithoutTenantOrgDocsInput = {
    update: XOR<TenantOrgUpdateWithoutTenantOrgDocsInput, TenantOrgUncheckedUpdateWithoutTenantOrgDocsInput>
    create: XOR<TenantOrgCreateWithoutTenantOrgDocsInput, TenantOrgUncheckedCreateWithoutTenantOrgDocsInput>
    where?: TenantOrgWhereInput
  }

  export type TenantOrgUpdateToOneWithWhereWithoutTenantOrgDocsInput = {
    where?: TenantOrgWhereInput
    data: XOR<TenantOrgUpdateWithoutTenantOrgDocsInput, TenantOrgUncheckedUpdateWithoutTenantOrgDocsInput>
  }

  export type TenantOrgUpdateWithoutTenantOrgDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutTenantOrgDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type DocumentTemplateUpsertWithoutTenantOrgDocsInput = {
    update: XOR<DocumentTemplateUpdateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedUpdateWithoutTenantOrgDocsInput>
    create: XOR<DocumentTemplateCreateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedCreateWithoutTenantOrgDocsInput>
    where?: DocumentTemplateWhereInput
  }

  export type DocumentTemplateUpdateToOneWithWhereWithoutTenantOrgDocsInput = {
    where?: DocumentTemplateWhereInput
    data: XOR<DocumentTemplateUpdateWithoutTenantOrgDocsInput, DocumentTemplateUncheckedUpdateWithoutTenantOrgDocsInput>
  }

  export type DocumentTemplateUpdateWithoutTenantOrgDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    documents?: DocumentUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutTenantOrgDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentConfig: DocumentConfigCreateNestedOneWithoutDocumentTemplatesInput
    tenant: TenantCreateNestedOneWithoutDocumentTemplatesInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutDocumentsInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
  }

  export type TenantOrgCreateWithoutDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TenantOrgCreateNestedOneWithoutSubOrgsInput
    tenant: TenantCreateNestedOneWithoutTenantOrgsInput
    subOrgs?: TenantOrgCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    parentId?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subOrgs?: TenantOrgUncheckedCreateNestedManyWithoutParentInput
    tenantOrgUsers?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantOrgInput
    tenantOrgDocs?: TenantOrgDocUncheckedCreateNestedManyWithoutTenantOrgInput
  }

  export type TenantOrgCreateOrConnectWithoutDocumentsInput = {
    where: TenantOrgWhereUniqueInput
    create: XOR<TenantOrgCreateWithoutDocumentsInput, TenantOrgUncheckedCreateWithoutDocumentsInput>
  }

  export type TenantUserCreateWithoutDocumentsInput = {
    id?: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutTenantUsersInput
    tenant: TenantCreateNestedOneWithoutTenantUsersInput
    tenantOrgUser?: TenantOrgUserCreateNestedManyWithoutTenantUserInput
    defaultUser?: UserCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    userId?: string | null
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantOrgUser?: TenantOrgUserUncheckedCreateNestedManyWithoutTenantUserInput
    defaultUser?: UserUncheckedCreateNestedOneWithoutDefaultTenantUserInput
  }

  export type TenantUserCreateOrConnectWithoutDocumentsInput = {
    where: TenantUserWhereUniqueInput
    create: XOR<TenantUserCreateWithoutDocumentsInput, TenantUserUncheckedCreateWithoutDocumentsInput>
  }

  export type MTICDocumentCreateWithoutDocumentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic?: MTICCreateNestedOneWithoutMticDocumentsInput
    mticLog: MTICLogCreateNestedOneWithoutMticDocumentsInput
  }

  export type MTICDocumentUncheckedCreateWithoutDocumentInput = {
    id?: string
    mticId?: string | null
    mticLogId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentCreateOrConnectWithoutDocumentInput = {
    where: MTICDocumentWhereUniqueInput
    create: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput>
  }

  export type MTICDocumentCreateManyDocumentInputEnvelope = {
    data: MTICDocumentCreateManyDocumentInput | MTICDocumentCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateUpsertWithoutDocumentsInput = {
    update: XOR<DocumentTemplateUpdateWithoutDocumentsInput, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
    create: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    where?: DocumentTemplateWhereInput
  }

  export type DocumentTemplateUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: DocumentTemplateWhereInput
    data: XOR<DocumentTemplateUpdateWithoutDocumentsInput, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTemplateUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type TenantOrgUpsertWithoutDocumentsInput = {
    update: XOR<TenantOrgUpdateWithoutDocumentsInput, TenantOrgUncheckedUpdateWithoutDocumentsInput>
    create: XOR<TenantOrgCreateWithoutDocumentsInput, TenantOrgUncheckedCreateWithoutDocumentsInput>
    where?: TenantOrgWhereInput
  }

  export type TenantOrgUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: TenantOrgWhereInput
    data: XOR<TenantOrgUpdateWithoutDocumentsInput, TenantOrgUncheckedUpdateWithoutDocumentsInput>
  }

  export type TenantOrgUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantUserUpsertWithoutDocumentsInput = {
    update: XOR<TenantUserUpdateWithoutDocumentsInput, TenantUserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<TenantUserCreateWithoutDocumentsInput, TenantUserUncheckedCreateWithoutDocumentsInput>
    where?: TenantUserWhereInput
  }

  export type TenantUserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: TenantUserWhereInput
    data: XOR<TenantUserUpdateWithoutDocumentsInput, TenantUserUncheckedUpdateWithoutDocumentsInput>
  }

  export type TenantUserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTenantUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTenantUsersNestedInput
    tenantOrgUser?: TenantOrgUserUpdateManyWithoutTenantUserNestedInput
    defaultUser?: UserUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUser?: TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput
    defaultUser?: UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type MTICDocumentUpsertWithWhereUniqueWithoutDocumentInput = {
    where: MTICDocumentWhereUniqueInput
    update: XOR<MTICDocumentUpdateWithoutDocumentInput, MTICDocumentUncheckedUpdateWithoutDocumentInput>
    create: XOR<MTICDocumentCreateWithoutDocumentInput, MTICDocumentUncheckedCreateWithoutDocumentInput>
  }

  export type MTICDocumentUpdateWithWhereUniqueWithoutDocumentInput = {
    where: MTICDocumentWhereUniqueInput
    data: XOR<MTICDocumentUpdateWithoutDocumentInput, MTICDocumentUncheckedUpdateWithoutDocumentInput>
  }

  export type MTICDocumentUpdateManyWithWhereWithoutDocumentInput = {
    where: MTICDocumentScalarWhereInput
    data: XOR<MTICDocumentUpdateManyMutationInput, MTICDocumentUncheckedUpdateManyWithoutDocumentInput>
  }

  export type MTICDocumentScalarWhereInput = {
    AND?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
    OR?: MTICDocumentScalarWhereInput[]
    NOT?: MTICDocumentScalarWhereInput | MTICDocumentScalarWhereInput[]
    id?: StringFilter<"MTICDocument"> | string
    mticId?: StringNullableFilter<"MTICDocument"> | string | null
    mticLogId?: StringFilter<"MTICDocument"> | string
    documentId?: StringFilter<"MTICDocument"> | string
    createdAt?: DateTimeFilter<"MTICDocument"> | Date | string
    updatedAt?: DateTimeFilter<"MTICDocument"> | Date | string
  }

  export type MTICLogCreateWithoutMticInput = {
    id?: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mticReader: MTICReaderCreateNestedOneWithoutMticLogsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogUncheckedCreateWithoutMticInput = {
    id?: string
    mticReaderId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogCreateOrConnectWithoutMticInput = {
    where: MTICLogWhereUniqueInput
    create: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput>
  }

  export type MTICLogCreateManyMticInputEnvelope = {
    data: MTICLogCreateManyMticInput | MTICLogCreateManyMticInput[]
    skipDuplicates?: boolean
  }

  export type PublishedDocumentCreateWithoutMticInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    createdBy: TenantCreateNestedOneWithoutCreatedPublishedDocumentsInput
    owner: TenantCreateNestedOneWithoutOwnedPublishedDocumentsInput
  }

  export type PublishedDocumentUncheckedCreateWithoutMticInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    ownerId: string
    createdAt?: Date | string
  }

  export type PublishedDocumentCreateOrConnectWithoutMticInput = {
    where: PublishedDocumentWhereUniqueInput
    create: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput>
  }

  export type PublishedDocumentCreateManyMticInputEnvelope = {
    data: PublishedDocumentCreateManyMticInput | PublishedDocumentCreateManyMticInput[]
    skipDuplicates?: boolean
  }

  export type MTICDocumentCreateWithoutMticInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLog: MTICLogCreateNestedOneWithoutMticDocumentsInput
    document: DocumentCreateNestedOneWithoutMticDocumentsInput
  }

  export type MTICDocumentUncheckedCreateWithoutMticInput = {
    id?: string
    mticLogId: string
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentCreateOrConnectWithoutMticInput = {
    where: MTICDocumentWhereUniqueInput
    create: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput>
  }

  export type MTICDocumentCreateManyMticInputEnvelope = {
    data: MTICDocumentCreateManyMticInput | MTICDocumentCreateManyMticInput[]
    skipDuplicates?: boolean
  }

  export type MTICLogUpsertWithWhereUniqueWithoutMticInput = {
    where: MTICLogWhereUniqueInput
    update: XOR<MTICLogUpdateWithoutMticInput, MTICLogUncheckedUpdateWithoutMticInput>
    create: XOR<MTICLogCreateWithoutMticInput, MTICLogUncheckedCreateWithoutMticInput>
  }

  export type MTICLogUpdateWithWhereUniqueWithoutMticInput = {
    where: MTICLogWhereUniqueInput
    data: XOR<MTICLogUpdateWithoutMticInput, MTICLogUncheckedUpdateWithoutMticInput>
  }

  export type MTICLogUpdateManyWithWhereWithoutMticInput = {
    where: MTICLogScalarWhereInput
    data: XOR<MTICLogUpdateManyMutationInput, MTICLogUncheckedUpdateManyWithoutMticInput>
  }

  export type MTICLogScalarWhereInput = {
    AND?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
    OR?: MTICLogScalarWhereInput[]
    NOT?: MTICLogScalarWhereInput | MTICLogScalarWhereInput[]
    id?: StringFilter<"MTICLog"> | string
    mticId?: StringFilter<"MTICLog"> | string
    mticReaderId?: StringFilter<"MTICLog"> | string
    lat?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    lon?: DecimalFilter<"MTICLog"> | Decimal | DecimalJsLike | number | string
    event?: EnumEventFilter<"MTICLog"> | $Enums.Event
    createdAt?: DateTimeFilter<"MTICLog"> | Date | string
    updatedAt?: DateTimeFilter<"MTICLog"> | Date | string
  }

  export type PublishedDocumentUpsertWithWhereUniqueWithoutMticInput = {
    where: PublishedDocumentWhereUniqueInput
    update: XOR<PublishedDocumentUpdateWithoutMticInput, PublishedDocumentUncheckedUpdateWithoutMticInput>
    create: XOR<PublishedDocumentCreateWithoutMticInput, PublishedDocumentUncheckedCreateWithoutMticInput>
  }

  export type PublishedDocumentUpdateWithWhereUniqueWithoutMticInput = {
    where: PublishedDocumentWhereUniqueInput
    data: XOR<PublishedDocumentUpdateWithoutMticInput, PublishedDocumentUncheckedUpdateWithoutMticInput>
  }

  export type PublishedDocumentUpdateManyWithWhereWithoutMticInput = {
    where: PublishedDocumentScalarWhereInput
    data: XOR<PublishedDocumentUpdateManyMutationInput, PublishedDocumentUncheckedUpdateManyWithoutMticInput>
  }

  export type MTICDocumentUpsertWithWhereUniqueWithoutMticInput = {
    where: MTICDocumentWhereUniqueInput
    update: XOR<MTICDocumentUpdateWithoutMticInput, MTICDocumentUncheckedUpdateWithoutMticInput>
    create: XOR<MTICDocumentCreateWithoutMticInput, MTICDocumentUncheckedCreateWithoutMticInput>
  }

  export type MTICDocumentUpdateWithWhereUniqueWithoutMticInput = {
    where: MTICDocumentWhereUniqueInput
    data: XOR<MTICDocumentUpdateWithoutMticInput, MTICDocumentUncheckedUpdateWithoutMticInput>
  }

  export type MTICDocumentUpdateManyWithWhereWithoutMticInput = {
    where: MTICDocumentScalarWhereInput
    data: XOR<MTICDocumentUpdateManyMutationInput, MTICDocumentUncheckedUpdateManyWithoutMticInput>
  }

  export type MTICCreateWithoutMticLogsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedDocuments?: PublishedDocumentCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticInput
  }

  export type MTICUncheckedCreateWithoutMticLogsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticInput
  }

  export type MTICCreateOrConnectWithoutMticLogsInput = {
    where: MTICWhereUniqueInput
    create: XOR<MTICCreateWithoutMticLogsInput, MTICUncheckedCreateWithoutMticLogsInput>
  }

  export type MTICReaderCreateWithoutMticLogsInput = {
    id: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutMticReadersInput
  }

  export type MTICReaderUncheckedCreateWithoutMticLogsInput = {
    id: string
    isActive?: boolean
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICReaderCreateOrConnectWithoutMticLogsInput = {
    where: MTICReaderWhereUniqueInput
    create: XOR<MTICReaderCreateWithoutMticLogsInput, MTICReaderUncheckedCreateWithoutMticLogsInput>
  }

  export type MTICDocumentCreateWithoutMticLogInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic?: MTICCreateNestedOneWithoutMticDocumentsInput
    document: DocumentCreateNestedOneWithoutMticDocumentsInput
  }

  export type MTICDocumentUncheckedCreateWithoutMticLogInput = {
    id?: string
    mticId?: string | null
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentCreateOrConnectWithoutMticLogInput = {
    where: MTICDocumentWhereUniqueInput
    create: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput>
  }

  export type MTICDocumentCreateManyMticLogInputEnvelope = {
    data: MTICDocumentCreateManyMticLogInput | MTICDocumentCreateManyMticLogInput[]
    skipDuplicates?: boolean
  }

  export type MTICUpsertWithoutMticLogsInput = {
    update: XOR<MTICUpdateWithoutMticLogsInput, MTICUncheckedUpdateWithoutMticLogsInput>
    create: XOR<MTICCreateWithoutMticLogsInput, MTICUncheckedCreateWithoutMticLogsInput>
    where?: MTICWhereInput
  }

  export type MTICUpdateToOneWithWhereWithoutMticLogsInput = {
    where?: MTICWhereInput
    data: XOR<MTICUpdateWithoutMticLogsInput, MTICUncheckedUpdateWithoutMticLogsInput>
  }

  export type MTICUpdateWithoutMticLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedDocuments?: PublishedDocumentUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticNestedInput
  }

  export type MTICUncheckedUpdateWithoutMticLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticNestedInput
  }

  export type MTICReaderUpsertWithoutMticLogsInput = {
    update: XOR<MTICReaderUpdateWithoutMticLogsInput, MTICReaderUncheckedUpdateWithoutMticLogsInput>
    create: XOR<MTICReaderCreateWithoutMticLogsInput, MTICReaderUncheckedCreateWithoutMticLogsInput>
    where?: MTICReaderWhereInput
  }

  export type MTICReaderUpdateToOneWithWhereWithoutMticLogsInput = {
    where?: MTICReaderWhereInput
    data: XOR<MTICReaderUpdateWithoutMticLogsInput, MTICReaderUncheckedUpdateWithoutMticLogsInput>
  }

  export type MTICReaderUpdateWithoutMticLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutMticReadersNestedInput
  }

  export type MTICReaderUncheckedUpdateWithoutMticLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUpsertWithWhereUniqueWithoutMticLogInput = {
    where: MTICDocumentWhereUniqueInput
    update: XOR<MTICDocumentUpdateWithoutMticLogInput, MTICDocumentUncheckedUpdateWithoutMticLogInput>
    create: XOR<MTICDocumentCreateWithoutMticLogInput, MTICDocumentUncheckedCreateWithoutMticLogInput>
  }

  export type MTICDocumentUpdateWithWhereUniqueWithoutMticLogInput = {
    where: MTICDocumentWhereUniqueInput
    data: XOR<MTICDocumentUpdateWithoutMticLogInput, MTICDocumentUncheckedUpdateWithoutMticLogInput>
  }

  export type MTICDocumentUpdateManyWithWhereWithoutMticLogInput = {
    where: MTICDocumentScalarWhereInput
    data: XOR<MTICDocumentUpdateManyMutationInput, MTICDocumentUncheckedUpdateManyWithoutMticLogInput>
  }

  export type TenantCreateWithoutMticReadersInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutMticReadersInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutMticReadersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMticReadersInput, TenantUncheckedCreateWithoutMticReadersInput>
  }

  export type MTICLogCreateWithoutMticReaderInput = {
    id?: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic: MTICCreateNestedOneWithoutMticLogsInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogUncheckedCreateWithoutMticReaderInput = {
    id?: string
    mticId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticLogInput
  }

  export type MTICLogCreateOrConnectWithoutMticReaderInput = {
    where: MTICLogWhereUniqueInput
    create: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput>
  }

  export type MTICLogCreateManyMticReaderInputEnvelope = {
    data: MTICLogCreateManyMticReaderInput | MTICLogCreateManyMticReaderInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutMticReadersInput = {
    update: XOR<TenantUpdateWithoutMticReadersInput, TenantUncheckedUpdateWithoutMticReadersInput>
    create: XOR<TenantCreateWithoutMticReadersInput, TenantUncheckedCreateWithoutMticReadersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMticReadersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMticReadersInput, TenantUncheckedUpdateWithoutMticReadersInput>
  }

  export type TenantUpdateWithoutMticReadersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutMticReadersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type MTICLogUpsertWithWhereUniqueWithoutMticReaderInput = {
    where: MTICLogWhereUniqueInput
    update: XOR<MTICLogUpdateWithoutMticReaderInput, MTICLogUncheckedUpdateWithoutMticReaderInput>
    create: XOR<MTICLogCreateWithoutMticReaderInput, MTICLogUncheckedCreateWithoutMticReaderInput>
  }

  export type MTICLogUpdateWithWhereUniqueWithoutMticReaderInput = {
    where: MTICLogWhereUniqueInput
    data: XOR<MTICLogUpdateWithoutMticReaderInput, MTICLogUncheckedUpdateWithoutMticReaderInput>
  }

  export type MTICLogUpdateManyWithWhereWithoutMticReaderInput = {
    where: MTICLogScalarWhereInput
    data: XOR<MTICLogUpdateManyMutationInput, MTICLogUncheckedUpdateManyWithoutMticReaderInput>
  }

  export type MTICCreateWithoutMticDocumentsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogCreateNestedManyWithoutMticInput
    publishedDocuments?: PublishedDocumentCreateNestedManyWithoutMticInput
  }

  export type MTICUncheckedCreateWithoutMticDocumentsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogUncheckedCreateNestedManyWithoutMticInput
    publishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutMticInput
  }

  export type MTICCreateOrConnectWithoutMticDocumentsInput = {
    where: MTICWhereUniqueInput
    create: XOR<MTICCreateWithoutMticDocumentsInput, MTICUncheckedCreateWithoutMticDocumentsInput>
  }

  export type MTICLogCreateWithoutMticDocumentsInput = {
    id?: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
    mtic: MTICCreateNestedOneWithoutMticLogsInput
    mticReader: MTICReaderCreateNestedOneWithoutMticLogsInput
  }

  export type MTICLogUncheckedCreateWithoutMticDocumentsInput = {
    id?: string
    mticId: string
    mticReaderId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICLogCreateOrConnectWithoutMticDocumentsInput = {
    where: MTICLogWhereUniqueInput
    create: XOR<MTICLogCreateWithoutMticDocumentsInput, MTICLogUncheckedCreateWithoutMticDocumentsInput>
  }

  export type DocumentCreateWithoutMticDocumentsInput = {
    id?: string
    uid?: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    tenantOrg: TenantOrgCreateNestedOneWithoutDocumentsInput
    createdBy: TenantUserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutMticDocumentsInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutMticDocumentsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutMticDocumentsInput, DocumentUncheckedCreateWithoutMticDocumentsInput>
  }

  export type MTICUpsertWithoutMticDocumentsInput = {
    update: XOR<MTICUpdateWithoutMticDocumentsInput, MTICUncheckedUpdateWithoutMticDocumentsInput>
    create: XOR<MTICCreateWithoutMticDocumentsInput, MTICUncheckedCreateWithoutMticDocumentsInput>
    where?: MTICWhereInput
  }

  export type MTICUpdateToOneWithWhereWithoutMticDocumentsInput = {
    where?: MTICWhereInput
    data: XOR<MTICUpdateWithoutMticDocumentsInput, MTICUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type MTICUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUpdateManyWithoutMticNestedInput
    publishedDocuments?: PublishedDocumentUpdateManyWithoutMticNestedInput
  }

  export type MTICUncheckedUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUncheckedUpdateManyWithoutMticNestedInput
    publishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutMticNestedInput
  }

  export type MTICLogUpsertWithoutMticDocumentsInput = {
    update: XOR<MTICLogUpdateWithoutMticDocumentsInput, MTICLogUncheckedUpdateWithoutMticDocumentsInput>
    create: XOR<MTICLogCreateWithoutMticDocumentsInput, MTICLogUncheckedCreateWithoutMticDocumentsInput>
    where?: MTICLogWhereInput
  }

  export type MTICLogUpdateToOneWithWhereWithoutMticDocumentsInput = {
    where?: MTICLogWhereInput
    data: XOR<MTICLogUpdateWithoutMticDocumentsInput, MTICLogUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type MTICLogUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutMticLogsNestedInput
    mticReader?: MTICReaderUpdateOneRequiredWithoutMticLogsNestedInput
  }

  export type MTICLogUncheckedUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    mticReaderId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpsertWithoutMticDocumentsInput = {
    update: XOR<DocumentUpdateWithoutMticDocumentsInput, DocumentUncheckedUpdateWithoutMticDocumentsInput>
    create: XOR<DocumentCreateWithoutMticDocumentsInput, DocumentUncheckedCreateWithoutMticDocumentsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutMticDocumentsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutMticDocumentsInput, DocumentUncheckedUpdateWithoutMticDocumentsInput>
  }

  export type DocumentUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentsNestedInput
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutDocumentsNestedInput
    createdBy?: TenantUserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutMticDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICCreateWithoutPublishedDocumentsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentCreateNestedManyWithoutMticInput
  }

  export type MTICUncheckedCreateWithoutPublishedDocumentsInput = {
    id: string
    uid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mticLogs?: MTICLogUncheckedCreateNestedManyWithoutMticInput
    mticDocuments?: MTICDocumentUncheckedCreateNestedManyWithoutMticInput
  }

  export type MTICCreateOrConnectWithoutPublishedDocumentsInput = {
    where: MTICWhereUniqueInput
    create: XOR<MTICCreateWithoutPublishedDocumentsInput, MTICUncheckedCreateWithoutPublishedDocumentsInput>
  }

  export type TenantCreateWithoutCreatedPublishedDocumentsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    ownedPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCreatedPublishedDocumentsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutOwnerInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCreatedPublishedDocumentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCreatedPublishedDocumentsInput, TenantUncheckedCreateWithoutCreatedPublishedDocumentsInput>
  }

  export type TenantCreateWithoutOwnedPublishedDocumentsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentCreateNestedManyWithoutCreatedByInput
    mticReaders?: MTICReaderCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutOwnedPublishedDocumentsInput = {
    id?: string
    name: string
    website: string
    logo: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantUsers?: TenantUserUncheckedCreateNestedManyWithoutTenantInput
    documentConfig?: DocumentConfigUncheckedCreateNestedManyWithoutTenantInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutTenantInput
    createdPublishedDocuments?: PublishedDocumentUncheckedCreateNestedManyWithoutCreatedByInput
    mticReaders?: MTICReaderUncheckedCreateNestedManyWithoutTenantInput
    tenantOrgs?: TenantOrgUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutOwnedPublishedDocumentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutOwnedPublishedDocumentsInput, TenantUncheckedCreateWithoutOwnedPublishedDocumentsInput>
  }

  export type MTICUpsertWithoutPublishedDocumentsInput = {
    update: XOR<MTICUpdateWithoutPublishedDocumentsInput, MTICUncheckedUpdateWithoutPublishedDocumentsInput>
    create: XOR<MTICCreateWithoutPublishedDocumentsInput, MTICUncheckedCreateWithoutPublishedDocumentsInput>
    where?: MTICWhereInput
  }

  export type MTICUpdateToOneWithWhereWithoutPublishedDocumentsInput = {
    where?: MTICWhereInput
    data: XOR<MTICUpdateWithoutPublishedDocumentsInput, MTICUncheckedUpdateWithoutPublishedDocumentsInput>
  }

  export type MTICUpdateWithoutPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticNestedInput
  }

  export type MTICUncheckedUpdateWithoutPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUncheckedUpdateManyWithoutMticNestedInput
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticNestedInput
  }

  export type TenantUpsertWithoutCreatedPublishedDocumentsInput = {
    update: XOR<TenantUpdateWithoutCreatedPublishedDocumentsInput, TenantUncheckedUpdateWithoutCreatedPublishedDocumentsInput>
    create: XOR<TenantCreateWithoutCreatedPublishedDocumentsInput, TenantUncheckedCreateWithoutCreatedPublishedDocumentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCreatedPublishedDocumentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCreatedPublishedDocumentsInput, TenantUncheckedUpdateWithoutCreatedPublishedDocumentsInput>
  }

  export type TenantUpdateWithoutCreatedPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    ownedPublishedDocuments?: PublishedDocumentUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCreatedPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    ownedPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutOwnerNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantUpsertWithoutOwnedPublishedDocumentsInput = {
    update: XOR<TenantUpdateWithoutOwnedPublishedDocumentsInput, TenantUncheckedUpdateWithoutOwnedPublishedDocumentsInput>
    create: XOR<TenantCreateWithoutOwnedPublishedDocumentsInput, TenantUncheckedCreateWithoutOwnedPublishedDocumentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutOwnedPublishedDocumentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutOwnedPublishedDocumentsInput, TenantUncheckedUpdateWithoutOwnedPublishedDocumentsInput>
  }

  export type TenantUpdateWithoutOwnedPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUpdateManyWithoutCreatedByNestedInput
    mticReaders?: MTICReaderUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutOwnedPublishedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUsers?: TenantUserUncheckedUpdateManyWithoutTenantNestedInput
    documentConfig?: DocumentConfigUncheckedUpdateManyWithoutTenantNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutTenantNestedInput
    createdPublishedDocuments?: PublishedDocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    mticReaders?: MTICReaderUncheckedUpdateManyWithoutTenantNestedInput
    tenantOrgs?: TenantOrgUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantUserCreateManyUserInput = {
    id?: string
    tenantId: string
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutTenantUsersNestedInput
    tenantOrgUser?: TenantOrgUserUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUser?: TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUserCreateManyTenantInput = {
    id?: string
    userId?: string | null
    role: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentConfigCreateManyTenantInput = {
    id?: string
    name: string
    description: string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentTemplateCreateManyTenantInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    documentConfigId: string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublishedDocumentCreateManyCreatedByInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    ownerId: string
    createdAt?: Date | string
  }

  export type PublishedDocumentCreateManyOwnerInput = {
    id: string
    uid: string
    mticId: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
  }

  export type MTICReaderCreateManyTenantInput = {
    id: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgCreateManyTenantInput = {
    id?: string
    name: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTenantUsersNestedInput
    tenantOrgUser?: TenantOrgUserUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgUser?: TenantOrgUserUncheckedUpdateManyWithoutTenantUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    defaultUser?: UserUncheckedUpdateOneWithoutDefaultTenantUserNestedInput
  }

  export type TenantUserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentConfigUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplates?: DocumentTemplateUpdateManyWithoutDocumentConfigNestedInput
  }

  export type DocumentConfigUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutDocumentConfigNestedInput
  }

  export type DocumentConfigUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    fieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTemplateUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentConfig?: DocumentConfigUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    documentConfigId?: StringFieldUpdateOperationsInput | string
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutPublishedDocumentsNestedInput
    owner?: TenantUpdateOneRequiredWithoutOwnedPublishedDocumentsNestedInput
  }

  export type PublishedDocumentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutPublishedDocumentsNestedInput
    createdBy?: TenantUpdateOneRequiredWithoutCreatedPublishedDocumentsNestedInput
  }

  export type PublishedDocumentUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICReaderUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUpdateManyWithoutMticReaderNestedInput
  }

  export type MTICReaderUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLogs?: MTICLogUncheckedUpdateManyWithoutMticReaderNestedInput
  }

  export type MTICReaderUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TenantOrgUpdateOneWithoutSubOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserCreateManyTenantUserInput = {
    tenantOrgId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyCreatedByInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserUpdateWithoutTenantUserInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutTenantOrgUsersNestedInput
  }

  export type TenantOrgUserUncheckedUpdateWithoutTenantUserInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserUncheckedUpdateManyWithoutTenantUserInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentsNestedInput
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutDocumentsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgCreateManyParentInput = {
    id?: string
    name: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUserCreateManyTenantOrgInput = {
    tenantUserId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocCreateManyTenantOrgInput = {
    documentTemplateId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyTenantOrgInput = {
    id?: string
    uid?: string
    documentTemplateId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutTenantOrgsNestedInput
    subOrgs?: TenantOrgUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subOrgs?: TenantOrgUncheckedUpdateManyWithoutParentNestedInput
    tenantOrgUsers?: TenantOrgUserUncheckedUpdateManyWithoutTenantOrgNestedInput
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutTenantOrgNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutTenantOrgNestedInput
  }

  export type TenantOrgUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserUpdateWithoutTenantOrgInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantUser?: TenantUserUpdateOneRequiredWithoutTenantOrgUserNestedInput
  }

  export type TenantOrgUserUncheckedUpdateWithoutTenantOrgInput = {
    tenantUserId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgUserUncheckedUpdateManyWithoutTenantOrgInput = {
    tenantUserId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocUpdateWithoutTenantOrgInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutTenantOrgDocsNestedInput
  }

  export type TenantOrgDocUncheckedUpdateWithoutTenantOrgInput = {
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocUncheckedUpdateManyWithoutTenantOrgInput = {
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutTenantOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentsNestedInput
    createdBy?: TenantUserUpdateOneRequiredWithoutDocumentsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutTenantOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutTenantOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTemplateCreateManyDocumentConfigInput = {
    id?: string
    name: string
    description: string
    image?: string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentTemplateUpdateWithoutDocumentConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutDocumentTemplatesNestedInput
    tenantOrgDocs?: TenantOrgDocUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutDocumentConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrgDocs?: TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutDocumentConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    templateFieldConfig?: JsonNullValueInput | InputJsonValue
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocCreateManyDocumentTemplateInput = {
    tenantOrgId: string
    permission: $Enums.Permission
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyDocumentTemplateInput = {
    id?: string
    uid?: string
    tenantOrgId: string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantOrgDocUpdateWithoutDocumentTemplateInput = {
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutTenantOrgDocsNestedInput
  }

  export type TenantOrgDocUncheckedUpdateWithoutDocumentTemplateInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantOrgDocUncheckedUpdateManyWithoutDocumentTemplateInput = {
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantOrg?: TenantOrgUpdateOneRequiredWithoutDocumentsNestedInput
    createdBy?: TenantUserUpdateOneRequiredWithoutDocumentsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tenantOrgId?: StringFieldUpdateOperationsInput | string
    documentFields?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentCreateManyDocumentInput = {
    id?: string
    mticId?: string | null
    mticLogId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneWithoutMticDocumentsNestedInput
    mticLog?: MTICLogUpdateOneRequiredWithoutMticDocumentsNestedInput
  }

  export type MTICDocumentUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    mticLogId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    mticLogId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICLogCreateManyMticInput = {
    id?: string
    mticReaderId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublishedDocumentCreateManyMticInput = {
    id: string
    uid: string
    documentJson: JsonNullValueInput | InputJsonValue
    createdById: string
    ownerId: string
    createdAt?: Date | string
  }

  export type MTICDocumentCreateManyMticInput = {
    id?: string
    mticLogId: string
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICLogUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticReader?: MTICReaderUpdateOneRequiredWithoutMticLogsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogUncheckedUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticReaderId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogUncheckedUpdateManyWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticReaderId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: TenantUpdateOneRequiredWithoutCreatedPublishedDocumentsNestedInput
    owner?: TenantUpdateOneRequiredWithoutOwnedPublishedDocumentsNestedInput
  }

  export type PublishedDocumentUncheckedUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedDocumentUncheckedUpdateManyWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    documentJson?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticLog?: MTICLogUpdateOneRequiredWithoutMticDocumentsNestedInput
    document?: DocumentUpdateOneRequiredWithoutMticDocumentsNestedInput
  }

  export type MTICDocumentUncheckedUpdateWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticLogId?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUncheckedUpdateManyWithoutMticInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticLogId?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentCreateManyMticLogInput = {
    id?: string
    mticId?: string | null
    documentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICDocumentUpdateWithoutMticLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneWithoutMticDocumentsNestedInput
    document?: DocumentUpdateOneRequiredWithoutMticDocumentsNestedInput
  }

  export type MTICDocumentUncheckedUpdateWithoutMticLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICDocumentUncheckedUpdateManyWithoutMticLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MTICLogCreateManyMticReaderInput = {
    id?: string
    mticId: string
    lat: Decimal | DecimalJsLike | number | string
    lon: Decimal | DecimalJsLike | number | string
    event?: $Enums.Event
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MTICLogUpdateWithoutMticReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mtic?: MTICUpdateOneRequiredWithoutMticLogsNestedInput
    mticDocuments?: MTICDocumentUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogUncheckedUpdateWithoutMticReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mticDocuments?: MTICDocumentUncheckedUpdateManyWithoutMticLogNestedInput
  }

  export type MTICLogUncheckedUpdateManyWithoutMticReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    mticId?: StringFieldUpdateOperationsInput | string
    lat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    event?: EnumEventFieldUpdateOperationsInput | $Enums.Event
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantUserCountOutputTypeDefaultArgs instead
     */
    export type TenantUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantOrgCountOutputTypeDefaultArgs instead
     */
    export type TenantOrgCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantOrgCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentConfigCountOutputTypeDefaultArgs instead
     */
    export type DocumentConfigCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentConfigCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentTemplateCountOutputTypeDefaultArgs instead
     */
    export type DocumentTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentCountOutputTypeDefaultArgs instead
     */
    export type DocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICCountOutputTypeDefaultArgs instead
     */
    export type MTICCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICLogCountOutputTypeDefaultArgs instead
     */
    export type MTICLogCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICLogCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICReaderCountOutputTypeDefaultArgs instead
     */
    export type MTICReaderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICReaderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantUserDefaultArgs instead
     */
    export type TenantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantOrgDefaultArgs instead
     */
    export type TenantOrgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantOrgDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantOrgUserDefaultArgs instead
     */
    export type TenantOrgUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantOrgUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentConfigDefaultArgs instead
     */
    export type DocumentConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentTemplateDefaultArgs instead
     */
    export type DocumentTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantOrgDocDefaultArgs instead
     */
    export type TenantOrgDocArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantOrgDocDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICDefaultArgs instead
     */
    export type MTICArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICLogDefaultArgs instead
     */
    export type MTICLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICReaderDefaultArgs instead
     */
    export type MTICReaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICReaderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MTICDocumentDefaultArgs instead
     */
    export type MTICDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MTICDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublishedDocumentDefaultArgs instead
     */
    export type PublishedDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublishedDocumentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}