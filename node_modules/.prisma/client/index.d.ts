
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Reader
 * 
 */
export type Reader = $Result.DefaultSelection<Prisma.$ReaderPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model TagHistory
 * 
 */
export type TagHistory = $Result.DefaultSelection<Prisma.$TagHistoryPayload>
/**
 * Model Files
 * 
 */
export type Files = $Result.DefaultSelection<Prisma.$FilesPayload>
/**
 * Model Field
 * 
 */
export type Field = $Result.DefaultSelection<Prisma.$FieldPayload>
/**
 * Model TagTemplate
 * 
 */
export type TagTemplate = $Result.DefaultSelection<Prisma.$TagTemplatePayload>
/**
 * Model CompanyLocation
 * 
 */
export type CompanyLocation = $Result.DefaultSelection<Prisma.$CompanyLocationPayload>
/**
 * Model DocumentTemplate
 * 
 */
export type DocumentTemplate = $Result.DefaultSelection<Prisma.$DocumentTemplatePayload>
/**
 * Model TagDocuments
 * 
 */
export type TagDocuments = $Result.DefaultSelection<Prisma.$TagDocumentsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  USER: 'USER',
  GUEST: 'GUEST'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Industry: {
  food: 'food',
  pharmaceutical: 'pharmaceutical',
  automotive: 'automotive',
  luxuryConsumerGoods: 'luxuryConsumerGoods',
  other: 'other'
};

export type Industry = (typeof Industry)[keyof typeof Industry]


export const TagAction: {
  create: 'create',
  search: 'search',
  publish: 'publish'
};

export type TagAction = (typeof TagAction)[keyof typeof TagAction]


export const FieldType: {
  shortText: 'shortText',
  longText: 'longText',
  number: 'number',
  date: 'date',
  image: 'image',
  file: 'file',
  dropdown: 'dropdown',
  boolean: 'boolean',
  email: 'email',
  phoneNumber: 'phoneNumber',
  url: 'url',
  color: 'color',
  location: 'location'
};

export type FieldType = (typeof FieldType)[keyof typeof FieldType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Industry = $Enums.Industry

export const Industry: typeof $Enums.Industry

export type TagAction = $Enums.TagAction

export const TagAction: typeof $Enums.TagAction

export type FieldType = $Enums.FieldType

export const FieldType: typeof $Enums.FieldType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.reader`: Exposes CRUD operations for the **Reader** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Readers
    * const readers = await prisma.reader.findMany()
    * ```
    */
  get reader(): Prisma.ReaderDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.tagHistory`: Exposes CRUD operations for the **TagHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagHistories
    * const tagHistories = await prisma.tagHistory.findMany()
    * ```
    */
  get tagHistory(): Prisma.TagHistoryDelegate<ExtArgs>;

  /**
   * `prisma.files`: Exposes CRUD operations for the **Files** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.files.findMany()
    * ```
    */
  get files(): Prisma.FilesDelegate<ExtArgs>;

  /**
   * `prisma.field`: Exposes CRUD operations for the **Field** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fields
    * const fields = await prisma.field.findMany()
    * ```
    */
  get field(): Prisma.FieldDelegate<ExtArgs>;

  /**
   * `prisma.tagTemplate`: Exposes CRUD operations for the **TagTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagTemplates
    * const tagTemplates = await prisma.tagTemplate.findMany()
    * ```
    */
  get tagTemplate(): Prisma.TagTemplateDelegate<ExtArgs>;

  /**
   * `prisma.companyLocation`: Exposes CRUD operations for the **CompanyLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyLocations
    * const companyLocations = await prisma.companyLocation.findMany()
    * ```
    */
  get companyLocation(): Prisma.CompanyLocationDelegate<ExtArgs>;

  /**
   * `prisma.documentTemplate`: Exposes CRUD operations for the **DocumentTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTemplates
    * const documentTemplates = await prisma.documentTemplate.findMany()
    * ```
    */
  get documentTemplate(): Prisma.DocumentTemplateDelegate<ExtArgs>;

  /**
   * `prisma.tagDocuments`: Exposes CRUD operations for the **TagDocuments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagDocuments
    * const tagDocuments = await prisma.tagDocuments.findMany()
    * ```
    */
  get tagDocuments(): Prisma.TagDocumentsDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Profile: 'Profile',
    Company: 'Company',
    Reader: 'Reader',
    Location: 'Location',
    Tag: 'Tag',
    TagHistory: 'TagHistory',
    Files: 'Files',
    Field: 'Field',
    TagTemplate: 'TagTemplate',
    CompanyLocation: 'CompanyLocation',
    DocumentTemplate: 'DocumentTemplate',
    TagDocuments: 'TagDocuments',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "profile" | "company" | "reader" | "location" | "tag" | "tagHistory" | "files" | "field" | "tagTemplate" | "companyLocation" | "documentTemplate" | "tagDocuments" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Reader: {
        payload: Prisma.$ReaderPayload<ExtArgs>
        fields: Prisma.ReaderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReaderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReaderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          findFirst: {
            args: Prisma.ReaderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReaderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          findMany: {
            args: Prisma.ReaderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>[]
          }
          create: {
            args: Prisma.ReaderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          createMany: {
            args: Prisma.ReaderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReaderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>[]
          }
          delete: {
            args: Prisma.ReaderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          update: {
            args: Prisma.ReaderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          deleteMany: {
            args: Prisma.ReaderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReaderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReaderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReaderPayload>
          }
          aggregate: {
            args: Prisma.ReaderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReader>
          }
          groupBy: {
            args: Prisma.ReaderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReaderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReaderCountArgs<ExtArgs>
            result: $Utils.Optional<ReaderCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      TagHistory: {
        payload: Prisma.$TagHistoryPayload<ExtArgs>
        fields: Prisma.TagHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          findFirst: {
            args: Prisma.TagHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          findMany: {
            args: Prisma.TagHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>[]
          }
          create: {
            args: Prisma.TagHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          createMany: {
            args: Prisma.TagHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>[]
          }
          delete: {
            args: Prisma.TagHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          update: {
            args: Prisma.TagHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          deleteMany: {
            args: Prisma.TagHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagHistoryPayload>
          }
          aggregate: {
            args: Prisma.TagHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagHistory>
          }
          groupBy: {
            args: Prisma.TagHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<TagHistoryCountAggregateOutputType> | number
          }
        }
      }
      Files: {
        payload: Prisma.$FilesPayload<ExtArgs>
        fields: Prisma.FilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FilesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FilesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          findFirst: {
            args: Prisma.FilesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FilesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          findMany: {
            args: Prisma.FilesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>[]
          }
          create: {
            args: Prisma.FilesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          createMany: {
            args: Prisma.FilesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FilesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>[]
          }
          delete: {
            args: Prisma.FilesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          update: {
            args: Prisma.FilesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          deleteMany: {
            args: Prisma.FilesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FilesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FilesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          aggregate: {
            args: Prisma.FilesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFiles>
          }
          groupBy: {
            args: Prisma.FilesGroupByArgs<ExtArgs>
            result: $Utils.Optional<FilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.FilesCountArgs<ExtArgs>
            result: $Utils.Optional<FilesCountAggregateOutputType> | number
          }
        }
      }
      Field: {
        payload: Prisma.$FieldPayload<ExtArgs>
        fields: Prisma.FieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findFirst: {
            args: Prisma.FieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findMany: {
            args: Prisma.FieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          create: {
            args: Prisma.FieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          createMany: {
            args: Prisma.FieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          delete: {
            args: Prisma.FieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          update: {
            args: Prisma.FieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          deleteMany: {
            args: Prisma.FieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          aggregate: {
            args: Prisma.FieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateField>
          }
          groupBy: {
            args: Prisma.FieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldCountArgs<ExtArgs>
            result: $Utils.Optional<FieldCountAggregateOutputType> | number
          }
        }
      }
      TagTemplate: {
        payload: Prisma.$TagTemplatePayload<ExtArgs>
        fields: Prisma.TagTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          findFirst: {
            args: Prisma.TagTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          findMany: {
            args: Prisma.TagTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>[]
          }
          create: {
            args: Prisma.TagTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          createMany: {
            args: Prisma.TagTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>[]
          }
          delete: {
            args: Prisma.TagTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          update: {
            args: Prisma.TagTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          deleteMany: {
            args: Prisma.TagTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagTemplatePayload>
          }
          aggregate: {
            args: Prisma.TagTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagTemplate>
          }
          groupBy: {
            args: Prisma.TagTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TagTemplateCountAggregateOutputType> | number
          }
        }
      }
      CompanyLocation: {
        payload: Prisma.$CompanyLocationPayload<ExtArgs>
        fields: Prisma.CompanyLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          findFirst: {
            args: Prisma.CompanyLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          findMany: {
            args: Prisma.CompanyLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>[]
          }
          create: {
            args: Prisma.CompanyLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          createMany: {
            args: Prisma.CompanyLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>[]
          }
          delete: {
            args: Prisma.CompanyLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          update: {
            args: Prisma.CompanyLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          deleteMany: {
            args: Prisma.CompanyLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyLocationPayload>
          }
          aggregate: {
            args: Prisma.CompanyLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyLocation>
          }
          groupBy: {
            args: Prisma.CompanyLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyLocationCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyLocationCountAggregateOutputType> | number
          }
        }
      }
      DocumentTemplate: {
        payload: Prisma.$DocumentTemplatePayload<ExtArgs>
        fields: Prisma.DocumentTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findFirst: {
            args: Prisma.DocumentTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findMany: {
            args: Prisma.DocumentTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          create: {
            args: Prisma.DocumentTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          createMany: {
            args: Prisma.DocumentTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          delete: {
            args: Prisma.DocumentTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          update: {
            args: Prisma.DocumentTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          aggregate: {
            args: Prisma.DocumentTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentTemplate>
          }
          groupBy: {
            args: Prisma.DocumentTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateCountAggregateOutputType> | number
          }
        }
      }
      TagDocuments: {
        payload: Prisma.$TagDocumentsPayload<ExtArgs>
        fields: Prisma.TagDocumentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagDocumentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagDocumentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          findFirst: {
            args: Prisma.TagDocumentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagDocumentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          findMany: {
            args: Prisma.TagDocumentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>[]
          }
          create: {
            args: Prisma.TagDocumentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          createMany: {
            args: Prisma.TagDocumentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagDocumentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>[]
          }
          delete: {
            args: Prisma.TagDocumentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          update: {
            args: Prisma.TagDocumentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          deleteMany: {
            args: Prisma.TagDocumentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagDocumentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagDocumentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagDocumentsPayload>
          }
          aggregate: {
            args: Prisma.TagDocumentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagDocuments>
          }
          groupBy: {
            args: Prisma.TagDocumentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagDocumentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagDocumentsCountArgs<ExtArgs>
            result: $Utils.Optional<TagDocumentsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    files: number
    tags: number
    tagHistories: number
    tagTemplates: number
    readers: number
    locations: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | ProfileCountOutputTypeCountFilesArgs
    tags?: boolean | ProfileCountOutputTypeCountTagsArgs
    tagHistories?: boolean | ProfileCountOutputTypeCountTagHistoriesArgs
    tagTemplates?: boolean | ProfileCountOutputTypeCountTagTemplatesArgs
    readers?: boolean | ProfileCountOutputTypeCountReadersArgs
    locations?: boolean | ProfileCountOutputTypeCountLocationsArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountTagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagHistoryWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountTagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagTemplateWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountReadersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReaderWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    profiles: number
    companyLocations: number
    documentTemplates: number
    tagTemplates: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | CompanyCountOutputTypeCountProfilesArgs
    companyLocations?: boolean | CompanyCountOutputTypeCountCompanyLocationsArgs
    documentTemplates?: boolean | CompanyCountOutputTypeCountDocumentTemplatesArgs
    tagTemplates?: boolean | CompanyCountOutputTypeCountTagTemplatesArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCompanyLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyLocationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDocumentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountTagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagTemplateWhereInput
  }


  /**
   * Count Type ReaderCountOutputType
   */

  export type ReaderCountOutputType = {
    tags: number
    tagHistories: number
  }

  export type ReaderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ReaderCountOutputTypeCountTagsArgs
    tagHistories?: boolean | ReaderCountOutputTypeCountTagHistoriesArgs
  }

  // Custom InputTypes
  /**
   * ReaderCountOutputType without action
   */
  export type ReaderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReaderCountOutputType
     */
    select?: ReaderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReaderCountOutputType without action
   */
  export type ReaderCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * ReaderCountOutputType without action
   */
  export type ReaderCountOutputTypeCountTagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagHistoryWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    tags: number
    tagHistories: number
    companyLocations: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | LocationCountOutputTypeCountTagsArgs
    tagHistories?: boolean | LocationCountOutputTypeCountTagHistoriesArgs
    companyLocations?: boolean | LocationCountOutputTypeCountCompanyLocationsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountTagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagHistoryWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountCompanyLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyLocationWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    tagHistories: number
    TagDocuments: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagHistories?: boolean | TagCountOutputTypeCountTagHistoriesArgs
    TagDocuments?: boolean | TagCountOutputTypeCountTagDocumentsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountTagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagHistoryWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountTagDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagDocumentsWhereInput
  }


  /**
   * Count Type FilesCountOutputType
   */

  export type FilesCountOutputType = {
    profiles: number
    tagTemplates: number
    documentTemplates: number
  }

  export type FilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | FilesCountOutputTypeCountProfilesArgs
    tagTemplates?: boolean | FilesCountOutputTypeCountTagTemplatesArgs
    documentTemplates?: boolean | FilesCountOutputTypeCountDocumentTemplatesArgs
  }

  // Custom InputTypes
  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FilesCountOutputType
     */
    select?: FilesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeCountTagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagTemplateWhereInput
  }

  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeCountDocumentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
  }


  /**
   * Count Type TagTemplateCountOutputType
   */

  export type TagTemplateCountOutputType = {
    fields: number
    tags: number
  }

  export type TagTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fields?: boolean | TagTemplateCountOutputTypeCountFieldsArgs
    tags?: boolean | TagTemplateCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * TagTemplateCountOutputType without action
   */
  export type TagTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplateCountOutputType
     */
    select?: TagTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagTemplateCountOutputType without action
   */
  export type TagTemplateCountOutputTypeCountFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
  }

  /**
   * TagTemplateCountOutputType without action
   */
  export type TagTemplateCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type CompanyLocationCountOutputType
   */

  export type CompanyLocationCountOutputType = {
    tags: number
  }

  export type CompanyLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | CompanyLocationCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * CompanyLocationCountOutputType without action
   */
  export type CompanyLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocationCountOutputType
     */
    select?: CompanyLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyLocationCountOutputType without action
   */
  export type CompanyLocationCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type DocumentTemplateCountOutputType
   */

  export type DocumentTemplateCountOutputType = {
    tagDocuments: number
  }

  export type DocumentTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagDocuments?: boolean | DocumentTemplateCountOutputTypeCountTagDocumentsArgs
  }

  // Custom InputTypes
  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateCountOutputType
     */
    select?: DocumentTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeCountTagDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagDocumentsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    name: string | null
    pictureId: string | null
    email: string | null
    bio: string | null
    role: $Enums.Role | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    pictureId: string | null
    email: string | null
    bio: string | null
    role: $Enums.Role | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    pictureId: number
    email: number
    bio: number
    role: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    pictureId?: true
    email?: true
    bio?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    pictureId?: true
    email?: true
    bio?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    pictureId?: true
    email?: true
    bio?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    name: string
    pictureId: string | null
    email: string
    bio: string | null
    role: $Enums.Role | null
    companyId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pictureId?: boolean
    email?: boolean
    bio?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean | Profile$pictureArgs<ExtArgs>
    company?: boolean | Profile$companyArgs<ExtArgs>
    files?: boolean | Profile$filesArgs<ExtArgs>
    tags?: boolean | Profile$tagsArgs<ExtArgs>
    tagHistories?: boolean | Profile$tagHistoriesArgs<ExtArgs>
    tagTemplates?: boolean | Profile$tagTemplatesArgs<ExtArgs>
    readers?: boolean | Profile$readersArgs<ExtArgs>
    locations?: boolean | Profile$locationsArgs<ExtArgs>
    user?: boolean | Profile$userArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pictureId?: boolean
    email?: boolean
    bio?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean | Profile$pictureArgs<ExtArgs>
    company?: boolean | Profile$companyArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    name?: boolean
    pictureId?: boolean
    email?: boolean
    bio?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picture?: boolean | Profile$pictureArgs<ExtArgs>
    company?: boolean | Profile$companyArgs<ExtArgs>
    files?: boolean | Profile$filesArgs<ExtArgs>
    tags?: boolean | Profile$tagsArgs<ExtArgs>
    tagHistories?: boolean | Profile$tagHistoriesArgs<ExtArgs>
    tagTemplates?: boolean | Profile$tagTemplatesArgs<ExtArgs>
    readers?: boolean | Profile$readersArgs<ExtArgs>
    locations?: boolean | Profile$locationsArgs<ExtArgs>
    user?: boolean | Profile$userArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picture?: boolean | Profile$pictureArgs<ExtArgs>
    company?: boolean | Profile$companyArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      picture: Prisma.$FilesPayload<ExtArgs> | null
      company: Prisma.$CompanyPayload<ExtArgs> | null
      files: Prisma.$FilesPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
      tagHistories: Prisma.$TagHistoryPayload<ExtArgs>[]
      tagTemplates: Prisma.$TagTemplatePayload<ExtArgs>[]
      readers: Prisma.$ReaderPayload<ExtArgs>[]
      locations: Prisma.$LocationPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      pictureId: string | null
      email: string
      bio: string | null
      role: $Enums.Role | null
      companyId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    picture<T extends Profile$pictureArgs<ExtArgs> = {}>(args?: Subset<T, Profile$pictureArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    company<T extends Profile$companyArgs<ExtArgs> = {}>(args?: Subset<T, Profile$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    files<T extends Profile$filesArgs<ExtArgs> = {}>(args?: Subset<T, Profile$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Profile$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Profile$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    tagHistories<T extends Profile$tagHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Profile$tagHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    tagTemplates<T extends Profile$tagTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Profile$tagTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    readers<T extends Profile$readersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$readersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findMany"> | Null>
    locations<T extends Profile$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Profile$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Profile$userArgs<ExtArgs> = {}>(args?: Subset<T, Profile$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly pictureId: FieldRef<"Profile", 'String'>
    readonly email: FieldRef<"Profile", 'String'>
    readonly bio: FieldRef<"Profile", 'String'>
    readonly role: FieldRef<"Profile", 'Role'>
    readonly companyId: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile.picture
   */
  export type Profile$pictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
  }

  /**
   * Profile.company
   */
  export type Profile$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Profile.files
   */
  export type Profile$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    cursor?: FilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Profile.tags
   */
  export type Profile$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Profile.tagHistories
   */
  export type Profile$tagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    where?: TagHistoryWhereInput
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    cursor?: TagHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * Profile.tagTemplates
   */
  export type Profile$tagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    where?: TagTemplateWhereInput
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    cursor?: TagTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * Profile.readers
   */
  export type Profile$readersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    where?: ReaderWhereInput
    orderBy?: ReaderOrderByWithRelationInput | ReaderOrderByWithRelationInput[]
    cursor?: ReaderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReaderScalarFieldEnum | ReaderScalarFieldEnum[]
  }

  /**
   * Profile.locations
   */
  export type Profile$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Profile.user
   */
  export type Profile$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    industry: $Enums.Industry | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    industry: $Enums.Industry | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    website: number
    industry: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profiles?: boolean | Company$profilesArgs<ExtArgs>
    companyLocations?: boolean | Company$companyLocationsArgs<ExtArgs>
    documentTemplates?: boolean | Company$documentTemplatesArgs<ExtArgs>
    tagTemplates?: boolean | Company$tagTemplatesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    website?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | Company$profilesArgs<ExtArgs>
    companyLocations?: boolean | Company$companyLocationsArgs<ExtArgs>
    documentTemplates?: boolean | Company$documentTemplatesArgs<ExtArgs>
    tagTemplates?: boolean | Company$tagTemplatesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      companyLocations: Prisma.$CompanyLocationPayload<ExtArgs>[]
      documentTemplates: Prisma.$DocumentTemplatePayload<ExtArgs>[]
      tagTemplates: Prisma.$TagTemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      website: string
      industry: $Enums.Industry
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends Company$profilesArgs<ExtArgs> = {}>(args?: Subset<T, Company$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    companyLocations<T extends Company$companyLocationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$companyLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findMany"> | Null>
    documentTemplates<T extends Company$documentTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$documentTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    tagTemplates<T extends Company$tagTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$tagTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly industry: FieldRef<"Company", 'Industry'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.profiles
   */
  export type Company$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Company.companyLocations
   */
  export type Company$companyLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    where?: CompanyLocationWhereInput
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    cursor?: CompanyLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyLocationScalarFieldEnum | CompanyLocationScalarFieldEnum[]
  }

  /**
   * Company.documentTemplates
   */
  export type Company$documentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    cursor?: DocumentTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * Company.tagTemplates
   */
  export type Company$tagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    where?: TagTemplateWhereInput
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    cursor?: TagTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Reader
   */

  export type AggregateReader = {
    _count: ReaderCountAggregateOutputType | null
    _min: ReaderMinAggregateOutputType | null
    _max: ReaderMaxAggregateOutputType | null
  }

  export type ReaderMinAggregateOutputType = {
    address: string | null
    name: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReaderMaxAggregateOutputType = {
    address: string | null
    name: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReaderCountAggregateOutputType = {
    address: number
    name: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReaderMinAggregateInputType = {
    address?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReaderMaxAggregateInputType = {
    address?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReaderCountAggregateInputType = {
    address?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReaderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reader to aggregate.
     */
    where?: ReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Readers to fetch.
     */
    orderBy?: ReaderOrderByWithRelationInput | ReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Readers
    **/
    _count?: true | ReaderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReaderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReaderMaxAggregateInputType
  }

  export type GetReaderAggregateType<T extends ReaderAggregateArgs> = {
        [P in keyof T & keyof AggregateReader]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReader[P]>
      : GetScalarType<T[P], AggregateReader[P]>
  }




  export type ReaderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReaderWhereInput
    orderBy?: ReaderOrderByWithAggregationInput | ReaderOrderByWithAggregationInput[]
    by: ReaderScalarFieldEnum[] | ReaderScalarFieldEnum
    having?: ReaderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReaderCountAggregateInputType | true
    _min?: ReaderMinAggregateInputType
    _max?: ReaderMaxAggregateInputType
  }

  export type ReaderGroupByOutputType = {
    address: string
    name: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: ReaderCountAggregateOutputType | null
    _min: ReaderMinAggregateOutputType | null
    _max: ReaderMaxAggregateOutputType | null
  }

  type GetReaderGroupByPayload<T extends ReaderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReaderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReaderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReaderGroupByOutputType[P]>
            : GetScalarType<T[P], ReaderGroupByOutputType[P]>
        }
      >
    >


  export type ReaderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address?: boolean
    name?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    tags?: boolean | Reader$tagsArgs<ExtArgs>
    tagHistories?: boolean | Reader$tagHistoriesArgs<ExtArgs>
    _count?: boolean | ReaderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reader"]>

  export type ReaderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address?: boolean
    name?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reader"]>

  export type ReaderSelectScalar = {
    address?: boolean
    name?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReaderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    tags?: boolean | Reader$tagsArgs<ExtArgs>
    tagHistories?: boolean | Reader$tagHistoriesArgs<ExtArgs>
    _count?: boolean | ReaderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReaderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $ReaderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reader"
    objects: {
      createdBy: Prisma.$ProfilePayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
      tagHistories: Prisma.$TagHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      address: string
      name: string
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reader"]>
    composites: {}
  }

  type ReaderGetPayload<S extends boolean | null | undefined | ReaderDefaultArgs> = $Result.GetResult<Prisma.$ReaderPayload, S>

  type ReaderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReaderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReaderCountAggregateInputType | true
    }

  export interface ReaderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reader'], meta: { name: 'Reader' } }
    /**
     * Find zero or one Reader that matches the filter.
     * @param {ReaderFindUniqueArgs} args - Arguments to find a Reader
     * @example
     * // Get one Reader
     * const reader = await prisma.reader.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReaderFindUniqueArgs>(args: SelectSubset<T, ReaderFindUniqueArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reader that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReaderFindUniqueOrThrowArgs} args - Arguments to find a Reader
     * @example
     * // Get one Reader
     * const reader = await prisma.reader.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReaderFindUniqueOrThrowArgs>(args: SelectSubset<T, ReaderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reader that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderFindFirstArgs} args - Arguments to find a Reader
     * @example
     * // Get one Reader
     * const reader = await prisma.reader.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReaderFindFirstArgs>(args?: SelectSubset<T, ReaderFindFirstArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reader that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderFindFirstOrThrowArgs} args - Arguments to find a Reader
     * @example
     * // Get one Reader
     * const reader = await prisma.reader.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReaderFindFirstOrThrowArgs>(args?: SelectSubset<T, ReaderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Readers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Readers
     * const readers = await prisma.reader.findMany()
     * 
     * // Get first 10 Readers
     * const readers = await prisma.reader.findMany({ take: 10 })
     * 
     * // Only select the `address`
     * const readerWithAddressOnly = await prisma.reader.findMany({ select: { address: true } })
     * 
     */
    findMany<T extends ReaderFindManyArgs>(args?: SelectSubset<T, ReaderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reader.
     * @param {ReaderCreateArgs} args - Arguments to create a Reader.
     * @example
     * // Create one Reader
     * const Reader = await prisma.reader.create({
     *   data: {
     *     // ... data to create a Reader
     *   }
     * })
     * 
     */
    create<T extends ReaderCreateArgs>(args: SelectSubset<T, ReaderCreateArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Readers.
     * @param {ReaderCreateManyArgs} args - Arguments to create many Readers.
     * @example
     * // Create many Readers
     * const reader = await prisma.reader.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReaderCreateManyArgs>(args?: SelectSubset<T, ReaderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Readers and returns the data saved in the database.
     * @param {ReaderCreateManyAndReturnArgs} args - Arguments to create many Readers.
     * @example
     * // Create many Readers
     * const reader = await prisma.reader.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Readers and only return the `address`
     * const readerWithAddressOnly = await prisma.reader.createManyAndReturn({ 
     *   select: { address: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReaderCreateManyAndReturnArgs>(args?: SelectSubset<T, ReaderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reader.
     * @param {ReaderDeleteArgs} args - Arguments to delete one Reader.
     * @example
     * // Delete one Reader
     * const Reader = await prisma.reader.delete({
     *   where: {
     *     // ... filter to delete one Reader
     *   }
     * })
     * 
     */
    delete<T extends ReaderDeleteArgs>(args: SelectSubset<T, ReaderDeleteArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reader.
     * @param {ReaderUpdateArgs} args - Arguments to update one Reader.
     * @example
     * // Update one Reader
     * const reader = await prisma.reader.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReaderUpdateArgs>(args: SelectSubset<T, ReaderUpdateArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Readers.
     * @param {ReaderDeleteManyArgs} args - Arguments to filter Readers to delete.
     * @example
     * // Delete a few Readers
     * const { count } = await prisma.reader.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReaderDeleteManyArgs>(args?: SelectSubset<T, ReaderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Readers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Readers
     * const reader = await prisma.reader.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReaderUpdateManyArgs>(args: SelectSubset<T, ReaderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reader.
     * @param {ReaderUpsertArgs} args - Arguments to update or create a Reader.
     * @example
     * // Update or create a Reader
     * const reader = await prisma.reader.upsert({
     *   create: {
     *     // ... data to create a Reader
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reader we want to update
     *   }
     * })
     */
    upsert<T extends ReaderUpsertArgs>(args: SelectSubset<T, ReaderUpsertArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Readers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderCountArgs} args - Arguments to filter Readers to count.
     * @example
     * // Count the number of Readers
     * const count = await prisma.reader.count({
     *   where: {
     *     // ... the filter for the Readers we want to count
     *   }
     * })
    **/
    count<T extends ReaderCountArgs>(
      args?: Subset<T, ReaderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReaderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReaderAggregateArgs>(args: Subset<T, ReaderAggregateArgs>): Prisma.PrismaPromise<GetReaderAggregateType<T>>

    /**
     * Group by Reader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReaderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReaderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReaderGroupByArgs['orderBy'] }
        : { orderBy?: ReaderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReaderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReaderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reader model
   */
  readonly fields: ReaderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reader.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReaderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tags<T extends Reader$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Reader$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    tagHistories<T extends Reader$tagHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Reader$tagHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reader model
   */ 
  interface ReaderFieldRefs {
    readonly address: FieldRef<"Reader", 'String'>
    readonly name: FieldRef<"Reader", 'String'>
    readonly createdById: FieldRef<"Reader", 'String'>
    readonly createdAt: FieldRef<"Reader", 'DateTime'>
    readonly updatedAt: FieldRef<"Reader", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reader findUnique
   */
  export type ReaderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter, which Reader to fetch.
     */
    where: ReaderWhereUniqueInput
  }

  /**
   * Reader findUniqueOrThrow
   */
  export type ReaderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter, which Reader to fetch.
     */
    where: ReaderWhereUniqueInput
  }

  /**
   * Reader findFirst
   */
  export type ReaderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter, which Reader to fetch.
     */
    where?: ReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Readers to fetch.
     */
    orderBy?: ReaderOrderByWithRelationInput | ReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Readers.
     */
    cursor?: ReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Readers.
     */
    distinct?: ReaderScalarFieldEnum | ReaderScalarFieldEnum[]
  }

  /**
   * Reader findFirstOrThrow
   */
  export type ReaderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter, which Reader to fetch.
     */
    where?: ReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Readers to fetch.
     */
    orderBy?: ReaderOrderByWithRelationInput | ReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Readers.
     */
    cursor?: ReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Readers.
     */
    distinct?: ReaderScalarFieldEnum | ReaderScalarFieldEnum[]
  }

  /**
   * Reader findMany
   */
  export type ReaderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter, which Readers to fetch.
     */
    where?: ReaderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Readers to fetch.
     */
    orderBy?: ReaderOrderByWithRelationInput | ReaderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Readers.
     */
    cursor?: ReaderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Readers.
     */
    skip?: number
    distinct?: ReaderScalarFieldEnum | ReaderScalarFieldEnum[]
  }

  /**
   * Reader create
   */
  export type ReaderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * The data needed to create a Reader.
     */
    data: XOR<ReaderCreateInput, ReaderUncheckedCreateInput>
  }

  /**
   * Reader createMany
   */
  export type ReaderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Readers.
     */
    data: ReaderCreateManyInput | ReaderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reader createManyAndReturn
   */
  export type ReaderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Readers.
     */
    data: ReaderCreateManyInput | ReaderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reader update
   */
  export type ReaderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * The data needed to update a Reader.
     */
    data: XOR<ReaderUpdateInput, ReaderUncheckedUpdateInput>
    /**
     * Choose, which Reader to update.
     */
    where: ReaderWhereUniqueInput
  }

  /**
   * Reader updateMany
   */
  export type ReaderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Readers.
     */
    data: XOR<ReaderUpdateManyMutationInput, ReaderUncheckedUpdateManyInput>
    /**
     * Filter which Readers to update
     */
    where?: ReaderWhereInput
  }

  /**
   * Reader upsert
   */
  export type ReaderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * The filter to search for the Reader to update in case it exists.
     */
    where: ReaderWhereUniqueInput
    /**
     * In case the Reader found by the `where` argument doesn't exist, create a new Reader with this data.
     */
    create: XOR<ReaderCreateInput, ReaderUncheckedCreateInput>
    /**
     * In case the Reader was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReaderUpdateInput, ReaderUncheckedUpdateInput>
  }

  /**
   * Reader delete
   */
  export type ReaderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    /**
     * Filter which Reader to delete.
     */
    where: ReaderWhereUniqueInput
  }

  /**
   * Reader deleteMany
   */
  export type ReaderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Readers to delete
     */
    where?: ReaderWhereInput
  }

  /**
   * Reader.tags
   */
  export type Reader$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Reader.tagHistories
   */
  export type Reader$tagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    where?: TagHistoryWhereInput
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    cursor?: TagHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * Reader without action
   */
  export type ReaderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    lat: number | null
    lon: number | null
  }

  export type LocationSumAggregateOutputType = {
    lat: number | null
    lon: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    lat: number | null
    lon: number | null
    formattedAddress: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    lat: number | null
    lon: number | null
    formattedAddress: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    lat: number
    lon: number
    formattedAddress: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    lat?: true
    lon?: true
  }

  export type LocationSumAggregateInputType = {
    lat?: true
    lon?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    lat?: true
    lon?: true
    formattedAddress?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    lat?: true
    lon?: true
    formattedAddress?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    lat?: true
    lon?: true
    formattedAddress?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lat?: boolean
    lon?: boolean
    formattedAddress?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    tags?: boolean | Location$tagsArgs<ExtArgs>
    tagHistories?: boolean | Location$tagHistoriesArgs<ExtArgs>
    companyLocations?: boolean | Location$companyLocationsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lat?: boolean
    lon?: boolean
    formattedAddress?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    lat?: boolean
    lon?: boolean
    formattedAddress?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    tags?: boolean | Location$tagsArgs<ExtArgs>
    tagHistories?: boolean | Location$tagHistoriesArgs<ExtArgs>
    companyLocations?: boolean | Location$companyLocationsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      createdBy: Prisma.$ProfilePayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
      tagHistories: Prisma.$TagHistoryPayload<ExtArgs>[]
      companyLocations: Prisma.$CompanyLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lat: number
      lon: number
      formattedAddress: string
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tags<T extends Location$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Location$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    tagHistories<T extends Location$tagHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Location$tagHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    companyLocations<T extends Location$companyLocationsArgs<ExtArgs> = {}>(args?: Subset<T, Location$companyLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly lat: FieldRef<"Location", 'Float'>
    readonly lon: FieldRef<"Location", 'Float'>
    readonly formattedAddress: FieldRef<"Location", 'String'>
    readonly createdById: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.tags
   */
  export type Location$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Location.tagHistories
   */
  export type Location$tagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    where?: TagHistoryWhereInput
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    cursor?: TagHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * Location.companyLocations
   */
  export type Location$companyLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    where?: CompanyLocationWhereInput
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    cursor?: CompanyLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyLocationScalarFieldEnum | CompanyLocationScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    uid: string | null
    tagTemplateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    createdLocationId: string | null
    createdReaderId: string | null
    companyLocationId: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    tagTemplateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    createdLocationId: string | null
    createdReaderId: string | null
    companyLocationId: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    uid: number
    tagTemplateId: number
    createdAt: number
    updatedAt: number
    createdById: number
    createdLocationId: number
    createdReaderId: number
    companyLocationId: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    uid?: true
    tagTemplateId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    createdLocationId?: true
    createdReaderId?: true
    companyLocationId?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    uid?: true
    tagTemplateId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    createdLocationId?: true
    createdReaderId?: true
    companyLocationId?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    uid?: true
    tagTemplateId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    createdLocationId?: true
    createdReaderId?: true
    companyLocationId?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    createdLocationId: string | null
    createdReaderId: string | null
    companyLocationId: string | null
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    tagTemplateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    companyLocationId?: boolean
    tagTemplate?: boolean | TagTemplateDefaultArgs<ExtArgs>
    createdBy?: boolean | Tag$createdByArgs<ExtArgs>
    createdLocation?: boolean | Tag$createdLocationArgs<ExtArgs>
    createdReader?: boolean | Tag$createdReaderArgs<ExtArgs>
    companyLocation?: boolean | Tag$companyLocationArgs<ExtArgs>
    tagHistories?: boolean | Tag$tagHistoriesArgs<ExtArgs>
    TagDocuments?: boolean | Tag$TagDocumentsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    tagTemplateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    companyLocationId?: boolean
    tagTemplate?: boolean | TagTemplateDefaultArgs<ExtArgs>
    createdBy?: boolean | Tag$createdByArgs<ExtArgs>
    createdLocation?: boolean | Tag$createdLocationArgs<ExtArgs>
    createdReader?: boolean | Tag$createdReaderArgs<ExtArgs>
    companyLocation?: boolean | Tag$companyLocationArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    uid?: boolean
    tagTemplateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    companyLocationId?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagTemplate?: boolean | TagTemplateDefaultArgs<ExtArgs>
    createdBy?: boolean | Tag$createdByArgs<ExtArgs>
    createdLocation?: boolean | Tag$createdLocationArgs<ExtArgs>
    createdReader?: boolean | Tag$createdReaderArgs<ExtArgs>
    companyLocation?: boolean | Tag$companyLocationArgs<ExtArgs>
    tagHistories?: boolean | Tag$tagHistoriesArgs<ExtArgs>
    TagDocuments?: boolean | Tag$TagDocumentsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagTemplate?: boolean | TagTemplateDefaultArgs<ExtArgs>
    createdBy?: boolean | Tag$createdByArgs<ExtArgs>
    createdLocation?: boolean | Tag$createdLocationArgs<ExtArgs>
    createdReader?: boolean | Tag$createdReaderArgs<ExtArgs>
    companyLocation?: boolean | Tag$companyLocationArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      tagTemplate: Prisma.$TagTemplatePayload<ExtArgs>
      createdBy: Prisma.$ProfilePayload<ExtArgs> | null
      createdLocation: Prisma.$LocationPayload<ExtArgs> | null
      createdReader: Prisma.$ReaderPayload<ExtArgs> | null
      companyLocation: Prisma.$CompanyLocationPayload<ExtArgs> | null
      tagHistories: Prisma.$TagHistoryPayload<ExtArgs>[]
      TagDocuments: Prisma.$TagDocumentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      tagTemplateId: string
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      createdLocationId: string | null
      createdReaderId: string | null
      companyLocationId: string | null
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tagTemplate<T extends TagTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagTemplateDefaultArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends Tag$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Tag$createdByArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdLocation<T extends Tag$createdLocationArgs<ExtArgs> = {}>(args?: Subset<T, Tag$createdLocationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdReader<T extends Tag$createdReaderArgs<ExtArgs> = {}>(args?: Subset<T, Tag$createdReaderArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    companyLocation<T extends Tag$companyLocationArgs<ExtArgs> = {}>(args?: Subset<T, Tag$companyLocationArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tagHistories<T extends Tag$tagHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Tag$tagHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    TagDocuments<T extends Tag$TagDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$TagDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly uid: FieldRef<"Tag", 'String'>
    readonly tagTemplateId: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
    readonly createdById: FieldRef<"Tag", 'String'>
    readonly createdLocationId: FieldRef<"Tag", 'String'>
    readonly createdReaderId: FieldRef<"Tag", 'String'>
    readonly companyLocationId: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.createdBy
   */
  export type Tag$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * Tag.createdLocation
   */
  export type Tag$createdLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Tag.createdReader
   */
  export type Tag$createdReaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reader
     */
    select?: ReaderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReaderInclude<ExtArgs> | null
    where?: ReaderWhereInput
  }

  /**
   * Tag.companyLocation
   */
  export type Tag$companyLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    where?: CompanyLocationWhereInput
  }

  /**
   * Tag.tagHistories
   */
  export type Tag$tagHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    where?: TagHistoryWhereInput
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    cursor?: TagHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * Tag.TagDocuments
   */
  export type Tag$TagDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    where?: TagDocumentsWhereInput
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    cursor?: TagDocumentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagDocumentsScalarFieldEnum | TagDocumentsScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model TagHistory
   */

  export type AggregateTagHistory = {
    _count: TagHistoryCountAggregateOutputType | null
    _min: TagHistoryMinAggregateOutputType | null
    _max: TagHistoryMaxAggregateOutputType | null
  }

  export type TagHistoryMinAggregateOutputType = {
    id: string | null
    tagId: string | null
    createdById: string | null
    createdAt: Date | null
    createdLocationId: string | null
    createdReaderId: string | null
    action: $Enums.TagAction | null
  }

  export type TagHistoryMaxAggregateOutputType = {
    id: string | null
    tagId: string | null
    createdById: string | null
    createdAt: Date | null
    createdLocationId: string | null
    createdReaderId: string | null
    action: $Enums.TagAction | null
  }

  export type TagHistoryCountAggregateOutputType = {
    id: number
    tagId: number
    createdById: number
    createdAt: number
    createdLocationId: number
    createdReaderId: number
    action: number
    _all: number
  }


  export type TagHistoryMinAggregateInputType = {
    id?: true
    tagId?: true
    createdById?: true
    createdAt?: true
    createdLocationId?: true
    createdReaderId?: true
    action?: true
  }

  export type TagHistoryMaxAggregateInputType = {
    id?: true
    tagId?: true
    createdById?: true
    createdAt?: true
    createdLocationId?: true
    createdReaderId?: true
    action?: true
  }

  export type TagHistoryCountAggregateInputType = {
    id?: true
    tagId?: true
    createdById?: true
    createdAt?: true
    createdLocationId?: true
    createdReaderId?: true
    action?: true
    _all?: true
  }

  export type TagHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagHistory to aggregate.
     */
    where?: TagHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagHistories to fetch.
     */
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagHistories
    **/
    _count?: true | TagHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagHistoryMaxAggregateInputType
  }

  export type GetTagHistoryAggregateType<T extends TagHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTagHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagHistory[P]>
      : GetScalarType<T[P], AggregateTagHistory[P]>
  }




  export type TagHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagHistoryWhereInput
    orderBy?: TagHistoryOrderByWithAggregationInput | TagHistoryOrderByWithAggregationInput[]
    by: TagHistoryScalarFieldEnum[] | TagHistoryScalarFieldEnum
    having?: TagHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagHistoryCountAggregateInputType | true
    _min?: TagHistoryMinAggregateInputType
    _max?: TagHistoryMaxAggregateInputType
  }

  export type TagHistoryGroupByOutputType = {
    id: string
    tagId: string
    createdById: string
    createdAt: Date
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
    _count: TagHistoryCountAggregateOutputType | null
    _min: TagHistoryMinAggregateOutputType | null
    _max: TagHistoryMaxAggregateOutputType | null
  }

  type GetTagHistoryGroupByPayload<T extends TagHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], TagHistoryGroupByOutputType[P]>
        }
      >
    >


  export type TagHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    action?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    createdLocation?: boolean | LocationDefaultArgs<ExtArgs>
    createdReader?: boolean | ReaderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagHistory"]>

  export type TagHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    action?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    createdLocation?: boolean | LocationDefaultArgs<ExtArgs>
    createdReader?: boolean | ReaderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagHistory"]>

  export type TagHistorySelectScalar = {
    id?: boolean
    tagId?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdLocationId?: boolean
    createdReaderId?: boolean
    action?: boolean
  }

  export type TagHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    createdLocation?: boolean | LocationDefaultArgs<ExtArgs>
    createdReader?: boolean | ReaderDefaultArgs<ExtArgs>
  }
  export type TagHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    createdLocation?: boolean | LocationDefaultArgs<ExtArgs>
    createdReader?: boolean | ReaderDefaultArgs<ExtArgs>
  }

  export type $TagHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagHistory"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      createdBy: Prisma.$ProfilePayload<ExtArgs>
      createdLocation: Prisma.$LocationPayload<ExtArgs>
      createdReader: Prisma.$ReaderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagId: string
      createdById: string
      createdAt: Date
      createdLocationId: string
      createdReaderId: string
      action: $Enums.TagAction
    }, ExtArgs["result"]["tagHistory"]>
    composites: {}
  }

  type TagHistoryGetPayload<S extends boolean | null | undefined | TagHistoryDefaultArgs> = $Result.GetResult<Prisma.$TagHistoryPayload, S>

  type TagHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagHistoryCountAggregateInputType | true
    }

  export interface TagHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagHistory'], meta: { name: 'TagHistory' } }
    /**
     * Find zero or one TagHistory that matches the filter.
     * @param {TagHistoryFindUniqueArgs} args - Arguments to find a TagHistory
     * @example
     * // Get one TagHistory
     * const tagHistory = await prisma.tagHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagHistoryFindUniqueArgs>(args: SelectSubset<T, TagHistoryFindUniqueArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagHistoryFindUniqueOrThrowArgs} args - Arguments to find a TagHistory
     * @example
     * // Get one TagHistory
     * const tagHistory = await prisma.tagHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TagHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryFindFirstArgs} args - Arguments to find a TagHistory
     * @example
     * // Get one TagHistory
     * const tagHistory = await prisma.tagHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagHistoryFindFirstArgs>(args?: SelectSubset<T, TagHistoryFindFirstArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryFindFirstOrThrowArgs} args - Arguments to find a TagHistory
     * @example
     * // Get one TagHistory
     * const tagHistory = await prisma.tagHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TagHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagHistories
     * const tagHistories = await prisma.tagHistory.findMany()
     * 
     * // Get first 10 TagHistories
     * const tagHistories = await prisma.tagHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagHistoryWithIdOnly = await prisma.tagHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagHistoryFindManyArgs>(args?: SelectSubset<T, TagHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagHistory.
     * @param {TagHistoryCreateArgs} args - Arguments to create a TagHistory.
     * @example
     * // Create one TagHistory
     * const TagHistory = await prisma.tagHistory.create({
     *   data: {
     *     // ... data to create a TagHistory
     *   }
     * })
     * 
     */
    create<T extends TagHistoryCreateArgs>(args: SelectSubset<T, TagHistoryCreateArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagHistories.
     * @param {TagHistoryCreateManyArgs} args - Arguments to create many TagHistories.
     * @example
     * // Create many TagHistories
     * const tagHistory = await prisma.tagHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagHistoryCreateManyArgs>(args?: SelectSubset<T, TagHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagHistories and returns the data saved in the database.
     * @param {TagHistoryCreateManyAndReturnArgs} args - Arguments to create many TagHistories.
     * @example
     * // Create many TagHistories
     * const tagHistory = await prisma.tagHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagHistories and only return the `id`
     * const tagHistoryWithIdOnly = await prisma.tagHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TagHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagHistory.
     * @param {TagHistoryDeleteArgs} args - Arguments to delete one TagHistory.
     * @example
     * // Delete one TagHistory
     * const TagHistory = await prisma.tagHistory.delete({
     *   where: {
     *     // ... filter to delete one TagHistory
     *   }
     * })
     * 
     */
    delete<T extends TagHistoryDeleteArgs>(args: SelectSubset<T, TagHistoryDeleteArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagHistory.
     * @param {TagHistoryUpdateArgs} args - Arguments to update one TagHistory.
     * @example
     * // Update one TagHistory
     * const tagHistory = await prisma.tagHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagHistoryUpdateArgs>(args: SelectSubset<T, TagHistoryUpdateArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagHistories.
     * @param {TagHistoryDeleteManyArgs} args - Arguments to filter TagHistories to delete.
     * @example
     * // Delete a few TagHistories
     * const { count } = await prisma.tagHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagHistoryDeleteManyArgs>(args?: SelectSubset<T, TagHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagHistories
     * const tagHistory = await prisma.tagHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagHistoryUpdateManyArgs>(args: SelectSubset<T, TagHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagHistory.
     * @param {TagHistoryUpsertArgs} args - Arguments to update or create a TagHistory.
     * @example
     * // Update or create a TagHistory
     * const tagHistory = await prisma.tagHistory.upsert({
     *   create: {
     *     // ... data to create a TagHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagHistory we want to update
     *   }
     * })
     */
    upsert<T extends TagHistoryUpsertArgs>(args: SelectSubset<T, TagHistoryUpsertArgs<ExtArgs>>): Prisma__TagHistoryClient<$Result.GetResult<Prisma.$TagHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryCountArgs} args - Arguments to filter TagHistories to count.
     * @example
     * // Count the number of TagHistories
     * const count = await prisma.tagHistory.count({
     *   where: {
     *     // ... the filter for the TagHistories we want to count
     *   }
     * })
    **/
    count<T extends TagHistoryCountArgs>(
      args?: Subset<T, TagHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagHistoryAggregateArgs>(args: Subset<T, TagHistoryAggregateArgs>): Prisma.PrismaPromise<GetTagHistoryAggregateType<T>>

    /**
     * Group by TagHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagHistoryGroupByArgs['orderBy'] }
        : { orderBy?: TagHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagHistory model
   */
  readonly fields: TagHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdLocation<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdReader<T extends ReaderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReaderDefaultArgs<ExtArgs>>): Prisma__ReaderClient<$Result.GetResult<Prisma.$ReaderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagHistory model
   */ 
  interface TagHistoryFieldRefs {
    readonly id: FieldRef<"TagHistory", 'String'>
    readonly tagId: FieldRef<"TagHistory", 'String'>
    readonly createdById: FieldRef<"TagHistory", 'String'>
    readonly createdAt: FieldRef<"TagHistory", 'DateTime'>
    readonly createdLocationId: FieldRef<"TagHistory", 'String'>
    readonly createdReaderId: FieldRef<"TagHistory", 'String'>
    readonly action: FieldRef<"TagHistory", 'TagAction'>
  }
    

  // Custom InputTypes
  /**
   * TagHistory findUnique
   */
  export type TagHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TagHistory to fetch.
     */
    where: TagHistoryWhereUniqueInput
  }

  /**
   * TagHistory findUniqueOrThrow
   */
  export type TagHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TagHistory to fetch.
     */
    where: TagHistoryWhereUniqueInput
  }

  /**
   * TagHistory findFirst
   */
  export type TagHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TagHistory to fetch.
     */
    where?: TagHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagHistories to fetch.
     */
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagHistories.
     */
    cursor?: TagHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagHistories.
     */
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * TagHistory findFirstOrThrow
   */
  export type TagHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TagHistory to fetch.
     */
    where?: TagHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagHistories to fetch.
     */
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagHistories.
     */
    cursor?: TagHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagHistories.
     */
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * TagHistory findMany
   */
  export type TagHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TagHistories to fetch.
     */
    where?: TagHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagHistories to fetch.
     */
    orderBy?: TagHistoryOrderByWithRelationInput | TagHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagHistories.
     */
    cursor?: TagHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagHistories.
     */
    skip?: number
    distinct?: TagHistoryScalarFieldEnum | TagHistoryScalarFieldEnum[]
  }

  /**
   * TagHistory create
   */
  export type TagHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a TagHistory.
     */
    data: XOR<TagHistoryCreateInput, TagHistoryUncheckedCreateInput>
  }

  /**
   * TagHistory createMany
   */
  export type TagHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagHistories.
     */
    data: TagHistoryCreateManyInput | TagHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagHistory createManyAndReturn
   */
  export type TagHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagHistories.
     */
    data: TagHistoryCreateManyInput | TagHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagHistory update
   */
  export type TagHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a TagHistory.
     */
    data: XOR<TagHistoryUpdateInput, TagHistoryUncheckedUpdateInput>
    /**
     * Choose, which TagHistory to update.
     */
    where: TagHistoryWhereUniqueInput
  }

  /**
   * TagHistory updateMany
   */
  export type TagHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagHistories.
     */
    data: XOR<TagHistoryUpdateManyMutationInput, TagHistoryUncheckedUpdateManyInput>
    /**
     * Filter which TagHistories to update
     */
    where?: TagHistoryWhereInput
  }

  /**
   * TagHistory upsert
   */
  export type TagHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the TagHistory to update in case it exists.
     */
    where: TagHistoryWhereUniqueInput
    /**
     * In case the TagHistory found by the `where` argument doesn't exist, create a new TagHistory with this data.
     */
    create: XOR<TagHistoryCreateInput, TagHistoryUncheckedCreateInput>
    /**
     * In case the TagHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagHistoryUpdateInput, TagHistoryUncheckedUpdateInput>
  }

  /**
   * TagHistory delete
   */
  export type TagHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
    /**
     * Filter which TagHistory to delete.
     */
    where: TagHistoryWhereUniqueInput
  }

  /**
   * TagHistory deleteMany
   */
  export type TagHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagHistories to delete
     */
    where?: TagHistoryWhereInput
  }

  /**
   * TagHistory without action
   */
  export type TagHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagHistory
     */
    select?: TagHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Files
   */

  export type AggregateFiles = {
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  export type FilesAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FilesSumAggregateOutputType = {
    fileSize: number | null
  }

  export type FilesMinAggregateOutputType = {
    id: string | null
    name: string | null
    fileName: string | null
    blobName: string | null
    containerName: string | null
    blobUrl: string | null
    contentType: string | null
    fileSize: number | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FilesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fileName: string | null
    blobName: string | null
    containerName: string | null
    blobUrl: string | null
    contentType: string | null
    fileSize: number | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FilesCountAggregateOutputType = {
    id: number
    name: number
    fileName: number
    blobName: number
    containerName: number
    blobUrl: number
    contentType: number
    fileSize: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FilesAvgAggregateInputType = {
    fileSize?: true
  }

  export type FilesSumAggregateInputType = {
    fileSize?: true
  }

  export type FilesMinAggregateInputType = {
    id?: true
    name?: true
    fileName?: true
    blobName?: true
    containerName?: true
    blobUrl?: true
    contentType?: true
    fileSize?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FilesMaxAggregateInputType = {
    id?: true
    name?: true
    fileName?: true
    blobName?: true
    containerName?: true
    blobUrl?: true
    contentType?: true
    fileSize?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FilesCountAggregateInputType = {
    id?: true
    name?: true
    fileName?: true
    blobName?: true
    containerName?: true
    blobUrl?: true
    contentType?: true
    fileSize?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to aggregate.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilesMaxAggregateInputType
  }

  export type GetFilesAggregateType<T extends FilesAggregateArgs> = {
        [P in keyof T & keyof AggregateFiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiles[P]>
      : GetScalarType<T[P], AggregateFiles[P]>
  }




  export type FilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithAggregationInput | FilesOrderByWithAggregationInput[]
    by: FilesScalarFieldEnum[] | FilesScalarFieldEnum
    having?: FilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilesCountAggregateInputType | true
    _avg?: FilesAvgAggregateInputType
    _sum?: FilesSumAggregateInputType
    _min?: FilesMinAggregateInputType
    _max?: FilesMaxAggregateInputType
  }

  export type FilesGroupByOutputType = {
    id: string
    name: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById: string | null
    createdAt: Date
    updatedAt: Date
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  type GetFilesGroupByPayload<T extends FilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilesGroupByOutputType[P]>
            : GetScalarType<T[P], FilesGroupByOutputType[P]>
        }
      >
    >


  export type FilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fileName?: boolean
    blobName?: boolean
    containerName?: boolean
    blobUrl?: boolean
    contentType?: boolean
    fileSize?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | Files$createdByArgs<ExtArgs>
    profiles?: boolean | Files$profilesArgs<ExtArgs>
    tagTemplates?: boolean | Files$tagTemplatesArgs<ExtArgs>
    documentTemplates?: boolean | Files$documentTemplatesArgs<ExtArgs>
    _count?: boolean | FilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["files"]>

  export type FilesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fileName?: boolean
    blobName?: boolean
    containerName?: boolean
    blobUrl?: boolean
    contentType?: boolean
    fileSize?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | Files$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["files"]>

  export type FilesSelectScalar = {
    id?: boolean
    name?: boolean
    fileName?: boolean
    blobName?: boolean
    containerName?: boolean
    blobUrl?: boolean
    contentType?: boolean
    fileSize?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Files$createdByArgs<ExtArgs>
    profiles?: boolean | Files$profilesArgs<ExtArgs>
    tagTemplates?: boolean | Files$tagTemplatesArgs<ExtArgs>
    documentTemplates?: boolean | Files$documentTemplatesArgs<ExtArgs>
    _count?: boolean | FilesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FilesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Files$createdByArgs<ExtArgs>
  }

  export type $FilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Files"
    objects: {
      createdBy: Prisma.$ProfilePayload<ExtArgs> | null
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      tagTemplates: Prisma.$TagTemplatePayload<ExtArgs>[]
      documentTemplates: Prisma.$DocumentTemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      fileName: string
      blobName: string
      containerName: string
      blobUrl: string
      contentType: string
      fileSize: number
      createdById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["files"]>
    composites: {}
  }

  type FilesGetPayload<S extends boolean | null | undefined | FilesDefaultArgs> = $Result.GetResult<Prisma.$FilesPayload, S>

  type FilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FilesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FilesCountAggregateInputType | true
    }

  export interface FilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Files'], meta: { name: 'Files' } }
    /**
     * Find zero or one Files that matches the filter.
     * @param {FilesFindUniqueArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FilesFindUniqueArgs>(args: SelectSubset<T, FilesFindUniqueArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Files that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FilesFindUniqueOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FilesFindUniqueOrThrowArgs>(args: SelectSubset<T, FilesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindFirstArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FilesFindFirstArgs>(args?: SelectSubset<T, FilesFindFirstArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Files that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindFirstOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FilesFindFirstOrThrowArgs>(args?: SelectSubset<T, FilesFindFirstOrThrowArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.files.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.files.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filesWithIdOnly = await prisma.files.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FilesFindManyArgs>(args?: SelectSubset<T, FilesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Files.
     * @param {FilesCreateArgs} args - Arguments to create a Files.
     * @example
     * // Create one Files
     * const Files = await prisma.files.create({
     *   data: {
     *     // ... data to create a Files
     *   }
     * })
     * 
     */
    create<T extends FilesCreateArgs>(args: SelectSubset<T, FilesCreateArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Files.
     * @param {FilesCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const files = await prisma.files.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FilesCreateManyArgs>(args?: SelectSubset<T, FilesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FilesCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const files = await prisma.files.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const filesWithIdOnly = await prisma.files.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FilesCreateManyAndReturnArgs>(args?: SelectSubset<T, FilesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Files.
     * @param {FilesDeleteArgs} args - Arguments to delete one Files.
     * @example
     * // Delete one Files
     * const Files = await prisma.files.delete({
     *   where: {
     *     // ... filter to delete one Files
     *   }
     * })
     * 
     */
    delete<T extends FilesDeleteArgs>(args: SelectSubset<T, FilesDeleteArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Files.
     * @param {FilesUpdateArgs} args - Arguments to update one Files.
     * @example
     * // Update one Files
     * const files = await prisma.files.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FilesUpdateArgs>(args: SelectSubset<T, FilesUpdateArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FilesDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.files.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FilesDeleteManyArgs>(args?: SelectSubset<T, FilesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const files = await prisma.files.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FilesUpdateManyArgs>(args: SelectSubset<T, FilesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Files.
     * @param {FilesUpsertArgs} args - Arguments to update or create a Files.
     * @example
     * // Update or create a Files
     * const files = await prisma.files.upsert({
     *   create: {
     *     // ... data to create a Files
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Files we want to update
     *   }
     * })
     */
    upsert<T extends FilesUpsertArgs>(args: SelectSubset<T, FilesUpsertArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.files.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FilesCountArgs>(
      args?: Subset<T, FilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilesAggregateArgs>(args: Subset<T, FilesAggregateArgs>): Prisma.PrismaPromise<GetFilesAggregateType<T>>

    /**
     * Group by Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilesGroupByArgs['orderBy'] }
        : { orderBy?: FilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Files model
   */
  readonly fields: FilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Files.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Files$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Files$createdByArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    profiles<T extends Files$profilesArgs<ExtArgs> = {}>(args?: Subset<T, Files$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    tagTemplates<T extends Files$tagTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Files$tagTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    documentTemplates<T extends Files$documentTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Files$documentTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Files model
   */ 
  interface FilesFieldRefs {
    readonly id: FieldRef<"Files", 'String'>
    readonly name: FieldRef<"Files", 'String'>
    readonly fileName: FieldRef<"Files", 'String'>
    readonly blobName: FieldRef<"Files", 'String'>
    readonly containerName: FieldRef<"Files", 'String'>
    readonly blobUrl: FieldRef<"Files", 'String'>
    readonly contentType: FieldRef<"Files", 'String'>
    readonly fileSize: FieldRef<"Files", 'Int'>
    readonly createdById: FieldRef<"Files", 'String'>
    readonly createdAt: FieldRef<"Files", 'DateTime'>
    readonly updatedAt: FieldRef<"Files", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Files findUnique
   */
  export type FilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files findUniqueOrThrow
   */
  export type FilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files findFirst
   */
  export type FilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files findFirstOrThrow
   */
  export type FilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files findMany
   */
  export type FilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files create
   */
  export type FilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The data needed to create a Files.
     */
    data: XOR<FilesCreateInput, FilesUncheckedCreateInput>
  }

  /**
   * Files createMany
   */
  export type FilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FilesCreateManyInput | FilesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Files createManyAndReturn
   */
  export type FilesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FilesCreateManyInput | FilesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Files update
   */
  export type FilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The data needed to update a Files.
     */
    data: XOR<FilesUpdateInput, FilesUncheckedUpdateInput>
    /**
     * Choose, which Files to update.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files updateMany
   */
  export type FilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FilesWhereInput
  }

  /**
   * Files upsert
   */
  export type FilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The filter to search for the Files to update in case it exists.
     */
    where: FilesWhereUniqueInput
    /**
     * In case the Files found by the `where` argument doesn't exist, create a new Files with this data.
     */
    create: XOR<FilesCreateInput, FilesUncheckedCreateInput>
    /**
     * In case the Files was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FilesUpdateInput, FilesUncheckedUpdateInput>
  }

  /**
   * Files delete
   */
  export type FilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter which Files to delete.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files deleteMany
   */
  export type FilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FilesWhereInput
  }

  /**
   * Files.createdBy
   */
  export type Files$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * Files.profiles
   */
  export type Files$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Files.tagTemplates
   */
  export type Files$tagTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    where?: TagTemplateWhereInput
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    cursor?: TagTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * Files.documentTemplates
   */
  export type Files$documentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    cursor?: DocumentTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * Files without action
   */
  export type FilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
  }


  /**
   * Model Field
   */

  export type AggregateField = {
    _count: FieldCountAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  export type FieldMinAggregateOutputType = {
    id: string | null
    label: string | null
    type: $Enums.FieldType | null
    createdAt: Date | null
    updatedAt: Date | null
    tagTemplateId: string | null
    documentTemplateId: string | null
  }

  export type FieldMaxAggregateOutputType = {
    id: string | null
    label: string | null
    type: $Enums.FieldType | null
    createdAt: Date | null
    updatedAt: Date | null
    tagTemplateId: string | null
    documentTemplateId: string | null
  }

  export type FieldCountAggregateOutputType = {
    id: number
    label: number
    type: number
    value: number
    createdAt: number
    updatedAt: number
    tagTemplateId: number
    documentTemplateId: number
    _all: number
  }


  export type FieldMinAggregateInputType = {
    id?: true
    label?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    tagTemplateId?: true
    documentTemplateId?: true
  }

  export type FieldMaxAggregateInputType = {
    id?: true
    label?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    tagTemplateId?: true
    documentTemplateId?: true
  }

  export type FieldCountAggregateInputType = {
    id?: true
    label?: true
    type?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    tagTemplateId?: true
    documentTemplateId?: true
    _all?: true
  }

  export type FieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Field to aggregate.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fields
    **/
    _count?: true | FieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldMaxAggregateInputType
  }

  export type GetFieldAggregateType<T extends FieldAggregateArgs> = {
        [P in keyof T & keyof AggregateField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateField[P]>
      : GetScalarType<T[P], AggregateField[P]>
  }




  export type FieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithAggregationInput | FieldOrderByWithAggregationInput[]
    by: FieldScalarFieldEnum[] | FieldScalarFieldEnum
    having?: FieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldCountAggregateInputType | true
    _min?: FieldMinAggregateInputType
    _max?: FieldMaxAggregateInputType
  }

  export type FieldGroupByOutputType = {
    id: string
    label: string
    type: $Enums.FieldType
    value: JsonValue | null
    createdAt: Date
    updatedAt: Date
    tagTemplateId: string | null
    documentTemplateId: string | null
    _count: FieldCountAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  type GetFieldGroupByPayload<T extends FieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldGroupByOutputType[P]>
            : GetScalarType<T[P], FieldGroupByOutputType[P]>
        }
      >
    >


  export type FieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagTemplateId?: boolean
    documentTemplateId?: boolean
    tagTemplate?: boolean | Field$tagTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagTemplateId?: boolean
    documentTemplateId?: boolean
    tagTemplate?: boolean | Field$tagTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectScalar = {
    id?: boolean
    label?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagTemplateId?: boolean
    documentTemplateId?: boolean
  }

  export type FieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagTemplate?: boolean | Field$tagTemplateArgs<ExtArgs>
  }
  export type FieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tagTemplate?: boolean | Field$tagTemplateArgs<ExtArgs>
  }

  export type $FieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Field"
    objects: {
      tagTemplate: Prisma.$TagTemplatePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      type: $Enums.FieldType
      value: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      tagTemplateId: string | null
      documentTemplateId: string | null
    }, ExtArgs["result"]["field"]>
    composites: {}
  }

  type FieldGetPayload<S extends boolean | null | undefined | FieldDefaultArgs> = $Result.GetResult<Prisma.$FieldPayload, S>

  type FieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FieldCountAggregateInputType | true
    }

  export interface FieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Field'], meta: { name: 'Field' } }
    /**
     * Find zero or one Field that matches the filter.
     * @param {FieldFindUniqueArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldFindUniqueArgs>(args: SelectSubset<T, FieldFindUniqueArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Field that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FieldFindUniqueOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Field that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldFindFirstArgs>(args?: SelectSubset<T, FieldFindFirstArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Field that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fields
     * const fields = await prisma.field.findMany()
     * 
     * // Get first 10 Fields
     * const fields = await prisma.field.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldWithIdOnly = await prisma.field.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldFindManyArgs>(args?: SelectSubset<T, FieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Field.
     * @param {FieldCreateArgs} args - Arguments to create a Field.
     * @example
     * // Create one Field
     * const Field = await prisma.field.create({
     *   data: {
     *     // ... data to create a Field
     *   }
     * })
     * 
     */
    create<T extends FieldCreateArgs>(args: SelectSubset<T, FieldCreateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fields.
     * @param {FieldCreateManyArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldCreateManyArgs>(args?: SelectSubset<T, FieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fields and returns the data saved in the database.
     * @param {FieldCreateManyAndReturnArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fields and only return the `id`
     * const fieldWithIdOnly = await prisma.field.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Field.
     * @param {FieldDeleteArgs} args - Arguments to delete one Field.
     * @example
     * // Delete one Field
     * const Field = await prisma.field.delete({
     *   where: {
     *     // ... filter to delete one Field
     *   }
     * })
     * 
     */
    delete<T extends FieldDeleteArgs>(args: SelectSubset<T, FieldDeleteArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Field.
     * @param {FieldUpdateArgs} args - Arguments to update one Field.
     * @example
     * // Update one Field
     * const field = await prisma.field.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldUpdateArgs>(args: SelectSubset<T, FieldUpdateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fields.
     * @param {FieldDeleteManyArgs} args - Arguments to filter Fields to delete.
     * @example
     * // Delete a few Fields
     * const { count } = await prisma.field.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldDeleteManyArgs>(args?: SelectSubset<T, FieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fields
     * const field = await prisma.field.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldUpdateManyArgs>(args: SelectSubset<T, FieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Field.
     * @param {FieldUpsertArgs} args - Arguments to update or create a Field.
     * @example
     * // Update or create a Field
     * const field = await prisma.field.upsert({
     *   create: {
     *     // ... data to create a Field
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Field we want to update
     *   }
     * })
     */
    upsert<T extends FieldUpsertArgs>(args: SelectSubset<T, FieldUpsertArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldCountArgs} args - Arguments to filter Fields to count.
     * @example
     * // Count the number of Fields
     * const count = await prisma.field.count({
     *   where: {
     *     // ... the filter for the Fields we want to count
     *   }
     * })
    **/
    count<T extends FieldCountArgs>(
      args?: Subset<T, FieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldAggregateArgs>(args: Subset<T, FieldAggregateArgs>): Prisma.PrismaPromise<GetFieldAggregateType<T>>

    /**
     * Group by Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldGroupByArgs['orderBy'] }
        : { orderBy?: FieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Field model
   */
  readonly fields: FieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Field.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tagTemplate<T extends Field$tagTemplateArgs<ExtArgs> = {}>(args?: Subset<T, Field$tagTemplateArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Field model
   */ 
  interface FieldFieldRefs {
    readonly id: FieldRef<"Field", 'String'>
    readonly label: FieldRef<"Field", 'String'>
    readonly type: FieldRef<"Field", 'FieldType'>
    readonly value: FieldRef<"Field", 'Json'>
    readonly createdAt: FieldRef<"Field", 'DateTime'>
    readonly updatedAt: FieldRef<"Field", 'DateTime'>
    readonly tagTemplateId: FieldRef<"Field", 'String'>
    readonly documentTemplateId: FieldRef<"Field", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Field findUnique
   */
  export type FieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findUniqueOrThrow
   */
  export type FieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findFirst
   */
  export type FieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findFirstOrThrow
   */
  export type FieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findMany
   */
  export type FieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Fields to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field create
   */
  export type FieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to create a Field.
     */
    data: XOR<FieldCreateInput, FieldUncheckedCreateInput>
  }

  /**
   * Field createMany
   */
  export type FieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Field createManyAndReturn
   */
  export type FieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Field update
   */
  export type FieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to update a Field.
     */
    data: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
    /**
     * Choose, which Field to update.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field updateMany
   */
  export type FieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fields.
     */
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyInput>
    /**
     * Filter which Fields to update
     */
    where?: FieldWhereInput
  }

  /**
   * Field upsert
   */
  export type FieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The filter to search for the Field to update in case it exists.
     */
    where: FieldWhereUniqueInput
    /**
     * In case the Field found by the `where` argument doesn't exist, create a new Field with this data.
     */
    create: XOR<FieldCreateInput, FieldUncheckedCreateInput>
    /**
     * In case the Field was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
  }

  /**
   * Field delete
   */
  export type FieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter which Field to delete.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field deleteMany
   */
  export type FieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fields to delete
     */
    where?: FieldWhereInput
  }

  /**
   * Field.tagTemplate
   */
  export type Field$tagTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    where?: TagTemplateWhereInput
  }

  /**
   * Field without action
   */
  export type FieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
  }


  /**
   * Model TagTemplate
   */

  export type AggregateTagTemplate = {
    _count: TagTemplateCountAggregateOutputType | null
    _min: TagTemplateMinAggregateOutputType | null
    _max: TagTemplateMaxAggregateOutputType | null
  }

  export type TagTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    imageId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
  }

  export type TagTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    imageId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
  }

  export type TagTemplateCountAggregateOutputType = {
    id: number
    name: number
    imageId: number
    createdById: number
    createdAt: number
    updatedAt: number
    companyId: number
    _all: number
  }


  export type TagTemplateMinAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
  }

  export type TagTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
  }

  export type TagTemplateCountAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    _all?: true
  }

  export type TagTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagTemplate to aggregate.
     */
    where?: TagTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTemplates to fetch.
     */
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagTemplates
    **/
    _count?: true | TagTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagTemplateMaxAggregateInputType
  }

  export type GetTagTemplateAggregateType<T extends TagTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTagTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagTemplate[P]>
      : GetScalarType<T[P], AggregateTagTemplate[P]>
  }




  export type TagTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagTemplateWhereInput
    orderBy?: TagTemplateOrderByWithAggregationInput | TagTemplateOrderByWithAggregationInput[]
    by: TagTemplateScalarFieldEnum[] | TagTemplateScalarFieldEnum
    having?: TagTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagTemplateCountAggregateInputType | true
    _min?: TagTemplateMinAggregateInputType
    _max?: TagTemplateMaxAggregateInputType
  }

  export type TagTemplateGroupByOutputType = {
    id: string
    name: string
    imageId: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    companyId: string | null
    _count: TagTemplateCountAggregateOutputType | null
    _min: TagTemplateMinAggregateOutputType | null
    _max: TagTemplateMaxAggregateOutputType | null
  }

  type GetTagTemplateGroupByPayload<T extends TagTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TagTemplateGroupByOutputType[P]>
        }
      >
    >


  export type TagTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    image?: boolean | FilesDefaultArgs<ExtArgs>
    company?: boolean | TagTemplate$companyArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    fields?: boolean | TagTemplate$fieldsArgs<ExtArgs>
    tags?: boolean | TagTemplate$tagsArgs<ExtArgs>
    _count?: boolean | TagTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagTemplate"]>

  export type TagTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    image?: boolean | FilesDefaultArgs<ExtArgs>
    company?: boolean | TagTemplate$companyArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagTemplate"]>

  export type TagTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    imageId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
  }

  export type TagTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | FilesDefaultArgs<ExtArgs>
    company?: boolean | TagTemplate$companyArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
    fields?: boolean | TagTemplate$fieldsArgs<ExtArgs>
    tags?: boolean | TagTemplate$tagsArgs<ExtArgs>
    _count?: boolean | TagTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | FilesDefaultArgs<ExtArgs>
    company?: boolean | TagTemplate$companyArgs<ExtArgs>
    createdBy?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $TagTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagTemplate"
    objects: {
      image: Prisma.$FilesPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs> | null
      createdBy: Prisma.$ProfilePayload<ExtArgs>
      fields: Prisma.$FieldPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      imageId: string
      createdById: string
      createdAt: Date
      updatedAt: Date
      companyId: string | null
    }, ExtArgs["result"]["tagTemplate"]>
    composites: {}
  }

  type TagTemplateGetPayload<S extends boolean | null | undefined | TagTemplateDefaultArgs> = $Result.GetResult<Prisma.$TagTemplatePayload, S>

  type TagTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagTemplateCountAggregateInputType | true
    }

  export interface TagTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagTemplate'], meta: { name: 'TagTemplate' } }
    /**
     * Find zero or one TagTemplate that matches the filter.
     * @param {TagTemplateFindUniqueArgs} args - Arguments to find a TagTemplate
     * @example
     * // Get one TagTemplate
     * const tagTemplate = await prisma.tagTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagTemplateFindUniqueArgs>(args: SelectSubset<T, TagTemplateFindUniqueArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagTemplateFindUniqueOrThrowArgs} args - Arguments to find a TagTemplate
     * @example
     * // Get one TagTemplate
     * const tagTemplate = await prisma.tagTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TagTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateFindFirstArgs} args - Arguments to find a TagTemplate
     * @example
     * // Get one TagTemplate
     * const tagTemplate = await prisma.tagTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagTemplateFindFirstArgs>(args?: SelectSubset<T, TagTemplateFindFirstArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateFindFirstOrThrowArgs} args - Arguments to find a TagTemplate
     * @example
     * // Get one TagTemplate
     * const tagTemplate = await prisma.tagTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TagTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagTemplates
     * const tagTemplates = await prisma.tagTemplate.findMany()
     * 
     * // Get first 10 TagTemplates
     * const tagTemplates = await prisma.tagTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagTemplateWithIdOnly = await prisma.tagTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagTemplateFindManyArgs>(args?: SelectSubset<T, TagTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagTemplate.
     * @param {TagTemplateCreateArgs} args - Arguments to create a TagTemplate.
     * @example
     * // Create one TagTemplate
     * const TagTemplate = await prisma.tagTemplate.create({
     *   data: {
     *     // ... data to create a TagTemplate
     *   }
     * })
     * 
     */
    create<T extends TagTemplateCreateArgs>(args: SelectSubset<T, TagTemplateCreateArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagTemplates.
     * @param {TagTemplateCreateManyArgs} args - Arguments to create many TagTemplates.
     * @example
     * // Create many TagTemplates
     * const tagTemplate = await prisma.tagTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagTemplateCreateManyArgs>(args?: SelectSubset<T, TagTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagTemplates and returns the data saved in the database.
     * @param {TagTemplateCreateManyAndReturnArgs} args - Arguments to create many TagTemplates.
     * @example
     * // Create many TagTemplates
     * const tagTemplate = await prisma.tagTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagTemplates and only return the `id`
     * const tagTemplateWithIdOnly = await prisma.tagTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TagTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagTemplate.
     * @param {TagTemplateDeleteArgs} args - Arguments to delete one TagTemplate.
     * @example
     * // Delete one TagTemplate
     * const TagTemplate = await prisma.tagTemplate.delete({
     *   where: {
     *     // ... filter to delete one TagTemplate
     *   }
     * })
     * 
     */
    delete<T extends TagTemplateDeleteArgs>(args: SelectSubset<T, TagTemplateDeleteArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagTemplate.
     * @param {TagTemplateUpdateArgs} args - Arguments to update one TagTemplate.
     * @example
     * // Update one TagTemplate
     * const tagTemplate = await prisma.tagTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagTemplateUpdateArgs>(args: SelectSubset<T, TagTemplateUpdateArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagTemplates.
     * @param {TagTemplateDeleteManyArgs} args - Arguments to filter TagTemplates to delete.
     * @example
     * // Delete a few TagTemplates
     * const { count } = await prisma.tagTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagTemplateDeleteManyArgs>(args?: SelectSubset<T, TagTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagTemplates
     * const tagTemplate = await prisma.tagTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagTemplateUpdateManyArgs>(args: SelectSubset<T, TagTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagTemplate.
     * @param {TagTemplateUpsertArgs} args - Arguments to update or create a TagTemplate.
     * @example
     * // Update or create a TagTemplate
     * const tagTemplate = await prisma.tagTemplate.upsert({
     *   create: {
     *     // ... data to create a TagTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagTemplate we want to update
     *   }
     * })
     */
    upsert<T extends TagTemplateUpsertArgs>(args: SelectSubset<T, TagTemplateUpsertArgs<ExtArgs>>): Prisma__TagTemplateClient<$Result.GetResult<Prisma.$TagTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateCountArgs} args - Arguments to filter TagTemplates to count.
     * @example
     * // Count the number of TagTemplates
     * const count = await prisma.tagTemplate.count({
     *   where: {
     *     // ... the filter for the TagTemplates we want to count
     *   }
     * })
    **/
    count<T extends TagTemplateCountArgs>(
      args?: Subset<T, TagTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagTemplateAggregateArgs>(args: Subset<T, TagTemplateAggregateArgs>): Prisma.PrismaPromise<GetTagTemplateAggregateType<T>>

    /**
     * Group by TagTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagTemplateGroupByArgs['orderBy'] }
        : { orderBy?: TagTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagTemplate model
   */
  readonly fields: TagTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    image<T extends FilesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FilesDefaultArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends TagTemplate$companyArgs<ExtArgs> = {}>(args?: Subset<T, TagTemplate$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fields<T extends TagTemplate$fieldsArgs<ExtArgs> = {}>(args?: Subset<T, TagTemplate$fieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends TagTemplate$tagsArgs<ExtArgs> = {}>(args?: Subset<T, TagTemplate$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagTemplate model
   */ 
  interface TagTemplateFieldRefs {
    readonly id: FieldRef<"TagTemplate", 'String'>
    readonly name: FieldRef<"TagTemplate", 'String'>
    readonly imageId: FieldRef<"TagTemplate", 'String'>
    readonly createdById: FieldRef<"TagTemplate", 'String'>
    readonly createdAt: FieldRef<"TagTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"TagTemplate", 'DateTime'>
    readonly companyId: FieldRef<"TagTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TagTemplate findUnique
   */
  export type TagTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TagTemplate to fetch.
     */
    where: TagTemplateWhereUniqueInput
  }

  /**
   * TagTemplate findUniqueOrThrow
   */
  export type TagTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TagTemplate to fetch.
     */
    where: TagTemplateWhereUniqueInput
  }

  /**
   * TagTemplate findFirst
   */
  export type TagTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TagTemplate to fetch.
     */
    where?: TagTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTemplates to fetch.
     */
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagTemplates.
     */
    cursor?: TagTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagTemplates.
     */
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * TagTemplate findFirstOrThrow
   */
  export type TagTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TagTemplate to fetch.
     */
    where?: TagTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTemplates to fetch.
     */
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagTemplates.
     */
    cursor?: TagTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagTemplates.
     */
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * TagTemplate findMany
   */
  export type TagTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TagTemplates to fetch.
     */
    where?: TagTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTemplates to fetch.
     */
    orderBy?: TagTemplateOrderByWithRelationInput | TagTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagTemplates.
     */
    cursor?: TagTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTemplates.
     */
    skip?: number
    distinct?: TagTemplateScalarFieldEnum | TagTemplateScalarFieldEnum[]
  }

  /**
   * TagTemplate create
   */
  export type TagTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a TagTemplate.
     */
    data: XOR<TagTemplateCreateInput, TagTemplateUncheckedCreateInput>
  }

  /**
   * TagTemplate createMany
   */
  export type TagTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagTemplates.
     */
    data: TagTemplateCreateManyInput | TagTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagTemplate createManyAndReturn
   */
  export type TagTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagTemplates.
     */
    data: TagTemplateCreateManyInput | TagTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagTemplate update
   */
  export type TagTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a TagTemplate.
     */
    data: XOR<TagTemplateUpdateInput, TagTemplateUncheckedUpdateInput>
    /**
     * Choose, which TagTemplate to update.
     */
    where: TagTemplateWhereUniqueInput
  }

  /**
   * TagTemplate updateMany
   */
  export type TagTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagTemplates.
     */
    data: XOR<TagTemplateUpdateManyMutationInput, TagTemplateUncheckedUpdateManyInput>
    /**
     * Filter which TagTemplates to update
     */
    where?: TagTemplateWhereInput
  }

  /**
   * TagTemplate upsert
   */
  export type TagTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the TagTemplate to update in case it exists.
     */
    where: TagTemplateWhereUniqueInput
    /**
     * In case the TagTemplate found by the `where` argument doesn't exist, create a new TagTemplate with this data.
     */
    create: XOR<TagTemplateCreateInput, TagTemplateUncheckedCreateInput>
    /**
     * In case the TagTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagTemplateUpdateInput, TagTemplateUncheckedUpdateInput>
  }

  /**
   * TagTemplate delete
   */
  export type TagTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
    /**
     * Filter which TagTemplate to delete.
     */
    where: TagTemplateWhereUniqueInput
  }

  /**
   * TagTemplate deleteMany
   */
  export type TagTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagTemplates to delete
     */
    where?: TagTemplateWhereInput
  }

  /**
   * TagTemplate.company
   */
  export type TagTemplate$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * TagTemplate.fields
   */
  export type TagTemplate$fieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    cursor?: FieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * TagTemplate.tags
   */
  export type TagTemplate$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * TagTemplate without action
   */
  export type TagTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagTemplate
     */
    select?: TagTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagTemplateInclude<ExtArgs> | null
  }


  /**
   * Model CompanyLocation
   */

  export type AggregateCompanyLocation = {
    _count: CompanyLocationCountAggregateOutputType | null
    _min: CompanyLocationMinAggregateOutputType | null
    _max: CompanyLocationMaxAggregateOutputType | null
  }

  export type CompanyLocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
    locationId: string | null
  }

  export type CompanyLocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
    locationId: string | null
  }

  export type CompanyLocationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    companyId: number
    locationId: number
    _all: number
  }


  export type CompanyLocationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    locationId?: true
  }

  export type CompanyLocationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    locationId?: true
  }

  export type CompanyLocationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    locationId?: true
    _all?: true
  }

  export type CompanyLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyLocation to aggregate.
     */
    where?: CompanyLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyLocations to fetch.
     */
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyLocations
    **/
    _count?: true | CompanyLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyLocationMaxAggregateInputType
  }

  export type GetCompanyLocationAggregateType<T extends CompanyLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyLocation[P]>
      : GetScalarType<T[P], AggregateCompanyLocation[P]>
  }




  export type CompanyLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyLocationWhereInput
    orderBy?: CompanyLocationOrderByWithAggregationInput | CompanyLocationOrderByWithAggregationInput[]
    by: CompanyLocationScalarFieldEnum[] | CompanyLocationScalarFieldEnum
    having?: CompanyLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyLocationCountAggregateInputType | true
    _min?: CompanyLocationMinAggregateInputType
    _max?: CompanyLocationMaxAggregateInputType
  }

  export type CompanyLocationGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    companyId: string
    locationId: string
    _count: CompanyLocationCountAggregateOutputType | null
    _min: CompanyLocationMinAggregateOutputType | null
    _max: CompanyLocationMaxAggregateOutputType | null
  }

  type GetCompanyLocationGroupByPayload<T extends CompanyLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyLocationGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyLocationGroupByOutputType[P]>
        }
      >
    >


  export type CompanyLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    locationId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    tags?: boolean | CompanyLocation$tagsArgs<ExtArgs>
    _count?: boolean | CompanyLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyLocation"]>

  export type CompanyLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    locationId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyLocation"]>

  export type CompanyLocationSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    locationId?: boolean
  }

  export type CompanyLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    tags?: boolean | CompanyLocation$tagsArgs<ExtArgs>
    _count?: boolean | CompanyLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $CompanyLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyLocation"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      companyId: string
      locationId: string
    }, ExtArgs["result"]["companyLocation"]>
    composites: {}
  }

  type CompanyLocationGetPayload<S extends boolean | null | undefined | CompanyLocationDefaultArgs> = $Result.GetResult<Prisma.$CompanyLocationPayload, S>

  type CompanyLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyLocationCountAggregateInputType | true
    }

  export interface CompanyLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyLocation'], meta: { name: 'CompanyLocation' } }
    /**
     * Find zero or one CompanyLocation that matches the filter.
     * @param {CompanyLocationFindUniqueArgs} args - Arguments to find a CompanyLocation
     * @example
     * // Get one CompanyLocation
     * const companyLocation = await prisma.companyLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyLocationFindUniqueArgs>(args: SelectSubset<T, CompanyLocationFindUniqueArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompanyLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyLocationFindUniqueOrThrowArgs} args - Arguments to find a CompanyLocation
     * @example
     * // Get one CompanyLocation
     * const companyLocation = await prisma.companyLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompanyLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationFindFirstArgs} args - Arguments to find a CompanyLocation
     * @example
     * // Get one CompanyLocation
     * const companyLocation = await prisma.companyLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyLocationFindFirstArgs>(args?: SelectSubset<T, CompanyLocationFindFirstArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompanyLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationFindFirstOrThrowArgs} args - Arguments to find a CompanyLocation
     * @example
     * // Get one CompanyLocation
     * const companyLocation = await prisma.companyLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompanyLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyLocations
     * const companyLocations = await prisma.companyLocation.findMany()
     * 
     * // Get first 10 CompanyLocations
     * const companyLocations = await prisma.companyLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyLocationWithIdOnly = await prisma.companyLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyLocationFindManyArgs>(args?: SelectSubset<T, CompanyLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompanyLocation.
     * @param {CompanyLocationCreateArgs} args - Arguments to create a CompanyLocation.
     * @example
     * // Create one CompanyLocation
     * const CompanyLocation = await prisma.companyLocation.create({
     *   data: {
     *     // ... data to create a CompanyLocation
     *   }
     * })
     * 
     */
    create<T extends CompanyLocationCreateArgs>(args: SelectSubset<T, CompanyLocationCreateArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompanyLocations.
     * @param {CompanyLocationCreateManyArgs} args - Arguments to create many CompanyLocations.
     * @example
     * // Create many CompanyLocations
     * const companyLocation = await prisma.companyLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyLocationCreateManyArgs>(args?: SelectSubset<T, CompanyLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyLocations and returns the data saved in the database.
     * @param {CompanyLocationCreateManyAndReturnArgs} args - Arguments to create many CompanyLocations.
     * @example
     * // Create many CompanyLocations
     * const companyLocation = await prisma.companyLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyLocations and only return the `id`
     * const companyLocationWithIdOnly = await prisma.companyLocation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompanyLocation.
     * @param {CompanyLocationDeleteArgs} args - Arguments to delete one CompanyLocation.
     * @example
     * // Delete one CompanyLocation
     * const CompanyLocation = await prisma.companyLocation.delete({
     *   where: {
     *     // ... filter to delete one CompanyLocation
     *   }
     * })
     * 
     */
    delete<T extends CompanyLocationDeleteArgs>(args: SelectSubset<T, CompanyLocationDeleteArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompanyLocation.
     * @param {CompanyLocationUpdateArgs} args - Arguments to update one CompanyLocation.
     * @example
     * // Update one CompanyLocation
     * const companyLocation = await prisma.companyLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyLocationUpdateArgs>(args: SelectSubset<T, CompanyLocationUpdateArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompanyLocations.
     * @param {CompanyLocationDeleteManyArgs} args - Arguments to filter CompanyLocations to delete.
     * @example
     * // Delete a few CompanyLocations
     * const { count } = await prisma.companyLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyLocationDeleteManyArgs>(args?: SelectSubset<T, CompanyLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyLocations
     * const companyLocation = await prisma.companyLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyLocationUpdateManyArgs>(args: SelectSubset<T, CompanyLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyLocation.
     * @param {CompanyLocationUpsertArgs} args - Arguments to update or create a CompanyLocation.
     * @example
     * // Update or create a CompanyLocation
     * const companyLocation = await prisma.companyLocation.upsert({
     *   create: {
     *     // ... data to create a CompanyLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyLocation we want to update
     *   }
     * })
     */
    upsert<T extends CompanyLocationUpsertArgs>(args: SelectSubset<T, CompanyLocationUpsertArgs<ExtArgs>>): Prisma__CompanyLocationClient<$Result.GetResult<Prisma.$CompanyLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompanyLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationCountArgs} args - Arguments to filter CompanyLocations to count.
     * @example
     * // Count the number of CompanyLocations
     * const count = await prisma.companyLocation.count({
     *   where: {
     *     // ... the filter for the CompanyLocations we want to count
     *   }
     * })
    **/
    count<T extends CompanyLocationCountArgs>(
      args?: Subset<T, CompanyLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyLocationAggregateArgs>(args: Subset<T, CompanyLocationAggregateArgs>): Prisma.PrismaPromise<GetCompanyLocationAggregateType<T>>

    /**
     * Group by CompanyLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyLocationGroupByArgs['orderBy'] }
        : { orderBy?: CompanyLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyLocation model
   */
  readonly fields: CompanyLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tags<T extends CompanyLocation$tagsArgs<ExtArgs> = {}>(args?: Subset<T, CompanyLocation$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyLocation model
   */ 
  interface CompanyLocationFieldRefs {
    readonly id: FieldRef<"CompanyLocation", 'String'>
    readonly name: FieldRef<"CompanyLocation", 'String'>
    readonly createdAt: FieldRef<"CompanyLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyLocation", 'DateTime'>
    readonly companyId: FieldRef<"CompanyLocation", 'String'>
    readonly locationId: FieldRef<"CompanyLocation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompanyLocation findUnique
   */
  export type CompanyLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter, which CompanyLocation to fetch.
     */
    where: CompanyLocationWhereUniqueInput
  }

  /**
   * CompanyLocation findUniqueOrThrow
   */
  export type CompanyLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter, which CompanyLocation to fetch.
     */
    where: CompanyLocationWhereUniqueInput
  }

  /**
   * CompanyLocation findFirst
   */
  export type CompanyLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter, which CompanyLocation to fetch.
     */
    where?: CompanyLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyLocations to fetch.
     */
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyLocations.
     */
    cursor?: CompanyLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyLocations.
     */
    distinct?: CompanyLocationScalarFieldEnum | CompanyLocationScalarFieldEnum[]
  }

  /**
   * CompanyLocation findFirstOrThrow
   */
  export type CompanyLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter, which CompanyLocation to fetch.
     */
    where?: CompanyLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyLocations to fetch.
     */
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyLocations.
     */
    cursor?: CompanyLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyLocations.
     */
    distinct?: CompanyLocationScalarFieldEnum | CompanyLocationScalarFieldEnum[]
  }

  /**
   * CompanyLocation findMany
   */
  export type CompanyLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter, which CompanyLocations to fetch.
     */
    where?: CompanyLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyLocations to fetch.
     */
    orderBy?: CompanyLocationOrderByWithRelationInput | CompanyLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyLocations.
     */
    cursor?: CompanyLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyLocations.
     */
    skip?: number
    distinct?: CompanyLocationScalarFieldEnum | CompanyLocationScalarFieldEnum[]
  }

  /**
   * CompanyLocation create
   */
  export type CompanyLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyLocation.
     */
    data: XOR<CompanyLocationCreateInput, CompanyLocationUncheckedCreateInput>
  }

  /**
   * CompanyLocation createMany
   */
  export type CompanyLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyLocations.
     */
    data: CompanyLocationCreateManyInput | CompanyLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyLocation createManyAndReturn
   */
  export type CompanyLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompanyLocations.
     */
    data: CompanyLocationCreateManyInput | CompanyLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyLocation update
   */
  export type CompanyLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyLocation.
     */
    data: XOR<CompanyLocationUpdateInput, CompanyLocationUncheckedUpdateInput>
    /**
     * Choose, which CompanyLocation to update.
     */
    where: CompanyLocationWhereUniqueInput
  }

  /**
   * CompanyLocation updateMany
   */
  export type CompanyLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyLocations.
     */
    data: XOR<CompanyLocationUpdateManyMutationInput, CompanyLocationUncheckedUpdateManyInput>
    /**
     * Filter which CompanyLocations to update
     */
    where?: CompanyLocationWhereInput
  }

  /**
   * CompanyLocation upsert
   */
  export type CompanyLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyLocation to update in case it exists.
     */
    where: CompanyLocationWhereUniqueInput
    /**
     * In case the CompanyLocation found by the `where` argument doesn't exist, create a new CompanyLocation with this data.
     */
    create: XOR<CompanyLocationCreateInput, CompanyLocationUncheckedCreateInput>
    /**
     * In case the CompanyLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyLocationUpdateInput, CompanyLocationUncheckedUpdateInput>
  }

  /**
   * CompanyLocation delete
   */
  export type CompanyLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
    /**
     * Filter which CompanyLocation to delete.
     */
    where: CompanyLocationWhereUniqueInput
  }

  /**
   * CompanyLocation deleteMany
   */
  export type CompanyLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyLocations to delete
     */
    where?: CompanyLocationWhereInput
  }

  /**
   * CompanyLocation.tags
   */
  export type CompanyLocation$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * CompanyLocation without action
   */
  export type CompanyLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyLocation
     */
    select?: CompanyLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyLocationInclude<ExtArgs> | null
  }


  /**
   * Model DocumentTemplate
   */

  export type AggregateDocumentTemplate = {
    _count: DocumentTemplateCountAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  export type DocumentTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    imageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
  }

  export type DocumentTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    imageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: string | null
  }

  export type DocumentTemplateCountAggregateOutputType = {
    id: number
    name: number
    imageId: number
    fields: number
    createdAt: number
    updatedAt: number
    companyId: number
    _all: number
  }


  export type DocumentTemplateMinAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
  }

  export type DocumentTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
  }

  export type DocumentTemplateCountAggregateInputType = {
    id?: true
    name?: true
    imageId?: true
    fields?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    _all?: true
  }

  export type DocumentTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplate to aggregate.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTemplates
    **/
    _count?: true | DocumentTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type GetDocumentTemplateAggregateType<T extends DocumentTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentTemplate[P]>
      : GetScalarType<T[P], AggregateDocumentTemplate[P]>
  }




  export type DocumentTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithAggregationInput | DocumentTemplateOrderByWithAggregationInput[]
    by: DocumentTemplateScalarFieldEnum[] | DocumentTemplateScalarFieldEnum
    having?: DocumentTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTemplateCountAggregateInputType | true
    _min?: DocumentTemplateMinAggregateInputType
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type DocumentTemplateGroupByOutputType = {
    id: string
    name: string
    imageId: string | null
    fields: JsonValue
    createdAt: Date
    updatedAt: Date
    companyId: string | null
    _count: DocumentTemplateCountAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  type GetDocumentTemplateGroupByPayload<T extends DocumentTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageId?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    image?: boolean | DocumentTemplate$imageArgs<ExtArgs>
    company?: boolean | DocumentTemplate$companyArgs<ExtArgs>
    tagDocuments?: boolean | DocumentTemplate$tagDocumentsArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageId?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    image?: boolean | DocumentTemplate$imageArgs<ExtArgs>
    company?: boolean | DocumentTemplate$companyArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    imageId?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
  }

  export type DocumentTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | DocumentTemplate$imageArgs<ExtArgs>
    company?: boolean | DocumentTemplate$companyArgs<ExtArgs>
    tagDocuments?: boolean | DocumentTemplate$tagDocumentsArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | DocumentTemplate$imageArgs<ExtArgs>
    company?: boolean | DocumentTemplate$companyArgs<ExtArgs>
  }

  export type $DocumentTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentTemplate"
    objects: {
      image: Prisma.$FilesPayload<ExtArgs> | null
      company: Prisma.$CompanyPayload<ExtArgs> | null
      tagDocuments: Prisma.$TagDocumentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      imageId: string | null
      fields: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      companyId: string | null
    }, ExtArgs["result"]["documentTemplate"]>
    composites: {}
  }

  type DocumentTemplateGetPayload<S extends boolean | null | undefined | DocumentTemplateDefaultArgs> = $Result.GetResult<Prisma.$DocumentTemplatePayload, S>

  type DocumentTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentTemplateCountAggregateInputType | true
    }

  export interface DocumentTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentTemplate'], meta: { name: 'DocumentTemplate' } }
    /**
     * Find zero or one DocumentTemplate that matches the filter.
     * @param {DocumentTemplateFindUniqueArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTemplateFindUniqueArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentTemplateFindUniqueOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTemplateFindFirstArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany()
     * 
     * // Get first 10 DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTemplateFindManyArgs>(args?: SelectSubset<T, DocumentTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentTemplate.
     * @param {DocumentTemplateCreateArgs} args - Arguments to create a DocumentTemplate.
     * @example
     * // Create one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.create({
     *   data: {
     *     // ... data to create a DocumentTemplate
     *   }
     * })
     * 
     */
    create<T extends DocumentTemplateCreateArgs>(args: SelectSubset<T, DocumentTemplateCreateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentTemplates.
     * @param {DocumentTemplateCreateManyArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTemplateCreateManyArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTemplates and returns the data saved in the database.
     * @param {DocumentTemplateCreateManyAndReturnArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTemplates and only return the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentTemplate.
     * @param {DocumentTemplateDeleteArgs} args - Arguments to delete one DocumentTemplate.
     * @example
     * // Delete one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.delete({
     *   where: {
     *     // ... filter to delete one DocumentTemplate
     *   }
     * })
     * 
     */
    delete<T extends DocumentTemplateDeleteArgs>(args: SelectSubset<T, DocumentTemplateDeleteArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentTemplate.
     * @param {DocumentTemplateUpdateArgs} args - Arguments to update one DocumentTemplate.
     * @example
     * // Update one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTemplateUpdateArgs>(args: SelectSubset<T, DocumentTemplateUpdateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentTemplates.
     * @param {DocumentTemplateDeleteManyArgs} args - Arguments to filter DocumentTemplates to delete.
     * @example
     * // Delete a few DocumentTemplates
     * const { count } = await prisma.documentTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTemplateDeleteManyArgs>(args?: SelectSubset<T, DocumentTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTemplateUpdateManyArgs>(args: SelectSubset<T, DocumentTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentTemplate.
     * @param {DocumentTemplateUpsertArgs} args - Arguments to update or create a DocumentTemplate.
     * @example
     * // Update or create a DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.upsert({
     *   create: {
     *     // ... data to create a DocumentTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentTemplate we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTemplateUpsertArgs>(args: SelectSubset<T, DocumentTemplateUpsertArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateCountArgs} args - Arguments to filter DocumentTemplates to count.
     * @example
     * // Count the number of DocumentTemplates
     * const count = await prisma.documentTemplate.count({
     *   where: {
     *     // ... the filter for the DocumentTemplates we want to count
     *   }
     * })
    **/
    count<T extends DocumentTemplateCountArgs>(
      args?: Subset<T, DocumentTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTemplateAggregateArgs>(args: Subset<T, DocumentTemplateAggregateArgs>): Prisma.PrismaPromise<GetDocumentTemplateAggregateType<T>>

    /**
     * Group by DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTemplateGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentTemplate model
   */
  readonly fields: DocumentTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    image<T extends DocumentTemplate$imageArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$imageArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    company<T extends DocumentTemplate$companyArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tagDocuments<T extends DocumentTemplate$tagDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$tagDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentTemplate model
   */ 
  interface DocumentTemplateFieldRefs {
    readonly id: FieldRef<"DocumentTemplate", 'String'>
    readonly name: FieldRef<"DocumentTemplate", 'String'>
    readonly imageId: FieldRef<"DocumentTemplate", 'String'>
    readonly fields: FieldRef<"DocumentTemplate", 'Json'>
    readonly createdAt: FieldRef<"DocumentTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentTemplate", 'DateTime'>
    readonly companyId: FieldRef<"DocumentTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentTemplate findUnique
   */
  export type DocumentTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findUniqueOrThrow
   */
  export type DocumentTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findFirst
   */
  export type DocumentTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findFirstOrThrow
   */
  export type DocumentTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findMany
   */
  export type DocumentTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplates to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate create
   */
  export type DocumentTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentTemplate.
     */
    data: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
  }

  /**
   * DocumentTemplate createMany
   */
  export type DocumentTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentTemplate createManyAndReturn
   */
  export type DocumentTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentTemplate update
   */
  export type DocumentTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentTemplate.
     */
    data: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
    /**
     * Choose, which DocumentTemplate to update.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate updateMany
   */
  export type DocumentTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTemplates.
     */
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplates to update
     */
    where?: DocumentTemplateWhereInput
  }

  /**
   * DocumentTemplate upsert
   */
  export type DocumentTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentTemplate to update in case it exists.
     */
    where: DocumentTemplateWhereUniqueInput
    /**
     * In case the DocumentTemplate found by the `where` argument doesn't exist, create a new DocumentTemplate with this data.
     */
    create: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
    /**
     * In case the DocumentTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
  }

  /**
   * DocumentTemplate delete
   */
  export type DocumentTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter which DocumentTemplate to delete.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate deleteMany
   */
  export type DocumentTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplates to delete
     */
    where?: DocumentTemplateWhereInput
  }

  /**
   * DocumentTemplate.image
   */
  export type DocumentTemplate$imageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
  }

  /**
   * DocumentTemplate.company
   */
  export type DocumentTemplate$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * DocumentTemplate.tagDocuments
   */
  export type DocumentTemplate$tagDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    where?: TagDocumentsWhereInput
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    cursor?: TagDocumentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagDocumentsScalarFieldEnum | TagDocumentsScalarFieldEnum[]
  }

  /**
   * DocumentTemplate without action
   */
  export type DocumentTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
  }


  /**
   * Model TagDocuments
   */

  export type AggregateTagDocuments = {
    _count: TagDocumentsCountAggregateOutputType | null
    _min: TagDocumentsMinAggregateOutputType | null
    _max: TagDocumentsMaxAggregateOutputType | null
  }

  export type TagDocumentsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tagId: string | null
    documentTemplateId: string | null
  }

  export type TagDocumentsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tagId: string | null
    documentTemplateId: string | null
  }

  export type TagDocumentsCountAggregateOutputType = {
    id: number
    fields: number
    createdAt: number
    updatedAt: number
    tagId: number
    documentTemplateId: number
    _all: number
  }


  export type TagDocumentsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
    documentTemplateId?: true
  }

  export type TagDocumentsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
    documentTemplateId?: true
  }

  export type TagDocumentsCountAggregateInputType = {
    id?: true
    fields?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
    documentTemplateId?: true
    _all?: true
  }

  export type TagDocumentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagDocuments to aggregate.
     */
    where?: TagDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagDocuments to fetch.
     */
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagDocuments
    **/
    _count?: true | TagDocumentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagDocumentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagDocumentsMaxAggregateInputType
  }

  export type GetTagDocumentsAggregateType<T extends TagDocumentsAggregateArgs> = {
        [P in keyof T & keyof AggregateTagDocuments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagDocuments[P]>
      : GetScalarType<T[P], AggregateTagDocuments[P]>
  }




  export type TagDocumentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagDocumentsWhereInput
    orderBy?: TagDocumentsOrderByWithAggregationInput | TagDocumentsOrderByWithAggregationInput[]
    by: TagDocumentsScalarFieldEnum[] | TagDocumentsScalarFieldEnum
    having?: TagDocumentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagDocumentsCountAggregateInputType | true
    _min?: TagDocumentsMinAggregateInputType
    _max?: TagDocumentsMaxAggregateInputType
  }

  export type TagDocumentsGroupByOutputType = {
    id: string
    fields: JsonValue
    createdAt: Date
    updatedAt: Date
    tagId: string
    documentTemplateId: string
    _count: TagDocumentsCountAggregateOutputType | null
    _min: TagDocumentsMinAggregateOutputType | null
    _max: TagDocumentsMaxAggregateOutputType | null
  }

  type GetTagDocumentsGroupByPayload<T extends TagDocumentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagDocumentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagDocumentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagDocumentsGroupByOutputType[P]>
            : GetScalarType<T[P], TagDocumentsGroupByOutputType[P]>
        }
      >
    >


  export type TagDocumentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagId?: boolean
    documentTemplateId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagDocuments"]>

  export type TagDocumentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagId?: boolean
    documentTemplateId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagDocuments"]>

  export type TagDocumentsSelectScalar = {
    id?: boolean
    fields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagId?: boolean
    documentTemplateId?: boolean
  }

  export type TagDocumentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }
  export type TagDocumentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
  }

  export type $TagDocumentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagDocuments"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      documentTemplate: Prisma.$DocumentTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fields: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      tagId: string
      documentTemplateId: string
    }, ExtArgs["result"]["tagDocuments"]>
    composites: {}
  }

  type TagDocumentsGetPayload<S extends boolean | null | undefined | TagDocumentsDefaultArgs> = $Result.GetResult<Prisma.$TagDocumentsPayload, S>

  type TagDocumentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagDocumentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagDocumentsCountAggregateInputType | true
    }

  export interface TagDocumentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagDocuments'], meta: { name: 'TagDocuments' } }
    /**
     * Find zero or one TagDocuments that matches the filter.
     * @param {TagDocumentsFindUniqueArgs} args - Arguments to find a TagDocuments
     * @example
     * // Get one TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagDocumentsFindUniqueArgs>(args: SelectSubset<T, TagDocumentsFindUniqueArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagDocuments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagDocumentsFindUniqueOrThrowArgs} args - Arguments to find a TagDocuments
     * @example
     * // Get one TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagDocumentsFindUniqueOrThrowArgs>(args: SelectSubset<T, TagDocumentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsFindFirstArgs} args - Arguments to find a TagDocuments
     * @example
     * // Get one TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagDocumentsFindFirstArgs>(args?: SelectSubset<T, TagDocumentsFindFirstArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagDocuments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsFindFirstOrThrowArgs} args - Arguments to find a TagDocuments
     * @example
     * // Get one TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagDocumentsFindFirstOrThrowArgs>(args?: SelectSubset<T, TagDocumentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findMany()
     * 
     * // Get first 10 TagDocuments
     * const tagDocuments = await prisma.tagDocuments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagDocumentsWithIdOnly = await prisma.tagDocuments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagDocumentsFindManyArgs>(args?: SelectSubset<T, TagDocumentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagDocuments.
     * @param {TagDocumentsCreateArgs} args - Arguments to create a TagDocuments.
     * @example
     * // Create one TagDocuments
     * const TagDocuments = await prisma.tagDocuments.create({
     *   data: {
     *     // ... data to create a TagDocuments
     *   }
     * })
     * 
     */
    create<T extends TagDocumentsCreateArgs>(args: SelectSubset<T, TagDocumentsCreateArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagDocuments.
     * @param {TagDocumentsCreateManyArgs} args - Arguments to create many TagDocuments.
     * @example
     * // Create many TagDocuments
     * const tagDocuments = await prisma.tagDocuments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagDocumentsCreateManyArgs>(args?: SelectSubset<T, TagDocumentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagDocuments and returns the data saved in the database.
     * @param {TagDocumentsCreateManyAndReturnArgs} args - Arguments to create many TagDocuments.
     * @example
     * // Create many TagDocuments
     * const tagDocuments = await prisma.tagDocuments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagDocuments and only return the `id`
     * const tagDocumentsWithIdOnly = await prisma.tagDocuments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagDocumentsCreateManyAndReturnArgs>(args?: SelectSubset<T, TagDocumentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagDocuments.
     * @param {TagDocumentsDeleteArgs} args - Arguments to delete one TagDocuments.
     * @example
     * // Delete one TagDocuments
     * const TagDocuments = await prisma.tagDocuments.delete({
     *   where: {
     *     // ... filter to delete one TagDocuments
     *   }
     * })
     * 
     */
    delete<T extends TagDocumentsDeleteArgs>(args: SelectSubset<T, TagDocumentsDeleteArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagDocuments.
     * @param {TagDocumentsUpdateArgs} args - Arguments to update one TagDocuments.
     * @example
     * // Update one TagDocuments
     * const tagDocuments = await prisma.tagDocuments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagDocumentsUpdateArgs>(args: SelectSubset<T, TagDocumentsUpdateArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagDocuments.
     * @param {TagDocumentsDeleteManyArgs} args - Arguments to filter TagDocuments to delete.
     * @example
     * // Delete a few TagDocuments
     * const { count } = await prisma.tagDocuments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDocumentsDeleteManyArgs>(args?: SelectSubset<T, TagDocumentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagDocuments
     * const tagDocuments = await prisma.tagDocuments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagDocumentsUpdateManyArgs>(args: SelectSubset<T, TagDocumentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagDocuments.
     * @param {TagDocumentsUpsertArgs} args - Arguments to update or create a TagDocuments.
     * @example
     * // Update or create a TagDocuments
     * const tagDocuments = await prisma.tagDocuments.upsert({
     *   create: {
     *     // ... data to create a TagDocuments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagDocuments we want to update
     *   }
     * })
     */
    upsert<T extends TagDocumentsUpsertArgs>(args: SelectSubset<T, TagDocumentsUpsertArgs<ExtArgs>>): Prisma__TagDocumentsClient<$Result.GetResult<Prisma.$TagDocumentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsCountArgs} args - Arguments to filter TagDocuments to count.
     * @example
     * // Count the number of TagDocuments
     * const count = await prisma.tagDocuments.count({
     *   where: {
     *     // ... the filter for the TagDocuments we want to count
     *   }
     * })
    **/
    count<T extends TagDocumentsCountArgs>(
      args?: Subset<T, TagDocumentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagDocumentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagDocumentsAggregateArgs>(args: Subset<T, TagDocumentsAggregateArgs>): Prisma.PrismaPromise<GetTagDocumentsAggregateType<T>>

    /**
     * Group by TagDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagDocumentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagDocumentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagDocumentsGroupByArgs['orderBy'] }
        : { orderBy?: TagDocumentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagDocumentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagDocumentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagDocuments model
   */
  readonly fields: TagDocumentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagDocuments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagDocumentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documentTemplate<T extends DocumentTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplateDefaultArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagDocuments model
   */ 
  interface TagDocumentsFieldRefs {
    readonly id: FieldRef<"TagDocuments", 'String'>
    readonly fields: FieldRef<"TagDocuments", 'Json'>
    readonly createdAt: FieldRef<"TagDocuments", 'DateTime'>
    readonly updatedAt: FieldRef<"TagDocuments", 'DateTime'>
    readonly tagId: FieldRef<"TagDocuments", 'String'>
    readonly documentTemplateId: FieldRef<"TagDocuments", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TagDocuments findUnique
   */
  export type TagDocumentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which TagDocuments to fetch.
     */
    where: TagDocumentsWhereUniqueInput
  }

  /**
   * TagDocuments findUniqueOrThrow
   */
  export type TagDocumentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which TagDocuments to fetch.
     */
    where: TagDocumentsWhereUniqueInput
  }

  /**
   * TagDocuments findFirst
   */
  export type TagDocumentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which TagDocuments to fetch.
     */
    where?: TagDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagDocuments to fetch.
     */
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagDocuments.
     */
    cursor?: TagDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagDocuments.
     */
    distinct?: TagDocumentsScalarFieldEnum | TagDocumentsScalarFieldEnum[]
  }

  /**
   * TagDocuments findFirstOrThrow
   */
  export type TagDocumentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which TagDocuments to fetch.
     */
    where?: TagDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagDocuments to fetch.
     */
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagDocuments.
     */
    cursor?: TagDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagDocuments.
     */
    distinct?: TagDocumentsScalarFieldEnum | TagDocumentsScalarFieldEnum[]
  }

  /**
   * TagDocuments findMany
   */
  export type TagDocumentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter, which TagDocuments to fetch.
     */
    where?: TagDocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagDocuments to fetch.
     */
    orderBy?: TagDocumentsOrderByWithRelationInput | TagDocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagDocuments.
     */
    cursor?: TagDocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagDocuments.
     */
    skip?: number
    distinct?: TagDocumentsScalarFieldEnum | TagDocumentsScalarFieldEnum[]
  }

  /**
   * TagDocuments create
   */
  export type TagDocumentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * The data needed to create a TagDocuments.
     */
    data: XOR<TagDocumentsCreateInput, TagDocumentsUncheckedCreateInput>
  }

  /**
   * TagDocuments createMany
   */
  export type TagDocumentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagDocuments.
     */
    data: TagDocumentsCreateManyInput | TagDocumentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagDocuments createManyAndReturn
   */
  export type TagDocumentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagDocuments.
     */
    data: TagDocumentsCreateManyInput | TagDocumentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagDocuments update
   */
  export type TagDocumentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * The data needed to update a TagDocuments.
     */
    data: XOR<TagDocumentsUpdateInput, TagDocumentsUncheckedUpdateInput>
    /**
     * Choose, which TagDocuments to update.
     */
    where: TagDocumentsWhereUniqueInput
  }

  /**
   * TagDocuments updateMany
   */
  export type TagDocumentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagDocuments.
     */
    data: XOR<TagDocumentsUpdateManyMutationInput, TagDocumentsUncheckedUpdateManyInput>
    /**
     * Filter which TagDocuments to update
     */
    where?: TagDocumentsWhereInput
  }

  /**
   * TagDocuments upsert
   */
  export type TagDocumentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * The filter to search for the TagDocuments to update in case it exists.
     */
    where: TagDocumentsWhereUniqueInput
    /**
     * In case the TagDocuments found by the `where` argument doesn't exist, create a new TagDocuments with this data.
     */
    create: XOR<TagDocumentsCreateInput, TagDocumentsUncheckedCreateInput>
    /**
     * In case the TagDocuments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagDocumentsUpdateInput, TagDocumentsUncheckedUpdateInput>
  }

  /**
   * TagDocuments delete
   */
  export type TagDocumentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
    /**
     * Filter which TagDocuments to delete.
     */
    where: TagDocumentsWhereUniqueInput
  }

  /**
   * TagDocuments deleteMany
   */
  export type TagDocumentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagDocuments to delete
     */
    where?: TagDocumentsWhereInput
  }

  /**
   * TagDocuments without action
   */
  export type TagDocumentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagDocuments
     */
    select?: TagDocumentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagDocumentsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    profileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    profileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    profileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    profileId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      profileId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly profileId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pictureId: 'pictureId',
    email: 'email',
    bio: 'bio',
    role: 'role',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    industry: 'industry',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ReaderScalarFieldEnum: {
    address: 'address',
    name: 'name',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReaderScalarFieldEnum = (typeof ReaderScalarFieldEnum)[keyof typeof ReaderScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    lat: 'lat',
    lon: 'lon',
    formattedAddress: 'formattedAddress',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    tagTemplateId: 'tagTemplateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    createdLocationId: 'createdLocationId',
    createdReaderId: 'createdReaderId',
    companyLocationId: 'companyLocationId'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const TagHistoryScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    createdLocationId: 'createdLocationId',
    createdReaderId: 'createdReaderId',
    action: 'action'
  };

  export type TagHistoryScalarFieldEnum = (typeof TagHistoryScalarFieldEnum)[keyof typeof TagHistoryScalarFieldEnum]


  export const FilesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fileName: 'fileName',
    blobName: 'blobName',
    containerName: 'containerName',
    blobUrl: 'blobUrl',
    contentType: 'contentType',
    fileSize: 'fileSize',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FilesScalarFieldEnum = (typeof FilesScalarFieldEnum)[keyof typeof FilesScalarFieldEnum]


  export const FieldScalarFieldEnum: {
    id: 'id',
    label: 'label',
    type: 'type',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tagTemplateId: 'tagTemplateId',
    documentTemplateId: 'documentTemplateId'
  };

  export type FieldScalarFieldEnum = (typeof FieldScalarFieldEnum)[keyof typeof FieldScalarFieldEnum]


  export const TagTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageId: 'imageId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyId: 'companyId'
  };

  export type TagTemplateScalarFieldEnum = (typeof TagTemplateScalarFieldEnum)[keyof typeof TagTemplateScalarFieldEnum]


  export const CompanyLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyId: 'companyId',
    locationId: 'locationId'
  };

  export type CompanyLocationScalarFieldEnum = (typeof CompanyLocationScalarFieldEnum)[keyof typeof CompanyLocationScalarFieldEnum]


  export const DocumentTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageId: 'imageId',
    fields: 'fields',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyId: 'companyId'
  };

  export type DocumentTemplateScalarFieldEnum = (typeof DocumentTemplateScalarFieldEnum)[keyof typeof DocumentTemplateScalarFieldEnum]


  export const TagDocumentsScalarFieldEnum: {
    id: 'id',
    fields: 'fields',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tagId: 'tagId',
    documentTemplateId: 'documentTemplateId'
  };

  export type TagDocumentsScalarFieldEnum = (typeof TagDocumentsScalarFieldEnum)[keyof typeof TagDocumentsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    profileId: 'profileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Industry'
   */
  export type EnumIndustryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Industry'>
    


  /**
   * Reference to a field of type 'Industry[]'
   */
  export type ListEnumIndustryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Industry[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'TagAction'
   */
  export type EnumTagActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagAction'>
    


  /**
   * Reference to a field of type 'TagAction[]'
   */
  export type ListEnumTagActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TagAction[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'FieldType'
   */
  export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


  /**
   * Reference to a field of type 'FieldType[]'
   */
  export type ListEnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    pictureId?: StringNullableFilter<"Profile"> | string | null
    email?: StringFilter<"Profile"> | string
    bio?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    companyId?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    picture?: XOR<FilesNullableRelationFilter, FilesWhereInput> | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    files?: FilesListRelationFilter
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
    readers?: ReaderListRelationFilter
    locations?: LocationListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pictureId?: SortOrderInput | SortOrder
    email?: SortOrder
    bio?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: FilesOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    files?: FilesOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    tagHistories?: TagHistoryOrderByRelationAggregateInput
    tagTemplates?: TagTemplateOrderByRelationAggregateInput
    readers?: ReaderOrderByRelationAggregateInput
    locations?: LocationOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    name?: StringFilter<"Profile"> | string
    pictureId?: StringNullableFilter<"Profile"> | string | null
    bio?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    companyId?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    picture?: XOR<FilesNullableRelationFilter, FilesWhereInput> | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    files?: FilesListRelationFilter
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
    readers?: ReaderListRelationFilter
    locations?: LocationListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "email">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pictureId?: SortOrderInput | SortOrder
    email?: SortOrder
    bio?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    name?: StringWithAggregatesFilter<"Profile"> | string
    pictureId?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    email?: StringWithAggregatesFilter<"Profile"> | string
    bio?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    role?: EnumRoleNullableWithAggregatesFilter<"Profile"> | $Enums.Role | null
    companyId?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    website?: StringFilter<"Company"> | string
    industry?: EnumIndustryFilter<"Company"> | $Enums.Industry
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    profiles?: ProfileListRelationFilter
    companyLocations?: CompanyLocationListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profiles?: ProfileOrderByRelationAggregateInput
    companyLocations?: CompanyLocationOrderByRelationAggregateInput
    documentTemplates?: DocumentTemplateOrderByRelationAggregateInput
    tagTemplates?: TagTemplateOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    website?: StringFilter<"Company"> | string
    industry?: EnumIndustryFilter<"Company"> | $Enums.Industry
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    profiles?: ProfileListRelationFilter
    companyLocations?: CompanyLocationListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    website?: StringWithAggregatesFilter<"Company"> | string
    industry?: EnumIndustryWithAggregatesFilter<"Company"> | $Enums.Industry
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type ReaderWhereInput = {
    AND?: ReaderWhereInput | ReaderWhereInput[]
    OR?: ReaderWhereInput[]
    NOT?: ReaderWhereInput | ReaderWhereInput[]
    address?: StringFilter<"Reader"> | string
    name?: StringFilter<"Reader"> | string
    createdById?: StringFilter<"Reader"> | string
    createdAt?: DateTimeFilter<"Reader"> | Date | string
    updatedAt?: DateTimeFilter<"Reader"> | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
  }

  export type ReaderOrderByWithRelationInput = {
    address?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
    tagHistories?: TagHistoryOrderByRelationAggregateInput
  }

  export type ReaderWhereUniqueInput = Prisma.AtLeast<{
    address?: string
    AND?: ReaderWhereInput | ReaderWhereInput[]
    OR?: ReaderWhereInput[]
    NOT?: ReaderWhereInput | ReaderWhereInput[]
    name?: StringFilter<"Reader"> | string
    createdById?: StringFilter<"Reader"> | string
    createdAt?: DateTimeFilter<"Reader"> | Date | string
    updatedAt?: DateTimeFilter<"Reader"> | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
  }, "address">

  export type ReaderOrderByWithAggregationInput = {
    address?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReaderCountOrderByAggregateInput
    _max?: ReaderMaxOrderByAggregateInput
    _min?: ReaderMinOrderByAggregateInput
  }

  export type ReaderScalarWhereWithAggregatesInput = {
    AND?: ReaderScalarWhereWithAggregatesInput | ReaderScalarWhereWithAggregatesInput[]
    OR?: ReaderScalarWhereWithAggregatesInput[]
    NOT?: ReaderScalarWhereWithAggregatesInput | ReaderScalarWhereWithAggregatesInput[]
    address?: StringWithAggregatesFilter<"Reader"> | string
    name?: StringWithAggregatesFilter<"Reader"> | string
    createdById?: StringWithAggregatesFilter<"Reader"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reader"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Reader"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    lat?: FloatFilter<"Location"> | number
    lon?: FloatFilter<"Location"> | number
    formattedAddress?: StringFilter<"Location"> | string
    createdById?: StringFilter<"Location"> | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
    companyLocations?: CompanyLocationListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    formattedAddress?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
    tagHistories?: TagHistoryOrderByRelationAggregateInput
    companyLocations?: CompanyLocationOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    lat?: FloatFilter<"Location"> | number
    lon?: FloatFilter<"Location"> | number
    formattedAddress?: StringFilter<"Location"> | string
    createdById?: StringFilter<"Location"> | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    tags?: TagListRelationFilter
    tagHistories?: TagHistoryListRelationFilter
    companyLocations?: CompanyLocationListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    formattedAddress?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    lat?: FloatWithAggregatesFilter<"Location"> | number
    lon?: FloatWithAggregatesFilter<"Location"> | number
    formattedAddress?: StringWithAggregatesFilter<"Location"> | string
    createdById?: StringWithAggregatesFilter<"Location"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    uid?: StringFilter<"Tag"> | string
    tagTemplateId?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    createdById?: StringNullableFilter<"Tag"> | string | null
    createdLocationId?: StringNullableFilter<"Tag"> | string | null
    createdReaderId?: StringNullableFilter<"Tag"> | string | null
    companyLocationId?: StringNullableFilter<"Tag"> | string | null
    tagTemplate?: XOR<TagTemplateRelationFilter, TagTemplateWhereInput>
    createdBy?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    createdLocation?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    createdReader?: XOR<ReaderNullableRelationFilter, ReaderWhereInput> | null
    companyLocation?: XOR<CompanyLocationNullableRelationFilter, CompanyLocationWhereInput> | null
    tagHistories?: TagHistoryListRelationFilter
    TagDocuments?: TagDocumentsListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    tagTemplateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdLocationId?: SortOrderInput | SortOrder
    createdReaderId?: SortOrderInput | SortOrder
    companyLocationId?: SortOrderInput | SortOrder
    tagTemplate?: TagTemplateOrderByWithRelationInput
    createdBy?: ProfileOrderByWithRelationInput
    createdLocation?: LocationOrderByWithRelationInput
    createdReader?: ReaderOrderByWithRelationInput
    companyLocation?: CompanyLocationOrderByWithRelationInput
    tagHistories?: TagHistoryOrderByRelationAggregateInput
    TagDocuments?: TagDocumentsOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uid?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    tagTemplateId?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    createdById?: StringNullableFilter<"Tag"> | string | null
    createdLocationId?: StringNullableFilter<"Tag"> | string | null
    createdReaderId?: StringNullableFilter<"Tag"> | string | null
    companyLocationId?: StringNullableFilter<"Tag"> | string | null
    tagTemplate?: XOR<TagTemplateRelationFilter, TagTemplateWhereInput>
    createdBy?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    createdLocation?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    createdReader?: XOR<ReaderNullableRelationFilter, ReaderWhereInput> | null
    companyLocation?: XOR<CompanyLocationNullableRelationFilter, CompanyLocationWhereInput> | null
    tagHistories?: TagHistoryListRelationFilter
    TagDocuments?: TagDocumentsListRelationFilter
  }, "id" | "uid">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    tagTemplateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdLocationId?: SortOrderInput | SortOrder
    createdReaderId?: SortOrderInput | SortOrder
    companyLocationId?: SortOrderInput | SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    uid?: StringWithAggregatesFilter<"Tag"> | string
    tagTemplateId?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    createdLocationId?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    createdReaderId?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    companyLocationId?: StringNullableWithAggregatesFilter<"Tag"> | string | null
  }

  export type TagHistoryWhereInput = {
    AND?: TagHistoryWhereInput | TagHistoryWhereInput[]
    OR?: TagHistoryWhereInput[]
    NOT?: TagHistoryWhereInput | TagHistoryWhereInput[]
    id?: StringFilter<"TagHistory"> | string
    tagId?: StringFilter<"TagHistory"> | string
    createdById?: StringFilter<"TagHistory"> | string
    createdAt?: DateTimeFilter<"TagHistory"> | Date | string
    createdLocationId?: StringFilter<"TagHistory"> | string
    createdReaderId?: StringFilter<"TagHistory"> | string
    action?: EnumTagActionFilter<"TagHistory"> | $Enums.TagAction
    tag?: XOR<TagRelationFilter, TagWhereInput>
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdLocation?: XOR<LocationRelationFilter, LocationWhereInput>
    createdReader?: XOR<ReaderRelationFilter, ReaderWhereInput>
  }

  export type TagHistoryOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    action?: SortOrder
    tag?: TagOrderByWithRelationInput
    createdBy?: ProfileOrderByWithRelationInput
    createdLocation?: LocationOrderByWithRelationInput
    createdReader?: ReaderOrderByWithRelationInput
  }

  export type TagHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TagHistoryWhereInput | TagHistoryWhereInput[]
    OR?: TagHistoryWhereInput[]
    NOT?: TagHistoryWhereInput | TagHistoryWhereInput[]
    tagId?: StringFilter<"TagHistory"> | string
    createdById?: StringFilter<"TagHistory"> | string
    createdAt?: DateTimeFilter<"TagHistory"> | Date | string
    createdLocationId?: StringFilter<"TagHistory"> | string
    createdReaderId?: StringFilter<"TagHistory"> | string
    action?: EnumTagActionFilter<"TagHistory"> | $Enums.TagAction
    tag?: XOR<TagRelationFilter, TagWhereInput>
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdLocation?: XOR<LocationRelationFilter, LocationWhereInput>
    createdReader?: XOR<ReaderRelationFilter, ReaderWhereInput>
  }, "id">

  export type TagHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    action?: SortOrder
    _count?: TagHistoryCountOrderByAggregateInput
    _max?: TagHistoryMaxOrderByAggregateInput
    _min?: TagHistoryMinOrderByAggregateInput
  }

  export type TagHistoryScalarWhereWithAggregatesInput = {
    AND?: TagHistoryScalarWhereWithAggregatesInput | TagHistoryScalarWhereWithAggregatesInput[]
    OR?: TagHistoryScalarWhereWithAggregatesInput[]
    NOT?: TagHistoryScalarWhereWithAggregatesInput | TagHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagHistory"> | string
    tagId?: StringWithAggregatesFilter<"TagHistory"> | string
    createdById?: StringWithAggregatesFilter<"TagHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TagHistory"> | Date | string
    createdLocationId?: StringWithAggregatesFilter<"TagHistory"> | string
    createdReaderId?: StringWithAggregatesFilter<"TagHistory"> | string
    action?: EnumTagActionWithAggregatesFilter<"TagHistory"> | $Enums.TagAction
  }

  export type FilesWhereInput = {
    AND?: FilesWhereInput | FilesWhereInput[]
    OR?: FilesWhereInput[]
    NOT?: FilesWhereInput | FilesWhereInput[]
    id?: StringFilter<"Files"> | string
    name?: StringNullableFilter<"Files"> | string | null
    fileName?: StringFilter<"Files"> | string
    blobName?: StringFilter<"Files"> | string
    containerName?: StringFilter<"Files"> | string
    blobUrl?: StringFilter<"Files"> | string
    contentType?: StringFilter<"Files"> | string
    fileSize?: IntFilter<"Files"> | number
    createdById?: StringNullableFilter<"Files"> | string | null
    createdAt?: DateTimeFilter<"Files"> | Date | string
    updatedAt?: DateTimeFilter<"Files"> | Date | string
    createdBy?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    profiles?: ProfileListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
  }

  export type FilesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    fileName?: SortOrder
    blobName?: SortOrder
    containerName?: SortOrder
    blobUrl?: SortOrder
    contentType?: SortOrder
    fileSize?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    profiles?: ProfileOrderByRelationAggregateInput
    tagTemplates?: TagTemplateOrderByRelationAggregateInput
    documentTemplates?: DocumentTemplateOrderByRelationAggregateInput
  }

  export type FilesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    blobName?: string
    blobUrl?: string
    AND?: FilesWhereInput | FilesWhereInput[]
    OR?: FilesWhereInput[]
    NOT?: FilesWhereInput | FilesWhereInput[]
    name?: StringNullableFilter<"Files"> | string | null
    fileName?: StringFilter<"Files"> | string
    containerName?: StringFilter<"Files"> | string
    contentType?: StringFilter<"Files"> | string
    fileSize?: IntFilter<"Files"> | number
    createdById?: StringNullableFilter<"Files"> | string | null
    createdAt?: DateTimeFilter<"Files"> | Date | string
    updatedAt?: DateTimeFilter<"Files"> | Date | string
    createdBy?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    profiles?: ProfileListRelationFilter
    tagTemplates?: TagTemplateListRelationFilter
    documentTemplates?: DocumentTemplateListRelationFilter
  }, "id" | "blobName" | "blobUrl">

  export type FilesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    fileName?: SortOrder
    blobName?: SortOrder
    containerName?: SortOrder
    blobUrl?: SortOrder
    contentType?: SortOrder
    fileSize?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FilesCountOrderByAggregateInput
    _avg?: FilesAvgOrderByAggregateInput
    _max?: FilesMaxOrderByAggregateInput
    _min?: FilesMinOrderByAggregateInput
    _sum?: FilesSumOrderByAggregateInput
  }

  export type FilesScalarWhereWithAggregatesInput = {
    AND?: FilesScalarWhereWithAggregatesInput | FilesScalarWhereWithAggregatesInput[]
    OR?: FilesScalarWhereWithAggregatesInput[]
    NOT?: FilesScalarWhereWithAggregatesInput | FilesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Files"> | string
    name?: StringNullableWithAggregatesFilter<"Files"> | string | null
    fileName?: StringWithAggregatesFilter<"Files"> | string
    blobName?: StringWithAggregatesFilter<"Files"> | string
    containerName?: StringWithAggregatesFilter<"Files"> | string
    blobUrl?: StringWithAggregatesFilter<"Files"> | string
    contentType?: StringWithAggregatesFilter<"Files"> | string
    fileSize?: IntWithAggregatesFilter<"Files"> | number
    createdById?: StringNullableWithAggregatesFilter<"Files"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Files"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Files"> | Date | string
  }

  export type FieldWhereInput = {
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    id?: StringFilter<"Field"> | string
    label?: StringFilter<"Field"> | string
    type?: EnumFieldTypeFilter<"Field"> | $Enums.FieldType
    value?: JsonNullableFilter<"Field">
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
    tagTemplateId?: StringNullableFilter<"Field"> | string | null
    documentTemplateId?: StringNullableFilter<"Field"> | string | null
    tagTemplate?: XOR<TagTemplateNullableRelationFilter, TagTemplateWhereInput> | null
  }

  export type FieldOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    value?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagTemplateId?: SortOrderInput | SortOrder
    documentTemplateId?: SortOrderInput | SortOrder
    tagTemplate?: TagTemplateOrderByWithRelationInput
  }

  export type FieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    label?: StringFilter<"Field"> | string
    type?: EnumFieldTypeFilter<"Field"> | $Enums.FieldType
    value?: JsonNullableFilter<"Field">
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
    tagTemplateId?: StringNullableFilter<"Field"> | string | null
    documentTemplateId?: StringNullableFilter<"Field"> | string | null
    tagTemplate?: XOR<TagTemplateNullableRelationFilter, TagTemplateWhereInput> | null
  }, "id">

  export type FieldOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    value?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagTemplateId?: SortOrderInput | SortOrder
    documentTemplateId?: SortOrderInput | SortOrder
    _count?: FieldCountOrderByAggregateInput
    _max?: FieldMaxOrderByAggregateInput
    _min?: FieldMinOrderByAggregateInput
  }

  export type FieldScalarWhereWithAggregatesInput = {
    AND?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    OR?: FieldScalarWhereWithAggregatesInput[]
    NOT?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Field"> | string
    label?: StringWithAggregatesFilter<"Field"> | string
    type?: EnumFieldTypeWithAggregatesFilter<"Field"> | $Enums.FieldType
    value?: JsonNullableWithAggregatesFilter<"Field">
    createdAt?: DateTimeWithAggregatesFilter<"Field"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Field"> | Date | string
    tagTemplateId?: StringNullableWithAggregatesFilter<"Field"> | string | null
    documentTemplateId?: StringNullableWithAggregatesFilter<"Field"> | string | null
  }

  export type TagTemplateWhereInput = {
    AND?: TagTemplateWhereInput | TagTemplateWhereInput[]
    OR?: TagTemplateWhereInput[]
    NOT?: TagTemplateWhereInput | TagTemplateWhereInput[]
    id?: StringFilter<"TagTemplate"> | string
    name?: StringFilter<"TagTemplate"> | string
    imageId?: StringFilter<"TagTemplate"> | string
    createdById?: StringFilter<"TagTemplate"> | string
    createdAt?: DateTimeFilter<"TagTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TagTemplate"> | Date | string
    companyId?: StringNullableFilter<"TagTemplate"> | string | null
    image?: XOR<FilesRelationFilter, FilesWhereInput>
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    fields?: FieldListRelationFilter
    tags?: TagListRelationFilter
  }

  export type TagTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    image?: FilesOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    createdBy?: ProfileOrderByWithRelationInput
    fields?: FieldOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type TagTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TagTemplateWhereInput | TagTemplateWhereInput[]
    OR?: TagTemplateWhereInput[]
    NOT?: TagTemplateWhereInput | TagTemplateWhereInput[]
    name?: StringFilter<"TagTemplate"> | string
    imageId?: StringFilter<"TagTemplate"> | string
    createdById?: StringFilter<"TagTemplate"> | string
    createdAt?: DateTimeFilter<"TagTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TagTemplate"> | Date | string
    companyId?: StringNullableFilter<"TagTemplate"> | string | null
    image?: XOR<FilesRelationFilter, FilesWhereInput>
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    fields?: FieldListRelationFilter
    tags?: TagListRelationFilter
  }, "id">

  export type TagTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    _count?: TagTemplateCountOrderByAggregateInput
    _max?: TagTemplateMaxOrderByAggregateInput
    _min?: TagTemplateMinOrderByAggregateInput
  }

  export type TagTemplateScalarWhereWithAggregatesInput = {
    AND?: TagTemplateScalarWhereWithAggregatesInput | TagTemplateScalarWhereWithAggregatesInput[]
    OR?: TagTemplateScalarWhereWithAggregatesInput[]
    NOT?: TagTemplateScalarWhereWithAggregatesInput | TagTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagTemplate"> | string
    name?: StringWithAggregatesFilter<"TagTemplate"> | string
    imageId?: StringWithAggregatesFilter<"TagTemplate"> | string
    createdById?: StringWithAggregatesFilter<"TagTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TagTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TagTemplate"> | Date | string
    companyId?: StringNullableWithAggregatesFilter<"TagTemplate"> | string | null
  }

  export type CompanyLocationWhereInput = {
    AND?: CompanyLocationWhereInput | CompanyLocationWhereInput[]
    OR?: CompanyLocationWhereInput[]
    NOT?: CompanyLocationWhereInput | CompanyLocationWhereInput[]
    id?: StringFilter<"CompanyLocation"> | string
    name?: StringFilter<"CompanyLocation"> | string
    createdAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    companyId?: StringFilter<"CompanyLocation"> | string
    locationId?: StringFilter<"CompanyLocation"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    tags?: TagListRelationFilter
  }

  export type CompanyLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    locationId?: SortOrder
    company?: CompanyOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type CompanyLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyLocationWhereInput | CompanyLocationWhereInput[]
    OR?: CompanyLocationWhereInput[]
    NOT?: CompanyLocationWhereInput | CompanyLocationWhereInput[]
    name?: StringFilter<"CompanyLocation"> | string
    createdAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    companyId?: StringFilter<"CompanyLocation"> | string
    locationId?: StringFilter<"CompanyLocation"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    tags?: TagListRelationFilter
  }, "id">

  export type CompanyLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    locationId?: SortOrder
    _count?: CompanyLocationCountOrderByAggregateInput
    _max?: CompanyLocationMaxOrderByAggregateInput
    _min?: CompanyLocationMinOrderByAggregateInput
  }

  export type CompanyLocationScalarWhereWithAggregatesInput = {
    AND?: CompanyLocationScalarWhereWithAggregatesInput | CompanyLocationScalarWhereWithAggregatesInput[]
    OR?: CompanyLocationScalarWhereWithAggregatesInput[]
    NOT?: CompanyLocationScalarWhereWithAggregatesInput | CompanyLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyLocation"> | string
    name?: StringWithAggregatesFilter<"CompanyLocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CompanyLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyLocation"> | Date | string
    companyId?: StringWithAggregatesFilter<"CompanyLocation"> | string
    locationId?: StringWithAggregatesFilter<"CompanyLocation"> | string
  }

  export type DocumentTemplateWhereInput = {
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    id?: StringFilter<"DocumentTemplate"> | string
    name?: StringFilter<"DocumentTemplate"> | string
    imageId?: StringNullableFilter<"DocumentTemplate"> | string | null
    fields?: JsonFilter<"DocumentTemplate">
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    companyId?: StringNullableFilter<"DocumentTemplate"> | string | null
    image?: XOR<FilesNullableRelationFilter, FilesWhereInput> | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    tagDocuments?: TagDocumentsListRelationFilter
  }

  export type DocumentTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrderInput | SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    image?: FilesOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    tagDocuments?: TagDocumentsOrderByRelationAggregateInput
  }

  export type DocumentTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    name?: StringFilter<"DocumentTemplate"> | string
    imageId?: StringNullableFilter<"DocumentTemplate"> | string | null
    fields?: JsonFilter<"DocumentTemplate">
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    companyId?: StringNullableFilter<"DocumentTemplate"> | string | null
    image?: XOR<FilesNullableRelationFilter, FilesWhereInput> | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    tagDocuments?: TagDocumentsListRelationFilter
  }, "id">

  export type DocumentTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrderInput | SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    _count?: DocumentTemplateCountOrderByAggregateInput
    _max?: DocumentTemplateMaxOrderByAggregateInput
    _min?: DocumentTemplateMinOrderByAggregateInput
  }

  export type DocumentTemplateScalarWhereWithAggregatesInput = {
    AND?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    OR?: DocumentTemplateScalarWhereWithAggregatesInput[]
    NOT?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    name?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    imageId?: StringNullableWithAggregatesFilter<"DocumentTemplate"> | string | null
    fields?: JsonWithAggregatesFilter<"DocumentTemplate">
    createdAt?: DateTimeWithAggregatesFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentTemplate"> | Date | string
    companyId?: StringNullableWithAggregatesFilter<"DocumentTemplate"> | string | null
  }

  export type TagDocumentsWhereInput = {
    AND?: TagDocumentsWhereInput | TagDocumentsWhereInput[]
    OR?: TagDocumentsWhereInput[]
    NOT?: TagDocumentsWhereInput | TagDocumentsWhereInput[]
    id?: StringFilter<"TagDocuments"> | string
    fields?: JsonFilter<"TagDocuments">
    createdAt?: DateTimeFilter<"TagDocuments"> | Date | string
    updatedAt?: DateTimeFilter<"TagDocuments"> | Date | string
    tagId?: StringFilter<"TagDocuments"> | string
    documentTemplateId?: StringFilter<"TagDocuments"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
  }

  export type TagDocumentsOrderByWithRelationInput = {
    id?: SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
    documentTemplateId?: SortOrder
    tag?: TagOrderByWithRelationInput
    documentTemplate?: DocumentTemplateOrderByWithRelationInput
  }

  export type TagDocumentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TagDocumentsWhereInput | TagDocumentsWhereInput[]
    OR?: TagDocumentsWhereInput[]
    NOT?: TagDocumentsWhereInput | TagDocumentsWhereInput[]
    fields?: JsonFilter<"TagDocuments">
    createdAt?: DateTimeFilter<"TagDocuments"> | Date | string
    updatedAt?: DateTimeFilter<"TagDocuments"> | Date | string
    tagId?: StringFilter<"TagDocuments"> | string
    documentTemplateId?: StringFilter<"TagDocuments"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    documentTemplate?: XOR<DocumentTemplateRelationFilter, DocumentTemplateWhereInput>
  }, "id">

  export type TagDocumentsOrderByWithAggregationInput = {
    id?: SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
    documentTemplateId?: SortOrder
    _count?: TagDocumentsCountOrderByAggregateInput
    _max?: TagDocumentsMaxOrderByAggregateInput
    _min?: TagDocumentsMinOrderByAggregateInput
  }

  export type TagDocumentsScalarWhereWithAggregatesInput = {
    AND?: TagDocumentsScalarWhereWithAggregatesInput | TagDocumentsScalarWhereWithAggregatesInput[]
    OR?: TagDocumentsScalarWhereWithAggregatesInput[]
    NOT?: TagDocumentsScalarWhereWithAggregatesInput | TagDocumentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagDocuments"> | string
    fields?: JsonWithAggregatesFilter<"TagDocuments">
    createdAt?: DateTimeWithAggregatesFilter<"TagDocuments"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TagDocuments"> | Date | string
    tagId?: StringWithAggregatesFilter<"TagDocuments"> | string
    documentTemplateId?: StringWithAggregatesFilter<"TagDocuments"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    profileId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    profileId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }, "id" | "profileId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    profileId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    profileId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReaderCreateInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutReadersInput
    tags?: TagCreateNestedManyWithoutCreatedReaderInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderUncheckedCreateInput = {
    address: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedReaderInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutReadersNestedInput
    tags?: TagUpdateManyWithoutCreatedReaderNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderUncheckedUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedReaderNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderCreateManyInput = {
    address: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReaderUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReaderUncheckedUpdateManyInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutLocationsInput
    tags?: TagCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutLocationsNestedInput
    tags?: TagUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagHistoryCreateInput = {
    id?: string
    createdAt?: Date | string
    action: $Enums.TagAction
    tag: TagCreateNestedOneWithoutTagHistoriesInput
    createdBy: ProfileCreateNestedOneWithoutTagHistoriesInput
    createdLocation: LocationCreateNestedOneWithoutTagHistoriesInput
    createdReader: ReaderCreateNestedOneWithoutTagHistoriesInput
  }

  export type TagHistoryUncheckedCreateInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
    tag?: TagUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdLocation?: LocationUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdReader?: ReaderUpdateOneRequiredWithoutTagHistoriesNestedInput
  }

  export type TagHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryCreateManyInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type FilesCreateInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: ProfileCreateNestedOneWithoutFilesInput
    profiles?: ProfileCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutImageInput
  }

  export type FilesUncheckedCreateInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutImageInput
  }

  export type FilesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneWithoutFilesNestedInput
    profiles?: ProfileUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutImageNestedInput
  }

  export type FilesCreateManyInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FilesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FilesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldCreateInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId?: string | null
    tagTemplate?: TagTemplateCreateNestedOneWithoutFieldsInput
  }

  export type FieldUncheckedCreateInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplateId?: string | null
    documentTemplateId?: string | null
  }

  export type FieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    tagTemplate?: TagTemplateUpdateOneWithoutFieldsNestedInput
  }

  export type FieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldCreateManyInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplateId?: string | null
    documentTemplateId?: string | null
  }

  export type FieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagTemplateCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: FilesCreateNestedOneWithoutTagTemplatesInput
    company?: CompanyCreateNestedOneWithoutTagTemplatesInput
    createdBy: ProfileCreateNestedOneWithoutTagTemplatesInput
    fields?: FieldCreateNestedManyWithoutTagTemplateInput
    tags?: TagCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    fields?: FieldUncheckedCreateNestedManyWithoutTagTemplateInput
    tags?: TagUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneRequiredWithoutTagTemplatesNestedInput
    company?: CompanyUpdateOneWithoutTagTemplatesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput
    fields?: FieldUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: FieldUncheckedUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateCreateManyInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type TagTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyLocationCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCompanyLocationsInput
    location: LocationCreateNestedOneWithoutCompanyLocationsInput
    tags?: TagCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    locationId: string
    tags?: TagUncheckedCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanyLocationsNestedInput
    location?: LocationUpdateOneRequiredWithoutCompanyLocationsNestedInput
    tags?: TagUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    locationId: string
  }

  export type CompanyLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTemplateCreateInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FilesCreateNestedOneWithoutDocumentTemplatesInput
    company?: CompanyCreateNestedOneWithoutDocumentTemplatesInput
    tagDocuments?: TagDocumentsCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateInput = {
    id?: string
    name: string
    imageId?: string | null
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    tagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneWithoutDocumentTemplatesNestedInput
    company?: CompanyUpdateOneWithoutDocumentTemplatesNestedInput
    tagDocuments?: TagDocumentsUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    tagDocuments?: TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateCreateManyInput = {
    id?: string
    name: string
    imageId?: string | null
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type DocumentTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagDocumentsCreateInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tag: TagCreateNestedOneWithoutTagDocumentsInput
    documentTemplate: DocumentTemplateCreateNestedOneWithoutTagDocumentsInput
  }

  export type TagDocumentsUncheckedCreateInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId: string
    documentTemplateId: string
  }

  export type TagDocumentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutTagDocumentsNestedInput
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutTagDocumentsNestedInput
  }

  export type TagDocumentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
  }

  export type TagDocumentsCreateManyInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId: string
    documentTemplateId: string
  }

  export type TagDocumentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagDocumentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    profileId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    profileId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FilesNullableRelationFilter = {
    is?: FilesWhereInput | null
    isNot?: FilesWhereInput | null
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type FilesListRelationFilter = {
    every?: FilesWhereInput
    some?: FilesWhereInput
    none?: FilesWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type TagHistoryListRelationFilter = {
    every?: TagHistoryWhereInput
    some?: TagHistoryWhereInput
    none?: TagHistoryWhereInput
  }

  export type TagTemplateListRelationFilter = {
    every?: TagTemplateWhereInput
    some?: TagTemplateWhereInput
    none?: TagTemplateWhereInput
  }

  export type ReaderListRelationFilter = {
    every?: ReaderWhereInput
    some?: ReaderWhereInput
    none?: ReaderWhereInput
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FilesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReaderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureId?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureId?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureId?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumIndustryFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryFilter<$PrismaModel> | $Enums.Industry
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type CompanyLocationListRelationFilter = {
    every?: CompanyLocationWhereInput
    some?: CompanyLocationWhereInput
    none?: CompanyLocationWhereInput
  }

  export type DocumentTemplateListRelationFilter = {
    every?: DocumentTemplateWhereInput
    some?: DocumentTemplateWhereInput
    none?: DocumentTemplateWhereInput
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumIndustryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryWithAggregatesFilter<$PrismaModel> | $Enums.Industry
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryFilter<$PrismaModel>
    _max?: NestedEnumIndustryFilter<$PrismaModel>
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type ReaderCountOrderByAggregateInput = {
    address?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReaderMaxOrderByAggregateInput = {
    address?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReaderMinOrderByAggregateInput = {
    address?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    formattedAddress?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    lat?: SortOrder
    lon?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    formattedAddress?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    formattedAddress?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    lat?: SortOrder
    lon?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TagTemplateRelationFilter = {
    is?: TagTemplateWhereInput
    isNot?: TagTemplateWhereInput
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type LocationNullableRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type ReaderNullableRelationFilter = {
    is?: ReaderWhereInput | null
    isNot?: ReaderWhereInput | null
  }

  export type CompanyLocationNullableRelationFilter = {
    is?: CompanyLocationWhereInput | null
    isNot?: CompanyLocationWhereInput | null
  }

  export type TagDocumentsListRelationFilter = {
    every?: TagDocumentsWhereInput
    some?: TagDocumentsWhereInput
    none?: TagDocumentsWhereInput
  }

  export type TagDocumentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    tagTemplateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    companyLocationId?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    tagTemplateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    companyLocationId?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    tagTemplateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    companyLocationId?: SortOrder
  }

  export type EnumTagActionFilter<$PrismaModel = never> = {
    equals?: $Enums.TagAction | EnumTagActionFieldRefInput<$PrismaModel>
    in?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    not?: NestedEnumTagActionFilter<$PrismaModel> | $Enums.TagAction
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type ReaderRelationFilter = {
    is?: ReaderWhereInput
    isNot?: ReaderWhereInput
  }

  export type TagHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    action?: SortOrder
  }

  export type TagHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    action?: SortOrder
  }

  export type TagHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdLocationId?: SortOrder
    createdReaderId?: SortOrder
    action?: SortOrder
  }

  export type EnumTagActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagAction | EnumTagActionFieldRefInput<$PrismaModel>
    in?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    not?: NestedEnumTagActionWithAggregatesFilter<$PrismaModel> | $Enums.TagAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagActionFilter<$PrismaModel>
    _max?: NestedEnumTagActionFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FilesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileName?: SortOrder
    blobName?: SortOrder
    containerName?: SortOrder
    blobUrl?: SortOrder
    contentType?: SortOrder
    fileSize?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FilesAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FilesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileName?: SortOrder
    blobName?: SortOrder
    containerName?: SortOrder
    blobUrl?: SortOrder
    contentType?: SortOrder
    fileSize?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FilesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileName?: SortOrder
    blobName?: SortOrder
    containerName?: SortOrder
    blobUrl?: SortOrder
    contentType?: SortOrder
    fileSize?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FilesSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TagTemplateNullableRelationFilter = {
    is?: TagTemplateWhereInput | null
    isNot?: TagTemplateWhereInput | null
  }

  export type FieldCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagTemplateId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type FieldMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagTemplateId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type FieldMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagTemplateId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type EnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FilesRelationFilter = {
    is?: FilesWhereInput
    isNot?: FilesWhereInput
  }

  export type FieldListRelationFilter = {
    every?: FieldWhereInput
    some?: FieldWhereInput
    none?: FieldWhereInput
  }

  export type FieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }

  export type TagTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }

  export type TagTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type CompanyLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    locationId?: SortOrder
  }

  export type CompanyLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    locationId?: SortOrder
  }

  export type CompanyLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    locationId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DocumentTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }

  export type DocumentTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }

  export type DocumentTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DocumentTemplateRelationFilter = {
    is?: DocumentTemplateWhereInput
    isNot?: DocumentTemplateWhereInput
  }

  export type TagDocumentsCountOrderByAggregateInput = {
    id?: SortOrder
    fields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type TagDocumentsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type TagDocumentsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
    documentTemplateId?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FilesCreateNestedOneWithoutProfilesInput = {
    create?: XOR<FilesCreateWithoutProfilesInput, FilesUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutProfilesInput
    connect?: FilesWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutProfilesInput = {
    create?: XOR<CompanyCreateWithoutProfilesInput, CompanyUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProfilesInput
    connect?: CompanyWhereUniqueInput
  }

  export type FilesCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput> | FilesCreateWithoutCreatedByInput[] | FilesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutCreatedByInput | FilesCreateOrConnectWithoutCreatedByInput[]
    createMany?: FilesCreateManyCreatedByInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput> | TagCreateWithoutCreatedByInput[] | TagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedByInput | TagCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagCreateManyCreatedByInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput> | TagHistoryCreateWithoutCreatedByInput[] | TagHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedByInput | TagHistoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagHistoryCreateManyCreatedByInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type TagTemplateCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput> | TagTemplateCreateWithoutCreatedByInput[] | TagTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCreatedByInput | TagTemplateCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagTemplateCreateManyCreatedByInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type ReaderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput> | ReaderCreateWithoutCreatedByInput[] | ReaderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReaderCreateOrConnectWithoutCreatedByInput | ReaderCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReaderCreateManyCreatedByInputEnvelope
    connect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput> | LocationCreateWithoutCreatedByInput[] | LocationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCreatedByInput | LocationCreateOrConnectWithoutCreatedByInput[]
    createMany?: LocationCreateManyCreatedByInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type FilesUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput> | FilesCreateWithoutCreatedByInput[] | FilesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutCreatedByInput | FilesCreateOrConnectWithoutCreatedByInput[]
    createMany?: FilesCreateManyCreatedByInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput> | TagCreateWithoutCreatedByInput[] | TagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedByInput | TagCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagCreateManyCreatedByInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput> | TagHistoryCreateWithoutCreatedByInput[] | TagHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedByInput | TagHistoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagHistoryCreateManyCreatedByInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput> | TagTemplateCreateWithoutCreatedByInput[] | TagTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCreatedByInput | TagTemplateCreateOrConnectWithoutCreatedByInput[]
    createMany?: TagTemplateCreateManyCreatedByInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type ReaderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput> | ReaderCreateWithoutCreatedByInput[] | ReaderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReaderCreateOrConnectWithoutCreatedByInput | ReaderCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReaderCreateManyCreatedByInputEnvelope
    connect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput> | LocationCreateWithoutCreatedByInput[] | LocationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCreatedByInput | LocationCreateOrConnectWithoutCreatedByInput[]
    createMany?: LocationCreateManyCreatedByInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FilesUpdateOneWithoutProfilesNestedInput = {
    create?: XOR<FilesCreateWithoutProfilesInput, FilesUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutProfilesInput
    upsert?: FilesUpsertWithoutProfilesInput
    disconnect?: FilesWhereInput | boolean
    delete?: FilesWhereInput | boolean
    connect?: FilesWhereUniqueInput
    update?: XOR<XOR<FilesUpdateToOneWithWhereWithoutProfilesInput, FilesUpdateWithoutProfilesInput>, FilesUncheckedUpdateWithoutProfilesInput>
  }

  export type CompanyUpdateOneWithoutProfilesNestedInput = {
    create?: XOR<CompanyCreateWithoutProfilesInput, CompanyUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProfilesInput
    upsert?: CompanyUpsertWithoutProfilesInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutProfilesInput, CompanyUpdateWithoutProfilesInput>, CompanyUncheckedUpdateWithoutProfilesInput>
  }

  export type FilesUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput> | FilesCreateWithoutCreatedByInput[] | FilesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutCreatedByInput | FilesCreateOrConnectWithoutCreatedByInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutCreatedByInput | FilesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FilesCreateManyCreatedByInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutCreatedByInput | FilesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutCreatedByInput | FilesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type TagUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput> | TagCreateWithoutCreatedByInput[] | TagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedByInput | TagCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedByInput | TagUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagCreateManyCreatedByInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedByInput | TagUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedByInput | TagUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput> | TagHistoryCreateWithoutCreatedByInput[] | TagHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedByInput | TagHistoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedByInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagHistoryCreateManyCreatedByInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedByInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedByInput | TagHistoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type TagTemplateUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput> | TagTemplateCreateWithoutCreatedByInput[] | TagTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCreatedByInput | TagTemplateCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutCreatedByInput | TagTemplateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagTemplateCreateManyCreatedByInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutCreatedByInput | TagTemplateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutCreatedByInput | TagTemplateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type ReaderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput> | ReaderCreateWithoutCreatedByInput[] | ReaderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReaderCreateOrConnectWithoutCreatedByInput | ReaderCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReaderUpsertWithWhereUniqueWithoutCreatedByInput | ReaderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReaderCreateManyCreatedByInputEnvelope
    set?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    disconnect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    delete?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    connect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    update?: ReaderUpdateWithWhereUniqueWithoutCreatedByInput | ReaderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReaderUpdateManyWithWhereWithoutCreatedByInput | ReaderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReaderScalarWhereInput | ReaderScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput> | LocationCreateWithoutCreatedByInput[] | LocationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCreatedByInput | LocationCreateOrConnectWithoutCreatedByInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutCreatedByInput | LocationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LocationCreateManyCreatedByInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutCreatedByInput | LocationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutCreatedByInput | LocationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type UserUpdateOneWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type FilesUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput> | FilesCreateWithoutCreatedByInput[] | FilesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutCreatedByInput | FilesCreateOrConnectWithoutCreatedByInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutCreatedByInput | FilesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FilesCreateManyCreatedByInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutCreatedByInput | FilesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutCreatedByInput | FilesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput> | TagCreateWithoutCreatedByInput[] | TagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedByInput | TagCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedByInput | TagUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagCreateManyCreatedByInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedByInput | TagUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedByInput | TagUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput> | TagHistoryCreateWithoutCreatedByInput[] | TagHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedByInput | TagHistoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedByInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagHistoryCreateManyCreatedByInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedByInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedByInput | TagHistoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput> | TagTemplateCreateWithoutCreatedByInput[] | TagTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCreatedByInput | TagTemplateCreateOrConnectWithoutCreatedByInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutCreatedByInput | TagTemplateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TagTemplateCreateManyCreatedByInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutCreatedByInput | TagTemplateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutCreatedByInput | TagTemplateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type ReaderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput> | ReaderCreateWithoutCreatedByInput[] | ReaderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReaderCreateOrConnectWithoutCreatedByInput | ReaderCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReaderUpsertWithWhereUniqueWithoutCreatedByInput | ReaderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReaderCreateManyCreatedByInputEnvelope
    set?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    disconnect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    delete?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    connect?: ReaderWhereUniqueInput | ReaderWhereUniqueInput[]
    update?: ReaderUpdateWithWhereUniqueWithoutCreatedByInput | ReaderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReaderUpdateManyWithWhereWithoutCreatedByInput | ReaderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReaderScalarWhereInput | ReaderScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput> | LocationCreateWithoutCreatedByInput[] | LocationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCreatedByInput | LocationCreateOrConnectWithoutCreatedByInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutCreatedByInput | LocationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LocationCreateManyCreatedByInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutCreatedByInput | LocationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutCreatedByInput | LocationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type ProfileCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput> | ProfileCreateWithoutCompanyInput[] | ProfileUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCompanyInput | ProfileCreateOrConnectWithoutCompanyInput[]
    createMany?: ProfileCreateManyCompanyInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type CompanyLocationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput> | CompanyLocationCreateWithoutCompanyInput[] | CompanyLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutCompanyInput | CompanyLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyLocationCreateManyCompanyInputEnvelope
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
  }

  export type DocumentTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput> | DocumentTemplateCreateWithoutCompanyInput[] | DocumentTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutCompanyInput | DocumentTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: DocumentTemplateCreateManyCompanyInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type TagTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput> | TagTemplateCreateWithoutCompanyInput[] | TagTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCompanyInput | TagTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: TagTemplateCreateManyCompanyInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput> | ProfileCreateWithoutCompanyInput[] | ProfileUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCompanyInput | ProfileCreateOrConnectWithoutCompanyInput[]
    createMany?: ProfileCreateManyCompanyInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type CompanyLocationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput> | CompanyLocationCreateWithoutCompanyInput[] | CompanyLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutCompanyInput | CompanyLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyLocationCreateManyCompanyInputEnvelope
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
  }

  export type DocumentTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput> | DocumentTemplateCreateWithoutCompanyInput[] | DocumentTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutCompanyInput | DocumentTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: DocumentTemplateCreateManyCompanyInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type TagTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput> | TagTemplateCreateWithoutCompanyInput[] | TagTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCompanyInput | TagTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: TagTemplateCreateManyCompanyInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type EnumIndustryFieldUpdateOperationsInput = {
    set?: $Enums.Industry
  }

  export type ProfileUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput> | ProfileCreateWithoutCompanyInput[] | ProfileUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCompanyInput | ProfileCreateOrConnectWithoutCompanyInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCompanyInput | ProfileUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ProfileCreateManyCompanyInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCompanyInput | ProfileUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCompanyInput | ProfileUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type CompanyLocationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput> | CompanyLocationCreateWithoutCompanyInput[] | CompanyLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutCompanyInput | CompanyLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyLocationUpsertWithWhereUniqueWithoutCompanyInput | CompanyLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyLocationCreateManyCompanyInputEnvelope
    set?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    disconnect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    delete?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    update?: CompanyLocationUpdateWithWhereUniqueWithoutCompanyInput | CompanyLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyLocationUpdateManyWithWhereWithoutCompanyInput | CompanyLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
  }

  export type DocumentTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput> | DocumentTemplateCreateWithoutCompanyInput[] | DocumentTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutCompanyInput | DocumentTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutCompanyInput | DocumentTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DocumentTemplateCreateManyCompanyInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutCompanyInput | DocumentTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutCompanyInput | DocumentTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type TagTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput> | TagTemplateCreateWithoutCompanyInput[] | TagTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCompanyInput | TagTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutCompanyInput | TagTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: TagTemplateCreateManyCompanyInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutCompanyInput | TagTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutCompanyInput | TagTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput> | ProfileCreateWithoutCompanyInput[] | ProfileUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCompanyInput | ProfileCreateOrConnectWithoutCompanyInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCompanyInput | ProfileUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ProfileCreateManyCompanyInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCompanyInput | ProfileUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCompanyInput | ProfileUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type CompanyLocationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput> | CompanyLocationCreateWithoutCompanyInput[] | CompanyLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutCompanyInput | CompanyLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyLocationUpsertWithWhereUniqueWithoutCompanyInput | CompanyLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyLocationCreateManyCompanyInputEnvelope
    set?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    disconnect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    delete?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    update?: CompanyLocationUpdateWithWhereUniqueWithoutCompanyInput | CompanyLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyLocationUpdateManyWithWhereWithoutCompanyInput | CompanyLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput> | DocumentTemplateCreateWithoutCompanyInput[] | DocumentTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutCompanyInput | DocumentTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutCompanyInput | DocumentTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DocumentTemplateCreateManyCompanyInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutCompanyInput | DocumentTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutCompanyInput | DocumentTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type TagTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput> | TagTemplateCreateWithoutCompanyInput[] | TagTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutCompanyInput | TagTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutCompanyInput | TagTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: TagTemplateCreateManyCompanyInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutCompanyInput | TagTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutCompanyInput | TagTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutReadersInput = {
    create?: XOR<ProfileCreateWithoutReadersInput, ProfileUncheckedCreateWithoutReadersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReadersInput
    connect?: ProfileWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutCreatedReaderInput = {
    create?: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput> | TagCreateWithoutCreatedReaderInput[] | TagUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedReaderInput | TagCreateOrConnectWithoutCreatedReaderInput[]
    createMany?: TagCreateManyCreatedReaderInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryCreateNestedManyWithoutCreatedReaderInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput> | TagHistoryCreateWithoutCreatedReaderInput[] | TagHistoryUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedReaderInput | TagHistoryCreateOrConnectWithoutCreatedReaderInput[]
    createMany?: TagHistoryCreateManyCreatedReaderInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutCreatedReaderInput = {
    create?: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput> | TagCreateWithoutCreatedReaderInput[] | TagUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedReaderInput | TagCreateOrConnectWithoutCreatedReaderInput[]
    createMany?: TagCreateManyCreatedReaderInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryUncheckedCreateNestedManyWithoutCreatedReaderInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput> | TagHistoryCreateWithoutCreatedReaderInput[] | TagHistoryUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedReaderInput | TagHistoryCreateOrConnectWithoutCreatedReaderInput[]
    createMany?: TagHistoryCreateManyCreatedReaderInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type ProfileUpdateOneRequiredWithoutReadersNestedInput = {
    create?: XOR<ProfileCreateWithoutReadersInput, ProfileUncheckedCreateWithoutReadersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReadersInput
    upsert?: ProfileUpsertWithoutReadersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutReadersInput, ProfileUpdateWithoutReadersInput>, ProfileUncheckedUpdateWithoutReadersInput>
  }

  export type TagUpdateManyWithoutCreatedReaderNestedInput = {
    create?: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput> | TagCreateWithoutCreatedReaderInput[] | TagUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedReaderInput | TagCreateOrConnectWithoutCreatedReaderInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedReaderInput | TagUpsertWithWhereUniqueWithoutCreatedReaderInput[]
    createMany?: TagCreateManyCreatedReaderInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedReaderInput | TagUpdateWithWhereUniqueWithoutCreatedReaderInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedReaderInput | TagUpdateManyWithWhereWithoutCreatedReaderInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUpdateManyWithoutCreatedReaderNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput> | TagHistoryCreateWithoutCreatedReaderInput[] | TagHistoryUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedReaderInput | TagHistoryCreateOrConnectWithoutCreatedReaderInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedReaderInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedReaderInput[]
    createMany?: TagHistoryCreateManyCreatedReaderInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedReaderInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedReaderInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedReaderInput | TagHistoryUpdateManyWithWhereWithoutCreatedReaderInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutCreatedReaderNestedInput = {
    create?: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput> | TagCreateWithoutCreatedReaderInput[] | TagUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedReaderInput | TagCreateOrConnectWithoutCreatedReaderInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedReaderInput | TagUpsertWithWhereUniqueWithoutCreatedReaderInput[]
    createMany?: TagCreateManyCreatedReaderInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedReaderInput | TagUpdateWithWhereUniqueWithoutCreatedReaderInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedReaderInput | TagUpdateManyWithWhereWithoutCreatedReaderInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedReaderNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput> | TagHistoryCreateWithoutCreatedReaderInput[] | TagHistoryUncheckedCreateWithoutCreatedReaderInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedReaderInput | TagHistoryCreateOrConnectWithoutCreatedReaderInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedReaderInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedReaderInput[]
    createMany?: TagHistoryCreateManyCreatedReaderInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedReaderInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedReaderInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedReaderInput | TagHistoryUpdateManyWithWhereWithoutCreatedReaderInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutLocationsInput = {
    create?: XOR<ProfileCreateWithoutLocationsInput, ProfileUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutLocationsInput
    connect?: ProfileWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutCreatedLocationInput = {
    create?: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput> | TagCreateWithoutCreatedLocationInput[] | TagUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedLocationInput | TagCreateOrConnectWithoutCreatedLocationInput[]
    createMany?: TagCreateManyCreatedLocationInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryCreateNestedManyWithoutCreatedLocationInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput> | TagHistoryCreateWithoutCreatedLocationInput[] | TagHistoryUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedLocationInput | TagHistoryCreateOrConnectWithoutCreatedLocationInput[]
    createMany?: TagHistoryCreateManyCreatedLocationInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type CompanyLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput> | CompanyLocationCreateWithoutLocationInput[] | CompanyLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutLocationInput | CompanyLocationCreateOrConnectWithoutLocationInput[]
    createMany?: CompanyLocationCreateManyLocationInputEnvelope
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutCreatedLocationInput = {
    create?: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput> | TagCreateWithoutCreatedLocationInput[] | TagUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedLocationInput | TagCreateOrConnectWithoutCreatedLocationInput[]
    createMany?: TagCreateManyCreatedLocationInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagHistoryUncheckedCreateNestedManyWithoutCreatedLocationInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput> | TagHistoryCreateWithoutCreatedLocationInput[] | TagHistoryUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedLocationInput | TagHistoryCreateOrConnectWithoutCreatedLocationInput[]
    createMany?: TagHistoryCreateManyCreatedLocationInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type CompanyLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput> | CompanyLocationCreateWithoutLocationInput[] | CompanyLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutLocationInput | CompanyLocationCreateOrConnectWithoutLocationInput[]
    createMany?: CompanyLocationCreateManyLocationInputEnvelope
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<ProfileCreateWithoutLocationsInput, ProfileUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutLocationsInput
    upsert?: ProfileUpsertWithoutLocationsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutLocationsInput, ProfileUpdateWithoutLocationsInput>, ProfileUncheckedUpdateWithoutLocationsInput>
  }

  export type TagUpdateManyWithoutCreatedLocationNestedInput = {
    create?: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput> | TagCreateWithoutCreatedLocationInput[] | TagUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedLocationInput | TagCreateOrConnectWithoutCreatedLocationInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedLocationInput | TagUpsertWithWhereUniqueWithoutCreatedLocationInput[]
    createMany?: TagCreateManyCreatedLocationInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedLocationInput | TagUpdateWithWhereUniqueWithoutCreatedLocationInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedLocationInput | TagUpdateManyWithWhereWithoutCreatedLocationInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUpdateManyWithoutCreatedLocationNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput> | TagHistoryCreateWithoutCreatedLocationInput[] | TagHistoryUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedLocationInput | TagHistoryCreateOrConnectWithoutCreatedLocationInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedLocationInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedLocationInput[]
    createMany?: TagHistoryCreateManyCreatedLocationInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedLocationInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedLocationInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedLocationInput | TagHistoryUpdateManyWithWhereWithoutCreatedLocationInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type CompanyLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput> | CompanyLocationCreateWithoutLocationInput[] | CompanyLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutLocationInput | CompanyLocationCreateOrConnectWithoutLocationInput[]
    upsert?: CompanyLocationUpsertWithWhereUniqueWithoutLocationInput | CompanyLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: CompanyLocationCreateManyLocationInputEnvelope
    set?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    disconnect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    delete?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    update?: CompanyLocationUpdateWithWhereUniqueWithoutLocationInput | CompanyLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: CompanyLocationUpdateManyWithWhereWithoutLocationInput | CompanyLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutCreatedLocationNestedInput = {
    create?: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput> | TagCreateWithoutCreatedLocationInput[] | TagUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCreatedLocationInput | TagCreateOrConnectWithoutCreatedLocationInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCreatedLocationInput | TagUpsertWithWhereUniqueWithoutCreatedLocationInput[]
    createMany?: TagCreateManyCreatedLocationInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCreatedLocationInput | TagUpdateWithWhereUniqueWithoutCreatedLocationInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCreatedLocationInput | TagUpdateManyWithWhereWithoutCreatedLocationInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedLocationNestedInput = {
    create?: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput> | TagHistoryCreateWithoutCreatedLocationInput[] | TagHistoryUncheckedCreateWithoutCreatedLocationInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutCreatedLocationInput | TagHistoryCreateOrConnectWithoutCreatedLocationInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutCreatedLocationInput | TagHistoryUpsertWithWhereUniqueWithoutCreatedLocationInput[]
    createMany?: TagHistoryCreateManyCreatedLocationInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutCreatedLocationInput | TagHistoryUpdateWithWhereUniqueWithoutCreatedLocationInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutCreatedLocationInput | TagHistoryUpdateManyWithWhereWithoutCreatedLocationInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type CompanyLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput> | CompanyLocationCreateWithoutLocationInput[] | CompanyLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutLocationInput | CompanyLocationCreateOrConnectWithoutLocationInput[]
    upsert?: CompanyLocationUpsertWithWhereUniqueWithoutLocationInput | CompanyLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: CompanyLocationCreateManyLocationInputEnvelope
    set?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    disconnect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    delete?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    connect?: CompanyLocationWhereUniqueInput | CompanyLocationWhereUniqueInput[]
    update?: CompanyLocationUpdateWithWhereUniqueWithoutLocationInput | CompanyLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: CompanyLocationUpdateManyWithWhereWithoutLocationInput | CompanyLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
  }

  export type TagTemplateCreateNestedOneWithoutTagsInput = {
    create?: XOR<TagTemplateCreateWithoutTagsInput, TagTemplateUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TagTemplateCreateOrConnectWithoutTagsInput
    connect?: TagTemplateWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutTagsInput = {
    create?: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagsInput
    connect?: ProfileWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutTagsInput = {
    create?: XOR<LocationCreateWithoutTagsInput, LocationUncheckedCreateWithoutTagsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTagsInput
    connect?: LocationWhereUniqueInput
  }

  export type ReaderCreateNestedOneWithoutTagsInput = {
    create?: XOR<ReaderCreateWithoutTagsInput, ReaderUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ReaderCreateOrConnectWithoutTagsInput
    connect?: ReaderWhereUniqueInput
  }

  export type CompanyLocationCreateNestedOneWithoutTagsInput = {
    create?: XOR<CompanyLocationCreateWithoutTagsInput, CompanyLocationUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutTagsInput
    connect?: CompanyLocationWhereUniqueInput
  }

  export type TagHistoryCreateNestedManyWithoutTagInput = {
    create?: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput> | TagHistoryCreateWithoutTagInput[] | TagHistoryUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutTagInput | TagHistoryCreateOrConnectWithoutTagInput[]
    createMany?: TagHistoryCreateManyTagInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type TagDocumentsCreateNestedManyWithoutTagInput = {
    create?: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput> | TagDocumentsCreateWithoutTagInput[] | TagDocumentsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutTagInput | TagDocumentsCreateOrConnectWithoutTagInput[]
    createMany?: TagDocumentsCreateManyTagInputEnvelope
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
  }

  export type TagHistoryUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput> | TagHistoryCreateWithoutTagInput[] | TagHistoryUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutTagInput | TagHistoryCreateOrConnectWithoutTagInput[]
    createMany?: TagHistoryCreateManyTagInputEnvelope
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
  }

  export type TagDocumentsUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput> | TagDocumentsCreateWithoutTagInput[] | TagDocumentsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutTagInput | TagDocumentsCreateOrConnectWithoutTagInput[]
    createMany?: TagDocumentsCreateManyTagInputEnvelope
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
  }

  export type TagTemplateUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<TagTemplateCreateWithoutTagsInput, TagTemplateUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TagTemplateCreateOrConnectWithoutTagsInput
    upsert?: TagTemplateUpsertWithoutTagsInput
    connect?: TagTemplateWhereUniqueInput
    update?: XOR<XOR<TagTemplateUpdateToOneWithWhereWithoutTagsInput, TagTemplateUpdateWithoutTagsInput>, TagTemplateUncheckedUpdateWithoutTagsInput>
  }

  export type ProfileUpdateOneWithoutTagsNestedInput = {
    create?: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagsInput
    upsert?: ProfileUpsertWithoutTagsInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutTagsInput, ProfileUpdateWithoutTagsInput>, ProfileUncheckedUpdateWithoutTagsInput>
  }

  export type LocationUpdateOneWithoutTagsNestedInput = {
    create?: XOR<LocationCreateWithoutTagsInput, LocationUncheckedCreateWithoutTagsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTagsInput
    upsert?: LocationUpsertWithoutTagsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTagsInput, LocationUpdateWithoutTagsInput>, LocationUncheckedUpdateWithoutTagsInput>
  }

  export type ReaderUpdateOneWithoutTagsNestedInput = {
    create?: XOR<ReaderCreateWithoutTagsInput, ReaderUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ReaderCreateOrConnectWithoutTagsInput
    upsert?: ReaderUpsertWithoutTagsInput
    disconnect?: ReaderWhereInput | boolean
    delete?: ReaderWhereInput | boolean
    connect?: ReaderWhereUniqueInput
    update?: XOR<XOR<ReaderUpdateToOneWithWhereWithoutTagsInput, ReaderUpdateWithoutTagsInput>, ReaderUncheckedUpdateWithoutTagsInput>
  }

  export type CompanyLocationUpdateOneWithoutTagsNestedInput = {
    create?: XOR<CompanyLocationCreateWithoutTagsInput, CompanyLocationUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CompanyLocationCreateOrConnectWithoutTagsInput
    upsert?: CompanyLocationUpsertWithoutTagsInput
    disconnect?: CompanyLocationWhereInput | boolean
    delete?: CompanyLocationWhereInput | boolean
    connect?: CompanyLocationWhereUniqueInput
    update?: XOR<XOR<CompanyLocationUpdateToOneWithWhereWithoutTagsInput, CompanyLocationUpdateWithoutTagsInput>, CompanyLocationUncheckedUpdateWithoutTagsInput>
  }

  export type TagHistoryUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput> | TagHistoryCreateWithoutTagInput[] | TagHistoryUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutTagInput | TagHistoryCreateOrConnectWithoutTagInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutTagInput | TagHistoryUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagHistoryCreateManyTagInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutTagInput | TagHistoryUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutTagInput | TagHistoryUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type TagDocumentsUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput> | TagDocumentsCreateWithoutTagInput[] | TagDocumentsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutTagInput | TagDocumentsCreateOrConnectWithoutTagInput[]
    upsert?: TagDocumentsUpsertWithWhereUniqueWithoutTagInput | TagDocumentsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagDocumentsCreateManyTagInputEnvelope
    set?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    disconnect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    delete?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    update?: TagDocumentsUpdateWithWhereUniqueWithoutTagInput | TagDocumentsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagDocumentsUpdateManyWithWhereWithoutTagInput | TagDocumentsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
  }

  export type TagHistoryUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput> | TagHistoryCreateWithoutTagInput[] | TagHistoryUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagHistoryCreateOrConnectWithoutTagInput | TagHistoryCreateOrConnectWithoutTagInput[]
    upsert?: TagHistoryUpsertWithWhereUniqueWithoutTagInput | TagHistoryUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagHistoryCreateManyTagInputEnvelope
    set?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    disconnect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    delete?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    connect?: TagHistoryWhereUniqueInput | TagHistoryWhereUniqueInput[]
    update?: TagHistoryUpdateWithWhereUniqueWithoutTagInput | TagHistoryUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagHistoryUpdateManyWithWhereWithoutTagInput | TagHistoryUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
  }

  export type TagDocumentsUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput> | TagDocumentsCreateWithoutTagInput[] | TagDocumentsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutTagInput | TagDocumentsCreateOrConnectWithoutTagInput[]
    upsert?: TagDocumentsUpsertWithWhereUniqueWithoutTagInput | TagDocumentsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagDocumentsCreateManyTagInputEnvelope
    set?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    disconnect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    delete?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    update?: TagDocumentsUpdateWithWhereUniqueWithoutTagInput | TagDocumentsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagDocumentsUpdateManyWithWhereWithoutTagInput | TagDocumentsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
  }

  export type TagCreateNestedOneWithoutTagHistoriesInput = {
    create?: XOR<TagCreateWithoutTagHistoriesInput, TagUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: TagCreateOrConnectWithoutTagHistoriesInput
    connect?: TagWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutTagHistoriesInput = {
    create?: XOR<ProfileCreateWithoutTagHistoriesInput, ProfileUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagHistoriesInput
    connect?: ProfileWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutTagHistoriesInput = {
    create?: XOR<LocationCreateWithoutTagHistoriesInput, LocationUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTagHistoriesInput
    connect?: LocationWhereUniqueInput
  }

  export type ReaderCreateNestedOneWithoutTagHistoriesInput = {
    create?: XOR<ReaderCreateWithoutTagHistoriesInput, ReaderUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: ReaderCreateOrConnectWithoutTagHistoriesInput
    connect?: ReaderWhereUniqueInput
  }

  export type EnumTagActionFieldUpdateOperationsInput = {
    set?: $Enums.TagAction
  }

  export type TagUpdateOneRequiredWithoutTagHistoriesNestedInput = {
    create?: XOR<TagCreateWithoutTagHistoriesInput, TagUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: TagCreateOrConnectWithoutTagHistoriesInput
    upsert?: TagUpsertWithoutTagHistoriesInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutTagHistoriesInput, TagUpdateWithoutTagHistoriesInput>, TagUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type ProfileUpdateOneRequiredWithoutTagHistoriesNestedInput = {
    create?: XOR<ProfileCreateWithoutTagHistoriesInput, ProfileUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagHistoriesInput
    upsert?: ProfileUpsertWithoutTagHistoriesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutTagHistoriesInput, ProfileUpdateWithoutTagHistoriesInput>, ProfileUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type LocationUpdateOneRequiredWithoutTagHistoriesNestedInput = {
    create?: XOR<LocationCreateWithoutTagHistoriesInput, LocationUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTagHistoriesInput
    upsert?: LocationUpsertWithoutTagHistoriesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTagHistoriesInput, LocationUpdateWithoutTagHistoriesInput>, LocationUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type ReaderUpdateOneRequiredWithoutTagHistoriesNestedInput = {
    create?: XOR<ReaderCreateWithoutTagHistoriesInput, ReaderUncheckedCreateWithoutTagHistoriesInput>
    connectOrCreate?: ReaderCreateOrConnectWithoutTagHistoriesInput
    upsert?: ReaderUpsertWithoutTagHistoriesInput
    connect?: ReaderWhereUniqueInput
    update?: XOR<XOR<ReaderUpdateToOneWithWhereWithoutTagHistoriesInput, ReaderUpdateWithoutTagHistoriesInput>, ReaderUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type ProfileCreateNestedOneWithoutFilesInput = {
    create?: XOR<ProfileCreateWithoutFilesInput, ProfileUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFilesInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutPictureInput = {
    create?: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput> | ProfileCreateWithoutPictureInput[] | ProfileUncheckedCreateWithoutPictureInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutPictureInput | ProfileCreateOrConnectWithoutPictureInput[]
    createMany?: ProfileCreateManyPictureInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type TagTemplateCreateNestedManyWithoutImageInput = {
    create?: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput> | TagTemplateCreateWithoutImageInput[] | TagTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutImageInput | TagTemplateCreateOrConnectWithoutImageInput[]
    createMany?: TagTemplateCreateManyImageInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type DocumentTemplateCreateNestedManyWithoutImageInput = {
    create?: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput> | DocumentTemplateCreateWithoutImageInput[] | DocumentTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutImageInput | DocumentTemplateCreateOrConnectWithoutImageInput[]
    createMany?: DocumentTemplateCreateManyImageInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutPictureInput = {
    create?: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput> | ProfileCreateWithoutPictureInput[] | ProfileUncheckedCreateWithoutPictureInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutPictureInput | ProfileCreateOrConnectWithoutPictureInput[]
    createMany?: ProfileCreateManyPictureInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type TagTemplateUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput> | TagTemplateCreateWithoutImageInput[] | TagTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutImageInput | TagTemplateCreateOrConnectWithoutImageInput[]
    createMany?: TagTemplateCreateManyImageInputEnvelope
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
  }

  export type DocumentTemplateUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput> | DocumentTemplateCreateWithoutImageInput[] | DocumentTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutImageInput | DocumentTemplateCreateOrConnectWithoutImageInput[]
    createMany?: DocumentTemplateCreateManyImageInputEnvelope
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileUpdateOneWithoutFilesNestedInput = {
    create?: XOR<ProfileCreateWithoutFilesInput, ProfileUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFilesInput
    upsert?: ProfileUpsertWithoutFilesInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutFilesInput, ProfileUpdateWithoutFilesInput>, ProfileUncheckedUpdateWithoutFilesInput>
  }

  export type ProfileUpdateManyWithoutPictureNestedInput = {
    create?: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput> | ProfileCreateWithoutPictureInput[] | ProfileUncheckedCreateWithoutPictureInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutPictureInput | ProfileCreateOrConnectWithoutPictureInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutPictureInput | ProfileUpsertWithWhereUniqueWithoutPictureInput[]
    createMany?: ProfileCreateManyPictureInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutPictureInput | ProfileUpdateWithWhereUniqueWithoutPictureInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutPictureInput | ProfileUpdateManyWithWhereWithoutPictureInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type TagTemplateUpdateManyWithoutImageNestedInput = {
    create?: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput> | TagTemplateCreateWithoutImageInput[] | TagTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutImageInput | TagTemplateCreateOrConnectWithoutImageInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutImageInput | TagTemplateUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: TagTemplateCreateManyImageInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutImageInput | TagTemplateUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutImageInput | TagTemplateUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type DocumentTemplateUpdateManyWithoutImageNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput> | DocumentTemplateCreateWithoutImageInput[] | DocumentTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutImageInput | DocumentTemplateCreateOrConnectWithoutImageInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutImageInput | DocumentTemplateUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: DocumentTemplateCreateManyImageInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutImageInput | DocumentTemplateUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutImageInput | DocumentTemplateUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutPictureNestedInput = {
    create?: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput> | ProfileCreateWithoutPictureInput[] | ProfileUncheckedCreateWithoutPictureInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutPictureInput | ProfileCreateOrConnectWithoutPictureInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutPictureInput | ProfileUpsertWithWhereUniqueWithoutPictureInput[]
    createMany?: ProfileCreateManyPictureInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutPictureInput | ProfileUpdateWithWhereUniqueWithoutPictureInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutPictureInput | ProfileUpdateManyWithWhereWithoutPictureInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type TagTemplateUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput> | TagTemplateCreateWithoutImageInput[] | TagTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: TagTemplateCreateOrConnectWithoutImageInput | TagTemplateCreateOrConnectWithoutImageInput[]
    upsert?: TagTemplateUpsertWithWhereUniqueWithoutImageInput | TagTemplateUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: TagTemplateCreateManyImageInputEnvelope
    set?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    disconnect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    delete?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    connect?: TagTemplateWhereUniqueInput | TagTemplateWhereUniqueInput[]
    update?: TagTemplateUpdateWithWhereUniqueWithoutImageInput | TagTemplateUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: TagTemplateUpdateManyWithWhereWithoutImageInput | TagTemplateUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput> | DocumentTemplateCreateWithoutImageInput[] | DocumentTemplateUncheckedCreateWithoutImageInput[]
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutImageInput | DocumentTemplateCreateOrConnectWithoutImageInput[]
    upsert?: DocumentTemplateUpsertWithWhereUniqueWithoutImageInput | DocumentTemplateUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: DocumentTemplateCreateManyImageInputEnvelope
    set?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    disconnect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    delete?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    connect?: DocumentTemplateWhereUniqueInput | DocumentTemplateWhereUniqueInput[]
    update?: DocumentTemplateUpdateWithWhereUniqueWithoutImageInput | DocumentTemplateUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: DocumentTemplateUpdateManyWithWhereWithoutImageInput | DocumentTemplateUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
  }

  export type TagTemplateCreateNestedOneWithoutFieldsInput = {
    create?: XOR<TagTemplateCreateWithoutFieldsInput, TagTemplateUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: TagTemplateCreateOrConnectWithoutFieldsInput
    connect?: TagTemplateWhereUniqueInput
  }

  export type EnumFieldTypeFieldUpdateOperationsInput = {
    set?: $Enums.FieldType
  }

  export type TagTemplateUpdateOneWithoutFieldsNestedInput = {
    create?: XOR<TagTemplateCreateWithoutFieldsInput, TagTemplateUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: TagTemplateCreateOrConnectWithoutFieldsInput
    upsert?: TagTemplateUpsertWithoutFieldsInput
    disconnect?: TagTemplateWhereInput | boolean
    delete?: TagTemplateWhereInput | boolean
    connect?: TagTemplateWhereUniqueInput
    update?: XOR<XOR<TagTemplateUpdateToOneWithWhereWithoutFieldsInput, TagTemplateUpdateWithoutFieldsInput>, TagTemplateUncheckedUpdateWithoutFieldsInput>
  }

  export type FilesCreateNestedOneWithoutTagTemplatesInput = {
    create?: XOR<FilesCreateWithoutTagTemplatesInput, FilesUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutTagTemplatesInput
    connect?: FilesWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutTagTemplatesInput = {
    create?: XOR<CompanyCreateWithoutTagTemplatesInput, CompanyUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutTagTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutTagTemplatesInput = {
    create?: XOR<ProfileCreateWithoutTagTemplatesInput, ProfileUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagTemplatesInput
    connect?: ProfileWhereUniqueInput
  }

  export type FieldCreateNestedManyWithoutTagTemplateInput = {
    create?: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput> | FieldCreateWithoutTagTemplateInput[] | FieldUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTagTemplateInput | FieldCreateOrConnectWithoutTagTemplateInput[]
    createMany?: FieldCreateManyTagTemplateInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutTagTemplateInput = {
    create?: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput> | TagCreateWithoutTagTemplateInput[] | TagUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: TagCreateOrConnectWithoutTagTemplateInput | TagCreateOrConnectWithoutTagTemplateInput[]
    createMany?: TagCreateManyTagTemplateInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type FieldUncheckedCreateNestedManyWithoutTagTemplateInput = {
    create?: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput> | FieldCreateWithoutTagTemplateInput[] | FieldUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTagTemplateInput | FieldCreateOrConnectWithoutTagTemplateInput[]
    createMany?: FieldCreateManyTagTemplateInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutTagTemplateInput = {
    create?: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput> | TagCreateWithoutTagTemplateInput[] | TagUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: TagCreateOrConnectWithoutTagTemplateInput | TagCreateOrConnectWithoutTagTemplateInput[]
    createMany?: TagCreateManyTagTemplateInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type FilesUpdateOneRequiredWithoutTagTemplatesNestedInput = {
    create?: XOR<FilesCreateWithoutTagTemplatesInput, FilesUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutTagTemplatesInput
    upsert?: FilesUpsertWithoutTagTemplatesInput
    connect?: FilesWhereUniqueInput
    update?: XOR<XOR<FilesUpdateToOneWithWhereWithoutTagTemplatesInput, FilesUpdateWithoutTagTemplatesInput>, FilesUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type CompanyUpdateOneWithoutTagTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutTagTemplatesInput, CompanyUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutTagTemplatesInput
    upsert?: CompanyUpsertWithoutTagTemplatesInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutTagTemplatesInput, CompanyUpdateWithoutTagTemplatesInput>, CompanyUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput = {
    create?: XOR<ProfileCreateWithoutTagTemplatesInput, ProfileUncheckedCreateWithoutTagTemplatesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagTemplatesInput
    upsert?: ProfileUpsertWithoutTagTemplatesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutTagTemplatesInput, ProfileUpdateWithoutTagTemplatesInput>, ProfileUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type FieldUpdateManyWithoutTagTemplateNestedInput = {
    create?: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput> | FieldCreateWithoutTagTemplateInput[] | FieldUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTagTemplateInput | FieldCreateOrConnectWithoutTagTemplateInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutTagTemplateInput | FieldUpsertWithWhereUniqueWithoutTagTemplateInput[]
    createMany?: FieldCreateManyTagTemplateInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutTagTemplateInput | FieldUpdateWithWhereUniqueWithoutTagTemplateInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutTagTemplateInput | FieldUpdateManyWithWhereWithoutTagTemplateInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type TagUpdateManyWithoutTagTemplateNestedInput = {
    create?: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput> | TagCreateWithoutTagTemplateInput[] | TagUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: TagCreateOrConnectWithoutTagTemplateInput | TagCreateOrConnectWithoutTagTemplateInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutTagTemplateInput | TagUpsertWithWhereUniqueWithoutTagTemplateInput[]
    createMany?: TagCreateManyTagTemplateInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutTagTemplateInput | TagUpdateWithWhereUniqueWithoutTagTemplateInput[]
    updateMany?: TagUpdateManyWithWhereWithoutTagTemplateInput | TagUpdateManyWithWhereWithoutTagTemplateInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type FieldUncheckedUpdateManyWithoutTagTemplateNestedInput = {
    create?: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput> | FieldCreateWithoutTagTemplateInput[] | FieldUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTagTemplateInput | FieldCreateOrConnectWithoutTagTemplateInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutTagTemplateInput | FieldUpsertWithWhereUniqueWithoutTagTemplateInput[]
    createMany?: FieldCreateManyTagTemplateInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutTagTemplateInput | FieldUpdateWithWhereUniqueWithoutTagTemplateInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutTagTemplateInput | FieldUpdateManyWithWhereWithoutTagTemplateInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutTagTemplateNestedInput = {
    create?: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput> | TagCreateWithoutTagTemplateInput[] | TagUncheckedCreateWithoutTagTemplateInput[]
    connectOrCreate?: TagCreateOrConnectWithoutTagTemplateInput | TagCreateOrConnectWithoutTagTemplateInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutTagTemplateInput | TagUpsertWithWhereUniqueWithoutTagTemplateInput[]
    createMany?: TagCreateManyTagTemplateInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutTagTemplateInput | TagUpdateWithWhereUniqueWithoutTagTemplateInput[]
    updateMany?: TagUpdateManyWithWhereWithoutTagTemplateInput | TagUpdateManyWithWhereWithoutTagTemplateInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutCompanyLocationsInput = {
    create?: XOR<CompanyCreateWithoutCompanyLocationsInput, CompanyUncheckedCreateWithoutCompanyLocationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanyLocationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutCompanyLocationsInput = {
    create?: XOR<LocationCreateWithoutCompanyLocationsInput, LocationUncheckedCreateWithoutCompanyLocationsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutCompanyLocationsInput
    connect?: LocationWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutCompanyLocationInput = {
    create?: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput> | TagCreateWithoutCompanyLocationInput[] | TagUncheckedCreateWithoutCompanyLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompanyLocationInput | TagCreateOrConnectWithoutCompanyLocationInput[]
    createMany?: TagCreateManyCompanyLocationInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutCompanyLocationInput = {
    create?: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput> | TagCreateWithoutCompanyLocationInput[] | TagUncheckedCreateWithoutCompanyLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompanyLocationInput | TagCreateOrConnectWithoutCompanyLocationInput[]
    createMany?: TagCreateManyCompanyLocationInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutCompanyLocationsNestedInput = {
    create?: XOR<CompanyCreateWithoutCompanyLocationsInput, CompanyUncheckedCreateWithoutCompanyLocationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanyLocationsInput
    upsert?: CompanyUpsertWithoutCompanyLocationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCompanyLocationsInput, CompanyUpdateWithoutCompanyLocationsInput>, CompanyUncheckedUpdateWithoutCompanyLocationsInput>
  }

  export type LocationUpdateOneRequiredWithoutCompanyLocationsNestedInput = {
    create?: XOR<LocationCreateWithoutCompanyLocationsInput, LocationUncheckedCreateWithoutCompanyLocationsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutCompanyLocationsInput
    upsert?: LocationUpsertWithoutCompanyLocationsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutCompanyLocationsInput, LocationUpdateWithoutCompanyLocationsInput>, LocationUncheckedUpdateWithoutCompanyLocationsInput>
  }

  export type TagUpdateManyWithoutCompanyLocationNestedInput = {
    create?: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput> | TagCreateWithoutCompanyLocationInput[] | TagUncheckedCreateWithoutCompanyLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompanyLocationInput | TagCreateOrConnectWithoutCompanyLocationInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCompanyLocationInput | TagUpsertWithWhereUniqueWithoutCompanyLocationInput[]
    createMany?: TagCreateManyCompanyLocationInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCompanyLocationInput | TagUpdateWithWhereUniqueWithoutCompanyLocationInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCompanyLocationInput | TagUpdateManyWithWhereWithoutCompanyLocationInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutCompanyLocationNestedInput = {
    create?: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput> | TagCreateWithoutCompanyLocationInput[] | TagUncheckedCreateWithoutCompanyLocationInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompanyLocationInput | TagCreateOrConnectWithoutCompanyLocationInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCompanyLocationInput | TagUpsertWithWhereUniqueWithoutCompanyLocationInput[]
    createMany?: TagCreateManyCompanyLocationInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCompanyLocationInput | TagUpdateWithWhereUniqueWithoutCompanyLocationInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCompanyLocationInput | TagUpdateManyWithWhereWithoutCompanyLocationInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type FilesCreateNestedOneWithoutDocumentTemplatesInput = {
    create?: XOR<FilesCreateWithoutDocumentTemplatesInput, FilesUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutDocumentTemplatesInput
    connect?: FilesWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutDocumentTemplatesInput = {
    create?: XOR<CompanyCreateWithoutDocumentTemplatesInput, CompanyUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDocumentTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type TagDocumentsCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput> | TagDocumentsCreateWithoutDocumentTemplateInput[] | TagDocumentsUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutDocumentTemplateInput | TagDocumentsCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: TagDocumentsCreateManyDocumentTemplateInputEnvelope
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
  }

  export type TagDocumentsUncheckedCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput> | TagDocumentsCreateWithoutDocumentTemplateInput[] | TagDocumentsUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutDocumentTemplateInput | TagDocumentsCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: TagDocumentsCreateManyDocumentTemplateInputEnvelope
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
  }

  export type FilesUpdateOneWithoutDocumentTemplatesNestedInput = {
    create?: XOR<FilesCreateWithoutDocumentTemplatesInput, FilesUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutDocumentTemplatesInput
    upsert?: FilesUpsertWithoutDocumentTemplatesInput
    disconnect?: FilesWhereInput | boolean
    delete?: FilesWhereInput | boolean
    connect?: FilesWhereUniqueInput
    update?: XOR<XOR<FilesUpdateToOneWithWhereWithoutDocumentTemplatesInput, FilesUpdateWithoutDocumentTemplatesInput>, FilesUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type CompanyUpdateOneWithoutDocumentTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutDocumentTemplatesInput, CompanyUncheckedCreateWithoutDocumentTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDocumentTemplatesInput
    upsert?: CompanyUpsertWithoutDocumentTemplatesInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDocumentTemplatesInput, CompanyUpdateWithoutDocumentTemplatesInput>, CompanyUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type TagDocumentsUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput> | TagDocumentsCreateWithoutDocumentTemplateInput[] | TagDocumentsUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutDocumentTemplateInput | TagDocumentsCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: TagDocumentsUpsertWithWhereUniqueWithoutDocumentTemplateInput | TagDocumentsUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: TagDocumentsCreateManyDocumentTemplateInputEnvelope
    set?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    disconnect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    delete?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    update?: TagDocumentsUpdateWithWhereUniqueWithoutDocumentTemplateInput | TagDocumentsUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: TagDocumentsUpdateManyWithWhereWithoutDocumentTemplateInput | TagDocumentsUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
  }

  export type TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput> | TagDocumentsCreateWithoutDocumentTemplateInput[] | TagDocumentsUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: TagDocumentsCreateOrConnectWithoutDocumentTemplateInput | TagDocumentsCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: TagDocumentsUpsertWithWhereUniqueWithoutDocumentTemplateInput | TagDocumentsUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: TagDocumentsCreateManyDocumentTemplateInputEnvelope
    set?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    disconnect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    delete?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    connect?: TagDocumentsWhereUniqueInput | TagDocumentsWhereUniqueInput[]
    update?: TagDocumentsUpdateWithWhereUniqueWithoutDocumentTemplateInput | TagDocumentsUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: TagDocumentsUpdateManyWithWhereWithoutDocumentTemplateInput | TagDocumentsUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
  }

  export type TagCreateNestedOneWithoutTagDocumentsInput = {
    create?: XOR<TagCreateWithoutTagDocumentsInput, TagUncheckedCreateWithoutTagDocumentsInput>
    connectOrCreate?: TagCreateOrConnectWithoutTagDocumentsInput
    connect?: TagWhereUniqueInput
  }

  export type DocumentTemplateCreateNestedOneWithoutTagDocumentsInput = {
    create?: XOR<DocumentTemplateCreateWithoutTagDocumentsInput, DocumentTemplateUncheckedCreateWithoutTagDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTagDocumentsInput
    connect?: DocumentTemplateWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutTagDocumentsNestedInput = {
    create?: XOR<TagCreateWithoutTagDocumentsInput, TagUncheckedCreateWithoutTagDocumentsInput>
    connectOrCreate?: TagCreateOrConnectWithoutTagDocumentsInput
    upsert?: TagUpsertWithoutTagDocumentsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutTagDocumentsInput, TagUpdateWithoutTagDocumentsInput>, TagUncheckedUpdateWithoutTagDocumentsInput>
  }

  export type DocumentTemplateUpdateOneRequiredWithoutTagDocumentsNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutTagDocumentsInput, DocumentTemplateUncheckedCreateWithoutTagDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutTagDocumentsInput
    upsert?: DocumentTemplateUpsertWithoutTagDocumentsInput
    connect?: DocumentTemplateWhereUniqueInput
    update?: XOR<XOR<DocumentTemplateUpdateToOneWithWhereWithoutTagDocumentsInput, DocumentTemplateUpdateWithoutTagDocumentsInput>, DocumentTemplateUncheckedUpdateWithoutTagDocumentsInput>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumIndustryFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryFilter<$PrismaModel> | $Enums.Industry
  }

  export type NestedEnumIndustryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryWithAggregatesFilter<$PrismaModel> | $Enums.Industry
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryFilter<$PrismaModel>
    _max?: NestedEnumIndustryFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumTagActionFilter<$PrismaModel = never> = {
    equals?: $Enums.TagAction | EnumTagActionFieldRefInput<$PrismaModel>
    in?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    not?: NestedEnumTagActionFilter<$PrismaModel> | $Enums.TagAction
  }

  export type NestedEnumTagActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TagAction | EnumTagActionFieldRefInput<$PrismaModel>
    in?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TagAction[] | ListEnumTagActionFieldRefInput<$PrismaModel>
    not?: NestedEnumTagActionWithAggregatesFilter<$PrismaModel> | $Enums.TagAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTagActionFilter<$PrismaModel>
    _max?: NestedEnumTagActionFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FilesCreateWithoutProfilesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: ProfileCreateNestedOneWithoutFilesInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutImageInput
  }

  export type FilesUncheckedCreateWithoutProfilesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutImageInput
  }

  export type FilesCreateOrConnectWithoutProfilesInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutProfilesInput, FilesUncheckedCreateWithoutProfilesInput>
  }

  export type CompanyCreateWithoutProfilesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    companyLocations?: CompanyLocationCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutProfilesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutProfilesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutProfilesInput, CompanyUncheckedCreateWithoutProfilesInput>
  }

  export type FilesCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutImageInput
  }

  export type FilesUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutImageInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutImageInput
  }

  export type FilesCreateOrConnectWithoutCreatedByInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput>
  }

  export type FilesCreateManyCreatedByInputEnvelope = {
    data: FilesCreateManyCreatedByInput | FilesCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutCreatedByInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutCreatedByInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput>
  }

  export type TagCreateManyCreatedByInputEnvelope = {
    data: TagCreateManyCreatedByInput | TagCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TagHistoryCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    action: $Enums.TagAction
    tag: TagCreateNestedOneWithoutTagHistoriesInput
    createdLocation: LocationCreateNestedOneWithoutTagHistoriesInput
    createdReader: ReaderCreateNestedOneWithoutTagHistoriesInput
  }

  export type TagHistoryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagHistoryCreateOrConnectWithoutCreatedByInput = {
    where: TagHistoryWhereUniqueInput
    create: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput>
  }

  export type TagHistoryCreateManyCreatedByInputEnvelope = {
    data: TagHistoryCreateManyCreatedByInput | TagHistoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TagTemplateCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: FilesCreateNestedOneWithoutTagTemplatesInput
    company?: CompanyCreateNestedOneWithoutTagTemplatesInput
    fields?: FieldCreateNestedManyWithoutTagTemplateInput
    tags?: TagCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    imageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    fields?: FieldUncheckedCreateNestedManyWithoutTagTemplateInput
    tags?: TagUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateCreateOrConnectWithoutCreatedByInput = {
    where: TagTemplateWhereUniqueInput
    create: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput>
  }

  export type TagTemplateCreateManyCreatedByInputEnvelope = {
    data: TagTemplateCreateManyCreatedByInput | TagTemplateCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ReaderCreateWithoutCreatedByInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagCreateNestedManyWithoutCreatedReaderInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderUncheckedCreateWithoutCreatedByInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedReaderInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderCreateOrConnectWithoutCreatedByInput = {
    where: ReaderWhereUniqueInput
    create: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput>
  }

  export type ReaderCreateManyCreatedByInputEnvelope = {
    data: ReaderCreateManyCreatedByInput | ReaderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutCreatedByInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutCreatedByInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutCreatedByInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput>
  }

  export type LocationCreateManyCreatedByInputEnvelope = {
    data: LocationCreateManyCreatedByInput | LocationCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type FilesUpsertWithoutProfilesInput = {
    update: XOR<FilesUpdateWithoutProfilesInput, FilesUncheckedUpdateWithoutProfilesInput>
    create: XOR<FilesCreateWithoutProfilesInput, FilesUncheckedCreateWithoutProfilesInput>
    where?: FilesWhereInput
  }

  export type FilesUpdateToOneWithWhereWithoutProfilesInput = {
    where?: FilesWhereInput
    data: XOR<FilesUpdateWithoutProfilesInput, FilesUncheckedUpdateWithoutProfilesInput>
  }

  export type FilesUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneWithoutFilesNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutImageNestedInput
  }

  export type CompanyUpsertWithoutProfilesInput = {
    update: XOR<CompanyUpdateWithoutProfilesInput, CompanyUncheckedUpdateWithoutProfilesInput>
    create: XOR<CompanyCreateWithoutProfilesInput, CompanyUncheckedCreateWithoutProfilesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutProfilesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutProfilesInput, CompanyUncheckedUpdateWithoutProfilesInput>
  }

  export type CompanyUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLocations?: CompanyLocationUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type FilesUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: FilesWhereUniqueInput
    update: XOR<FilesUpdateWithoutCreatedByInput, FilesUncheckedUpdateWithoutCreatedByInput>
    create: XOR<FilesCreateWithoutCreatedByInput, FilesUncheckedCreateWithoutCreatedByInput>
  }

  export type FilesUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: FilesWhereUniqueInput
    data: XOR<FilesUpdateWithoutCreatedByInput, FilesUncheckedUpdateWithoutCreatedByInput>
  }

  export type FilesUpdateManyWithWhereWithoutCreatedByInput = {
    where: FilesScalarWhereInput
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type FilesScalarWhereInput = {
    AND?: FilesScalarWhereInput | FilesScalarWhereInput[]
    OR?: FilesScalarWhereInput[]
    NOT?: FilesScalarWhereInput | FilesScalarWhereInput[]
    id?: StringFilter<"Files"> | string
    name?: StringNullableFilter<"Files"> | string | null
    fileName?: StringFilter<"Files"> | string
    blobName?: StringFilter<"Files"> | string
    containerName?: StringFilter<"Files"> | string
    blobUrl?: StringFilter<"Files"> | string
    contentType?: StringFilter<"Files"> | string
    fileSize?: IntFilter<"Files"> | number
    createdById?: StringNullableFilter<"Files"> | string | null
    createdAt?: DateTimeFilter<"Files"> | Date | string
    updatedAt?: DateTimeFilter<"Files"> | Date | string
  }

  export type TagUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCreatedByInput, TagUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCreatedByInput, TagUncheckedUpdateWithoutCreatedByInput>
  }

  export type TagUpdateManyWithWhereWithoutCreatedByInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: StringFilter<"Tag"> | string
    uid?: StringFilter<"Tag"> | string
    tagTemplateId?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    createdById?: StringNullableFilter<"Tag"> | string | null
    createdLocationId?: StringNullableFilter<"Tag"> | string | null
    createdReaderId?: StringNullableFilter<"Tag"> | string | null
    companyLocationId?: StringNullableFilter<"Tag"> | string | null
  }

  export type TagHistoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TagHistoryWhereUniqueInput
    update: XOR<TagHistoryUpdateWithoutCreatedByInput, TagHistoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TagHistoryCreateWithoutCreatedByInput, TagHistoryUncheckedCreateWithoutCreatedByInput>
  }

  export type TagHistoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TagHistoryWhereUniqueInput
    data: XOR<TagHistoryUpdateWithoutCreatedByInput, TagHistoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type TagHistoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: TagHistoryScalarWhereInput
    data: XOR<TagHistoryUpdateManyMutationInput, TagHistoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TagHistoryScalarWhereInput = {
    AND?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
    OR?: TagHistoryScalarWhereInput[]
    NOT?: TagHistoryScalarWhereInput | TagHistoryScalarWhereInput[]
    id?: StringFilter<"TagHistory"> | string
    tagId?: StringFilter<"TagHistory"> | string
    createdById?: StringFilter<"TagHistory"> | string
    createdAt?: DateTimeFilter<"TagHistory"> | Date | string
    createdLocationId?: StringFilter<"TagHistory"> | string
    createdReaderId?: StringFilter<"TagHistory"> | string
    action?: EnumTagActionFilter<"TagHistory"> | $Enums.TagAction
  }

  export type TagTemplateUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TagTemplateWhereUniqueInput
    update: XOR<TagTemplateUpdateWithoutCreatedByInput, TagTemplateUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TagTemplateCreateWithoutCreatedByInput, TagTemplateUncheckedCreateWithoutCreatedByInput>
  }

  export type TagTemplateUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TagTemplateWhereUniqueInput
    data: XOR<TagTemplateUpdateWithoutCreatedByInput, TagTemplateUncheckedUpdateWithoutCreatedByInput>
  }

  export type TagTemplateUpdateManyWithWhereWithoutCreatedByInput = {
    where: TagTemplateScalarWhereInput
    data: XOR<TagTemplateUpdateManyMutationInput, TagTemplateUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TagTemplateScalarWhereInput = {
    AND?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
    OR?: TagTemplateScalarWhereInput[]
    NOT?: TagTemplateScalarWhereInput | TagTemplateScalarWhereInput[]
    id?: StringFilter<"TagTemplate"> | string
    name?: StringFilter<"TagTemplate"> | string
    imageId?: StringFilter<"TagTemplate"> | string
    createdById?: StringFilter<"TagTemplate"> | string
    createdAt?: DateTimeFilter<"TagTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TagTemplate"> | Date | string
    companyId?: StringNullableFilter<"TagTemplate"> | string | null
  }

  export type ReaderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ReaderWhereUniqueInput
    update: XOR<ReaderUpdateWithoutCreatedByInput, ReaderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ReaderCreateWithoutCreatedByInput, ReaderUncheckedCreateWithoutCreatedByInput>
  }

  export type ReaderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ReaderWhereUniqueInput
    data: XOR<ReaderUpdateWithoutCreatedByInput, ReaderUncheckedUpdateWithoutCreatedByInput>
  }

  export type ReaderUpdateManyWithWhereWithoutCreatedByInput = {
    where: ReaderScalarWhereInput
    data: XOR<ReaderUpdateManyMutationInput, ReaderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ReaderScalarWhereInput = {
    AND?: ReaderScalarWhereInput | ReaderScalarWhereInput[]
    OR?: ReaderScalarWhereInput[]
    NOT?: ReaderScalarWhereInput | ReaderScalarWhereInput[]
    address?: StringFilter<"Reader"> | string
    name?: StringFilter<"Reader"> | string
    createdById?: StringFilter<"Reader"> | string
    createdAt?: DateTimeFilter<"Reader"> | Date | string
    updatedAt?: DateTimeFilter<"Reader"> | Date | string
  }

  export type LocationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutCreatedByInput, LocationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<LocationCreateWithoutCreatedByInput, LocationUncheckedCreateWithoutCreatedByInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutCreatedByInput, LocationUncheckedUpdateWithoutCreatedByInput>
  }

  export type LocationUpdateManyWithWhereWithoutCreatedByInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    lat?: FloatFilter<"Location"> | number
    lon?: FloatFilter<"Location"> | number
    formattedAddress?: StringFilter<"Location"> | string
    createdById?: StringFilter<"Location"> | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateWithoutCompanyInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutCompanyInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput>
  }

  export type ProfileCreateManyCompanyInputEnvelope = {
    data: ProfileCreateManyCompanyInput | ProfileCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyLocationCreateWithoutCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutCompanyLocationsInput
    tags?: TagCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId: string
    tags?: TagUncheckedCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationCreateOrConnectWithoutCompanyInput = {
    where: CompanyLocationWhereUniqueInput
    create: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyLocationCreateManyCompanyInputEnvelope = {
    data: CompanyLocationCreateManyCompanyInput | CompanyLocationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FilesCreateNestedOneWithoutDocumentTemplatesInput
    tagDocuments?: TagDocumentsCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    imageId?: string | null
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutCompanyInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type DocumentTemplateCreateManyCompanyInputEnvelope = {
    data: DocumentTemplateCreateManyCompanyInput | DocumentTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type TagTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: FilesCreateNestedOneWithoutTagTemplatesInput
    createdBy: ProfileCreateNestedOneWithoutTagTemplatesInput
    fields?: FieldCreateNestedManyWithoutTagTemplateInput
    tags?: TagCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: FieldUncheckedCreateNestedManyWithoutTagTemplateInput
    tags?: TagUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateCreateOrConnectWithoutCompanyInput = {
    where: TagTemplateWhereUniqueInput
    create: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type TagTemplateCreateManyCompanyInputEnvelope = {
    data: TagTemplateCreateManyCompanyInput | TagTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutCompanyInput, ProfileUncheckedUpdateWithoutCompanyInput>
    create: XOR<ProfileCreateWithoutCompanyInput, ProfileUncheckedCreateWithoutCompanyInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutCompanyInput, ProfileUncheckedUpdateWithoutCompanyInput>
  }

  export type ProfileUpdateManyWithWhereWithoutCompanyInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    pictureId?: StringNullableFilter<"Profile"> | string | null
    email?: StringFilter<"Profile"> | string
    bio?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    companyId?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
  }

  export type CompanyLocationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyLocationWhereUniqueInput
    update: XOR<CompanyLocationUpdateWithoutCompanyInput, CompanyLocationUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyLocationCreateWithoutCompanyInput, CompanyLocationUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyLocationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyLocationWhereUniqueInput
    data: XOR<CompanyLocationUpdateWithoutCompanyInput, CompanyLocationUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyLocationUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyLocationScalarWhereInput
    data: XOR<CompanyLocationUpdateManyMutationInput, CompanyLocationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyLocationScalarWhereInput = {
    AND?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
    OR?: CompanyLocationScalarWhereInput[]
    NOT?: CompanyLocationScalarWhereInput | CompanyLocationScalarWhereInput[]
    id?: StringFilter<"CompanyLocation"> | string
    name?: StringFilter<"CompanyLocation"> | string
    createdAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyLocation"> | Date | string
    companyId?: StringFilter<"CompanyLocation"> | string
    locationId?: StringFilter<"CompanyLocation"> | string
  }

  export type DocumentTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DocumentTemplateWhereUniqueInput
    update: XOR<DocumentTemplateUpdateWithoutCompanyInput, DocumentTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<DocumentTemplateCreateWithoutCompanyInput, DocumentTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type DocumentTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DocumentTemplateWhereUniqueInput
    data: XOR<DocumentTemplateUpdateWithoutCompanyInput, DocumentTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type DocumentTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: DocumentTemplateScalarWhereInput
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DocumentTemplateScalarWhereInput = {
    AND?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
    OR?: DocumentTemplateScalarWhereInput[]
    NOT?: DocumentTemplateScalarWhereInput | DocumentTemplateScalarWhereInput[]
    id?: StringFilter<"DocumentTemplate"> | string
    name?: StringFilter<"DocumentTemplate"> | string
    imageId?: StringNullableFilter<"DocumentTemplate"> | string | null
    fields?: JsonFilter<"DocumentTemplate">
    createdAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentTemplate"> | Date | string
    companyId?: StringNullableFilter<"DocumentTemplate"> | string | null
  }

  export type TagTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: TagTemplateWhereUniqueInput
    update: XOR<TagTemplateUpdateWithoutCompanyInput, TagTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<TagTemplateCreateWithoutCompanyInput, TagTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type TagTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: TagTemplateWhereUniqueInput
    data: XOR<TagTemplateUpdateWithoutCompanyInput, TagTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type TagTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: TagTemplateScalarWhereInput
    data: XOR<TagTemplateUpdateManyMutationInput, TagTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ProfileCreateWithoutReadersInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutReadersInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutReadersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutReadersInput, ProfileUncheckedCreateWithoutReadersInput>
  }

  export type TagCreateWithoutCreatedReaderInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutCreatedReaderInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutCreatedReaderInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput>
  }

  export type TagCreateManyCreatedReaderInputEnvelope = {
    data: TagCreateManyCreatedReaderInput | TagCreateManyCreatedReaderInput[]
    skipDuplicates?: boolean
  }

  export type TagHistoryCreateWithoutCreatedReaderInput = {
    id?: string
    createdAt?: Date | string
    action: $Enums.TagAction
    tag: TagCreateNestedOneWithoutTagHistoriesInput
    createdBy: ProfileCreateNestedOneWithoutTagHistoriesInput
    createdLocation: LocationCreateNestedOneWithoutTagHistoriesInput
  }

  export type TagHistoryUncheckedCreateWithoutCreatedReaderInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    action: $Enums.TagAction
  }

  export type TagHistoryCreateOrConnectWithoutCreatedReaderInput = {
    where: TagHistoryWhereUniqueInput
    create: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput>
  }

  export type TagHistoryCreateManyCreatedReaderInputEnvelope = {
    data: TagHistoryCreateManyCreatedReaderInput | TagHistoryCreateManyCreatedReaderInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutReadersInput = {
    update: XOR<ProfileUpdateWithoutReadersInput, ProfileUncheckedUpdateWithoutReadersInput>
    create: XOR<ProfileCreateWithoutReadersInput, ProfileUncheckedCreateWithoutReadersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutReadersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutReadersInput, ProfileUncheckedUpdateWithoutReadersInput>
  }

  export type ProfileUpdateWithoutReadersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutReadersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutCreatedReaderInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCreatedReaderInput, TagUncheckedUpdateWithoutCreatedReaderInput>
    create: XOR<TagCreateWithoutCreatedReaderInput, TagUncheckedCreateWithoutCreatedReaderInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCreatedReaderInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCreatedReaderInput, TagUncheckedUpdateWithoutCreatedReaderInput>
  }

  export type TagUpdateManyWithWhereWithoutCreatedReaderInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutCreatedReaderInput>
  }

  export type TagHistoryUpsertWithWhereUniqueWithoutCreatedReaderInput = {
    where: TagHistoryWhereUniqueInput
    update: XOR<TagHistoryUpdateWithoutCreatedReaderInput, TagHistoryUncheckedUpdateWithoutCreatedReaderInput>
    create: XOR<TagHistoryCreateWithoutCreatedReaderInput, TagHistoryUncheckedCreateWithoutCreatedReaderInput>
  }

  export type TagHistoryUpdateWithWhereUniqueWithoutCreatedReaderInput = {
    where: TagHistoryWhereUniqueInput
    data: XOR<TagHistoryUpdateWithoutCreatedReaderInput, TagHistoryUncheckedUpdateWithoutCreatedReaderInput>
  }

  export type TagHistoryUpdateManyWithWhereWithoutCreatedReaderInput = {
    where: TagHistoryScalarWhereInput
    data: XOR<TagHistoryUpdateManyMutationInput, TagHistoryUncheckedUpdateManyWithoutCreatedReaderInput>
  }

  export type ProfileCreateWithoutLocationsInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutLocationsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutLocationsInput, ProfileUncheckedCreateWithoutLocationsInput>
  }

  export type TagCreateWithoutCreatedLocationInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutCreatedLocationInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutCreatedLocationInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput>
  }

  export type TagCreateManyCreatedLocationInputEnvelope = {
    data: TagCreateManyCreatedLocationInput | TagCreateManyCreatedLocationInput[]
    skipDuplicates?: boolean
  }

  export type TagHistoryCreateWithoutCreatedLocationInput = {
    id?: string
    createdAt?: Date | string
    action: $Enums.TagAction
    tag: TagCreateNestedOneWithoutTagHistoriesInput
    createdBy: ProfileCreateNestedOneWithoutTagHistoriesInput
    createdReader: ReaderCreateNestedOneWithoutTagHistoriesInput
  }

  export type TagHistoryUncheckedCreateWithoutCreatedLocationInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagHistoryCreateOrConnectWithoutCreatedLocationInput = {
    where: TagHistoryWhereUniqueInput
    create: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput>
  }

  export type TagHistoryCreateManyCreatedLocationInputEnvelope = {
    data: TagHistoryCreateManyCreatedLocationInput | TagHistoryCreateManyCreatedLocationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyLocationCreateWithoutLocationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCompanyLocationsInput
    tags?: TagCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationUncheckedCreateWithoutLocationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    tags?: TagUncheckedCreateNestedManyWithoutCompanyLocationInput
  }

  export type CompanyLocationCreateOrConnectWithoutLocationInput = {
    where: CompanyLocationWhereUniqueInput
    create: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput>
  }

  export type CompanyLocationCreateManyLocationInputEnvelope = {
    data: CompanyLocationCreateManyLocationInput | CompanyLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutLocationsInput = {
    update: XOR<ProfileUpdateWithoutLocationsInput, ProfileUncheckedUpdateWithoutLocationsInput>
    create: XOR<ProfileCreateWithoutLocationsInput, ProfileUncheckedCreateWithoutLocationsInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutLocationsInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutLocationsInput, ProfileUncheckedUpdateWithoutLocationsInput>
  }

  export type ProfileUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutCreatedLocationInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCreatedLocationInput, TagUncheckedUpdateWithoutCreatedLocationInput>
    create: XOR<TagCreateWithoutCreatedLocationInput, TagUncheckedCreateWithoutCreatedLocationInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCreatedLocationInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCreatedLocationInput, TagUncheckedUpdateWithoutCreatedLocationInput>
  }

  export type TagUpdateManyWithWhereWithoutCreatedLocationInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutCreatedLocationInput>
  }

  export type TagHistoryUpsertWithWhereUniqueWithoutCreatedLocationInput = {
    where: TagHistoryWhereUniqueInput
    update: XOR<TagHistoryUpdateWithoutCreatedLocationInput, TagHistoryUncheckedUpdateWithoutCreatedLocationInput>
    create: XOR<TagHistoryCreateWithoutCreatedLocationInput, TagHistoryUncheckedCreateWithoutCreatedLocationInput>
  }

  export type TagHistoryUpdateWithWhereUniqueWithoutCreatedLocationInput = {
    where: TagHistoryWhereUniqueInput
    data: XOR<TagHistoryUpdateWithoutCreatedLocationInput, TagHistoryUncheckedUpdateWithoutCreatedLocationInput>
  }

  export type TagHistoryUpdateManyWithWhereWithoutCreatedLocationInput = {
    where: TagHistoryScalarWhereInput
    data: XOR<TagHistoryUpdateManyMutationInput, TagHistoryUncheckedUpdateManyWithoutCreatedLocationInput>
  }

  export type CompanyLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: CompanyLocationWhereUniqueInput
    update: XOR<CompanyLocationUpdateWithoutLocationInput, CompanyLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<CompanyLocationCreateWithoutLocationInput, CompanyLocationUncheckedCreateWithoutLocationInput>
  }

  export type CompanyLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: CompanyLocationWhereUniqueInput
    data: XOR<CompanyLocationUpdateWithoutLocationInput, CompanyLocationUncheckedUpdateWithoutLocationInput>
  }

  export type CompanyLocationUpdateManyWithWhereWithoutLocationInput = {
    where: CompanyLocationScalarWhereInput
    data: XOR<CompanyLocationUpdateManyMutationInput, CompanyLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type TagTemplateCreateWithoutTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: FilesCreateNestedOneWithoutTagTemplatesInput
    company?: CompanyCreateNestedOneWithoutTagTemplatesInput
    createdBy: ProfileCreateNestedOneWithoutTagTemplatesInput
    fields?: FieldCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    fields?: FieldUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateCreateOrConnectWithoutTagsInput = {
    where: TagTemplateWhereUniqueInput
    create: XOR<TagTemplateCreateWithoutTagsInput, TagTemplateUncheckedCreateWithoutTagsInput>
  }

  export type ProfileCreateWithoutTagsInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutTagsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
  }

  export type LocationCreateWithoutTagsInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutLocationsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTagsInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTagsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTagsInput, LocationUncheckedCreateWithoutTagsInput>
  }

  export type ReaderCreateWithoutTagsInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutReadersInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderUncheckedCreateWithoutTagsInput = {
    address: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderCreateOrConnectWithoutTagsInput = {
    where: ReaderWhereUniqueInput
    create: XOR<ReaderCreateWithoutTagsInput, ReaderUncheckedCreateWithoutTagsInput>
  }

  export type CompanyLocationCreateWithoutTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCompanyLocationsInput
    location: LocationCreateNestedOneWithoutCompanyLocationsInput
  }

  export type CompanyLocationUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    locationId: string
  }

  export type CompanyLocationCreateOrConnectWithoutTagsInput = {
    where: CompanyLocationWhereUniqueInput
    create: XOR<CompanyLocationCreateWithoutTagsInput, CompanyLocationUncheckedCreateWithoutTagsInput>
  }

  export type TagHistoryCreateWithoutTagInput = {
    id?: string
    createdAt?: Date | string
    action: $Enums.TagAction
    createdBy: ProfileCreateNestedOneWithoutTagHistoriesInput
    createdLocation: LocationCreateNestedOneWithoutTagHistoriesInput
    createdReader: ReaderCreateNestedOneWithoutTagHistoriesInput
  }

  export type TagHistoryUncheckedCreateWithoutTagInput = {
    id?: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagHistoryCreateOrConnectWithoutTagInput = {
    where: TagHistoryWhereUniqueInput
    create: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput>
  }

  export type TagHistoryCreateManyTagInputEnvelope = {
    data: TagHistoryCreateManyTagInput | TagHistoryCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagDocumentsCreateWithoutTagInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplate: DocumentTemplateCreateNestedOneWithoutTagDocumentsInput
  }

  export type TagDocumentsUncheckedCreateWithoutTagInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId: string
  }

  export type TagDocumentsCreateOrConnectWithoutTagInput = {
    where: TagDocumentsWhereUniqueInput
    create: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput>
  }

  export type TagDocumentsCreateManyTagInputEnvelope = {
    data: TagDocumentsCreateManyTagInput | TagDocumentsCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagTemplateUpsertWithoutTagsInput = {
    update: XOR<TagTemplateUpdateWithoutTagsInput, TagTemplateUncheckedUpdateWithoutTagsInput>
    create: XOR<TagTemplateCreateWithoutTagsInput, TagTemplateUncheckedCreateWithoutTagsInput>
    where?: TagTemplateWhereInput
  }

  export type TagTemplateUpdateToOneWithWhereWithoutTagsInput = {
    where?: TagTemplateWhereInput
    data: XOR<TagTemplateUpdateWithoutTagsInput, TagTemplateUncheckedUpdateWithoutTagsInput>
  }

  export type TagTemplateUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneRequiredWithoutTagTemplatesNestedInput
    company?: CompanyUpdateOneWithoutTagTemplatesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput
    fields?: FieldUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: FieldUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type ProfileUpsertWithoutTagsInput = {
    update: XOR<ProfileUpdateWithoutTagsInput, ProfileUncheckedUpdateWithoutTagsInput>
    create: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutTagsInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutTagsInput, ProfileUncheckedUpdateWithoutTagsInput>
  }

  export type ProfileUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type LocationUpsertWithoutTagsInput = {
    update: XOR<LocationUpdateWithoutTagsInput, LocationUncheckedUpdateWithoutTagsInput>
    create: XOR<LocationCreateWithoutTagsInput, LocationUncheckedCreateWithoutTagsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTagsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTagsInput, LocationUncheckedUpdateWithoutTagsInput>
  }

  export type LocationUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutLocationsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ReaderUpsertWithoutTagsInput = {
    update: XOR<ReaderUpdateWithoutTagsInput, ReaderUncheckedUpdateWithoutTagsInput>
    create: XOR<ReaderCreateWithoutTagsInput, ReaderUncheckedCreateWithoutTagsInput>
    where?: ReaderWhereInput
  }

  export type ReaderUpdateToOneWithWhereWithoutTagsInput = {
    where?: ReaderWhereInput
    data: XOR<ReaderUpdateWithoutTagsInput, ReaderUncheckedUpdateWithoutTagsInput>
  }

  export type ReaderUpdateWithoutTagsInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutReadersNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderUncheckedUpdateWithoutTagsInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedReaderNestedInput
  }

  export type CompanyLocationUpsertWithoutTagsInput = {
    update: XOR<CompanyLocationUpdateWithoutTagsInput, CompanyLocationUncheckedUpdateWithoutTagsInput>
    create: XOR<CompanyLocationCreateWithoutTagsInput, CompanyLocationUncheckedCreateWithoutTagsInput>
    where?: CompanyLocationWhereInput
  }

  export type CompanyLocationUpdateToOneWithWhereWithoutTagsInput = {
    where?: CompanyLocationWhereInput
    data: XOR<CompanyLocationUpdateWithoutTagsInput, CompanyLocationUncheckedUpdateWithoutTagsInput>
  }

  export type CompanyLocationUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanyLocationsNestedInput
    location?: LocationUpdateOneRequiredWithoutCompanyLocationsNestedInput
  }

  export type CompanyLocationUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
  }

  export type TagHistoryUpsertWithWhereUniqueWithoutTagInput = {
    where: TagHistoryWhereUniqueInput
    update: XOR<TagHistoryUpdateWithoutTagInput, TagHistoryUncheckedUpdateWithoutTagInput>
    create: XOR<TagHistoryCreateWithoutTagInput, TagHistoryUncheckedCreateWithoutTagInput>
  }

  export type TagHistoryUpdateWithWhereUniqueWithoutTagInput = {
    where: TagHistoryWhereUniqueInput
    data: XOR<TagHistoryUpdateWithoutTagInput, TagHistoryUncheckedUpdateWithoutTagInput>
  }

  export type TagHistoryUpdateManyWithWhereWithoutTagInput = {
    where: TagHistoryScalarWhereInput
    data: XOR<TagHistoryUpdateManyMutationInput, TagHistoryUncheckedUpdateManyWithoutTagInput>
  }

  export type TagDocumentsUpsertWithWhereUniqueWithoutTagInput = {
    where: TagDocumentsWhereUniqueInput
    update: XOR<TagDocumentsUpdateWithoutTagInput, TagDocumentsUncheckedUpdateWithoutTagInput>
    create: XOR<TagDocumentsCreateWithoutTagInput, TagDocumentsUncheckedCreateWithoutTagInput>
  }

  export type TagDocumentsUpdateWithWhereUniqueWithoutTagInput = {
    where: TagDocumentsWhereUniqueInput
    data: XOR<TagDocumentsUpdateWithoutTagInput, TagDocumentsUncheckedUpdateWithoutTagInput>
  }

  export type TagDocumentsUpdateManyWithWhereWithoutTagInput = {
    where: TagDocumentsScalarWhereInput
    data: XOR<TagDocumentsUpdateManyMutationInput, TagDocumentsUncheckedUpdateManyWithoutTagInput>
  }

  export type TagDocumentsScalarWhereInput = {
    AND?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
    OR?: TagDocumentsScalarWhereInput[]
    NOT?: TagDocumentsScalarWhereInput | TagDocumentsScalarWhereInput[]
    id?: StringFilter<"TagDocuments"> | string
    fields?: JsonFilter<"TagDocuments">
    createdAt?: DateTimeFilter<"TagDocuments"> | Date | string
    updatedAt?: DateTimeFilter<"TagDocuments"> | Date | string
    tagId?: StringFilter<"TagDocuments"> | string
    documentTemplateId?: StringFilter<"TagDocuments"> | string
  }

  export type TagCreateWithoutTagHistoriesInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutTagHistoriesInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutTagHistoriesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTagHistoriesInput, TagUncheckedCreateWithoutTagHistoriesInput>
  }

  export type ProfileCreateWithoutTagHistoriesInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutTagHistoriesInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutTagHistoriesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutTagHistoriesInput, ProfileUncheckedCreateWithoutTagHistoriesInput>
  }

  export type LocationCreateWithoutTagHistoriesInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutLocationsInput
    tags?: TagCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTagHistoriesInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedLocationInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTagHistoriesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTagHistoriesInput, LocationUncheckedCreateWithoutTagHistoriesInput>
  }

  export type ReaderCreateWithoutTagHistoriesInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutReadersInput
    tags?: TagCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderUncheckedCreateWithoutTagHistoriesInput = {
    address: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedReaderInput
  }

  export type ReaderCreateOrConnectWithoutTagHistoriesInput = {
    where: ReaderWhereUniqueInput
    create: XOR<ReaderCreateWithoutTagHistoriesInput, ReaderUncheckedCreateWithoutTagHistoriesInput>
  }

  export type TagUpsertWithoutTagHistoriesInput = {
    update: XOR<TagUpdateWithoutTagHistoriesInput, TagUncheckedUpdateWithoutTagHistoriesInput>
    create: XOR<TagCreateWithoutTagHistoriesInput, TagUncheckedCreateWithoutTagHistoriesInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutTagHistoriesInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutTagHistoriesInput, TagUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type TagUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ProfileUpsertWithoutTagHistoriesInput = {
    update: XOR<ProfileUpdateWithoutTagHistoriesInput, ProfileUncheckedUpdateWithoutTagHistoriesInput>
    create: XOR<ProfileCreateWithoutTagHistoriesInput, ProfileUncheckedCreateWithoutTagHistoriesInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutTagHistoriesInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutTagHistoriesInput, ProfileUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type ProfileUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type LocationUpsertWithoutTagHistoriesInput = {
    update: XOR<LocationUpdateWithoutTagHistoriesInput, LocationUncheckedUpdateWithoutTagHistoriesInput>
    create: XOR<LocationCreateWithoutTagHistoriesInput, LocationUncheckedCreateWithoutTagHistoriesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTagHistoriesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTagHistoriesInput, LocationUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type LocationUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutLocationsNestedInput
    tags?: TagUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTagHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ReaderUpsertWithoutTagHistoriesInput = {
    update: XOR<ReaderUpdateWithoutTagHistoriesInput, ReaderUncheckedUpdateWithoutTagHistoriesInput>
    create: XOR<ReaderCreateWithoutTagHistoriesInput, ReaderUncheckedCreateWithoutTagHistoriesInput>
    where?: ReaderWhereInput
  }

  export type ReaderUpdateToOneWithWhereWithoutTagHistoriesInput = {
    where?: ReaderWhereInput
    data: XOR<ReaderUpdateWithoutTagHistoriesInput, ReaderUncheckedUpdateWithoutTagHistoriesInput>
  }

  export type ReaderUpdateWithoutTagHistoriesInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutReadersNestedInput
    tags?: TagUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderUncheckedUpdateWithoutTagHistoriesInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ProfileCreateWithoutFilesInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutFilesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutFilesInput, ProfileUncheckedCreateWithoutFilesInput>
  }

  export type ProfileCreateWithoutPictureInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPictureInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutPictureInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput>
  }

  export type ProfileCreateManyPictureInputEnvelope = {
    data: ProfileCreateManyPictureInput | ProfileCreateManyPictureInput[]
    skipDuplicates?: boolean
  }

  export type TagTemplateCreateWithoutImageInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutTagTemplatesInput
    createdBy: ProfileCreateNestedOneWithoutTagTemplatesInput
    fields?: FieldCreateNestedManyWithoutTagTemplateInput
    tags?: TagCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateWithoutImageInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    fields?: FieldUncheckedCreateNestedManyWithoutTagTemplateInput
    tags?: TagUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateCreateOrConnectWithoutImageInput = {
    where: TagTemplateWhereUniqueInput
    create: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput>
  }

  export type TagTemplateCreateManyImageInputEnvelope = {
    data: TagTemplateCreateManyImageInput | TagTemplateCreateManyImageInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateCreateWithoutImageInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutDocumentTemplatesInput
    tagDocuments?: TagDocumentsCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutImageInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    tagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutImageInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput>
  }

  export type DocumentTemplateCreateManyImageInputEnvelope = {
    data: DocumentTemplateCreateManyImageInput | DocumentTemplateCreateManyImageInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutFilesInput = {
    update: XOR<ProfileUpdateWithoutFilesInput, ProfileUncheckedUpdateWithoutFilesInput>
    create: XOR<ProfileCreateWithoutFilesInput, ProfileUncheckedCreateWithoutFilesInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutFilesInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutFilesInput, ProfileUncheckedUpdateWithoutFilesInput>
  }

  export type ProfileUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUpsertWithWhereUniqueWithoutPictureInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutPictureInput, ProfileUncheckedUpdateWithoutPictureInput>
    create: XOR<ProfileCreateWithoutPictureInput, ProfileUncheckedCreateWithoutPictureInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutPictureInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutPictureInput, ProfileUncheckedUpdateWithoutPictureInput>
  }

  export type ProfileUpdateManyWithWhereWithoutPictureInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutPictureInput>
  }

  export type TagTemplateUpsertWithWhereUniqueWithoutImageInput = {
    where: TagTemplateWhereUniqueInput
    update: XOR<TagTemplateUpdateWithoutImageInput, TagTemplateUncheckedUpdateWithoutImageInput>
    create: XOR<TagTemplateCreateWithoutImageInput, TagTemplateUncheckedCreateWithoutImageInput>
  }

  export type TagTemplateUpdateWithWhereUniqueWithoutImageInput = {
    where: TagTemplateWhereUniqueInput
    data: XOR<TagTemplateUpdateWithoutImageInput, TagTemplateUncheckedUpdateWithoutImageInput>
  }

  export type TagTemplateUpdateManyWithWhereWithoutImageInput = {
    where: TagTemplateScalarWhereInput
    data: XOR<TagTemplateUpdateManyMutationInput, TagTemplateUncheckedUpdateManyWithoutImageInput>
  }

  export type DocumentTemplateUpsertWithWhereUniqueWithoutImageInput = {
    where: DocumentTemplateWhereUniqueInput
    update: XOR<DocumentTemplateUpdateWithoutImageInput, DocumentTemplateUncheckedUpdateWithoutImageInput>
    create: XOR<DocumentTemplateCreateWithoutImageInput, DocumentTemplateUncheckedCreateWithoutImageInput>
  }

  export type DocumentTemplateUpdateWithWhereUniqueWithoutImageInput = {
    where: DocumentTemplateWhereUniqueInput
    data: XOR<DocumentTemplateUpdateWithoutImageInput, DocumentTemplateUncheckedUpdateWithoutImageInput>
  }

  export type DocumentTemplateUpdateManyWithWhereWithoutImageInput = {
    where: DocumentTemplateScalarWhereInput
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyWithoutImageInput>
  }

  export type TagTemplateCreateWithoutFieldsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: FilesCreateNestedOneWithoutTagTemplatesInput
    company?: CompanyCreateNestedOneWithoutTagTemplatesInput
    createdBy: ProfileCreateNestedOneWithoutTagTemplatesInput
    tags?: TagCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateUncheckedCreateWithoutFieldsInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
    tags?: TagUncheckedCreateNestedManyWithoutTagTemplateInput
  }

  export type TagTemplateCreateOrConnectWithoutFieldsInput = {
    where: TagTemplateWhereUniqueInput
    create: XOR<TagTemplateCreateWithoutFieldsInput, TagTemplateUncheckedCreateWithoutFieldsInput>
  }

  export type TagTemplateUpsertWithoutFieldsInput = {
    update: XOR<TagTemplateUpdateWithoutFieldsInput, TagTemplateUncheckedUpdateWithoutFieldsInput>
    create: XOR<TagTemplateCreateWithoutFieldsInput, TagTemplateUncheckedCreateWithoutFieldsInput>
    where?: TagTemplateWhereInput
  }

  export type TagTemplateUpdateToOneWithWhereWithoutFieldsInput = {
    where?: TagTemplateWhereInput
    data: XOR<TagTemplateUpdateWithoutFieldsInput, TagTemplateUncheckedUpdateWithoutFieldsInput>
  }

  export type TagTemplateUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneRequiredWithoutTagTemplatesNestedInput
    company?: CompanyUpdateOneWithoutTagTemplatesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput
    tags?: TagUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: TagUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type FilesCreateWithoutTagTemplatesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: ProfileCreateNestedOneWithoutFilesInput
    profiles?: ProfileCreateNestedManyWithoutPictureInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutImageInput
  }

  export type FilesUncheckedCreateWithoutTagTemplatesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutPictureInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutImageInput
  }

  export type FilesCreateOrConnectWithoutTagTemplatesInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutTagTemplatesInput, FilesUncheckedCreateWithoutTagTemplatesInput>
  }

  export type CompanyCreateWithoutTagTemplatesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutTagTemplatesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutTagTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutTagTemplatesInput, CompanyUncheckedCreateWithoutTagTemplatesInput>
  }

  export type ProfileCreateWithoutTagTemplatesInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
    user?: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutTagTemplatesInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
    user?: UserUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutTagTemplatesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutTagTemplatesInput, ProfileUncheckedCreateWithoutTagTemplatesInput>
  }

  export type FieldCreateWithoutTagTemplateInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId?: string | null
  }

  export type FieldUncheckedCreateWithoutTagTemplateInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId?: string | null
  }

  export type FieldCreateOrConnectWithoutTagTemplateInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput>
  }

  export type FieldCreateManyTagTemplateInputEnvelope = {
    data: FieldCreateManyTagTemplateInput | FieldCreateManyTagTemplateInput[]
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutTagTemplateInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutTagTemplateInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutTagTemplateInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput>
  }

  export type TagCreateManyTagTemplateInputEnvelope = {
    data: TagCreateManyTagTemplateInput | TagCreateManyTagTemplateInput[]
    skipDuplicates?: boolean
  }

  export type FilesUpsertWithoutTagTemplatesInput = {
    update: XOR<FilesUpdateWithoutTagTemplatesInput, FilesUncheckedUpdateWithoutTagTemplatesInput>
    create: XOR<FilesCreateWithoutTagTemplatesInput, FilesUncheckedCreateWithoutTagTemplatesInput>
    where?: FilesWhereInput
  }

  export type FilesUpdateToOneWithWhereWithoutTagTemplatesInput = {
    where?: FilesWhereInput
    data: XOR<FilesUpdateWithoutTagTemplatesInput, FilesUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type FilesUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneWithoutFilesNestedInput
    profiles?: ProfileUpdateManyWithoutPictureNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutPictureNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutImageNestedInput
  }

  export type CompanyUpsertWithoutTagTemplatesInput = {
    update: XOR<CompanyUpdateWithoutTagTemplatesInput, CompanyUncheckedUpdateWithoutTagTemplatesInput>
    create: XOR<CompanyCreateWithoutTagTemplatesInput, CompanyUncheckedCreateWithoutTagTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutTagTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutTagTemplatesInput, CompanyUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type CompanyUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ProfileUpsertWithoutTagTemplatesInput = {
    update: XOR<ProfileUpdateWithoutTagTemplatesInput, ProfileUncheckedUpdateWithoutTagTemplatesInput>
    create: XOR<ProfileCreateWithoutTagTemplatesInput, ProfileUncheckedCreateWithoutTagTemplatesInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutTagTemplatesInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutTagTemplatesInput, ProfileUncheckedUpdateWithoutTagTemplatesInput>
  }

  export type ProfileUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutTagTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type FieldUpsertWithWhereUniqueWithoutTagTemplateInput = {
    where: FieldWhereUniqueInput
    update: XOR<FieldUpdateWithoutTagTemplateInput, FieldUncheckedUpdateWithoutTagTemplateInput>
    create: XOR<FieldCreateWithoutTagTemplateInput, FieldUncheckedCreateWithoutTagTemplateInput>
  }

  export type FieldUpdateWithWhereUniqueWithoutTagTemplateInput = {
    where: FieldWhereUniqueInput
    data: XOR<FieldUpdateWithoutTagTemplateInput, FieldUncheckedUpdateWithoutTagTemplateInput>
  }

  export type FieldUpdateManyWithWhereWithoutTagTemplateInput = {
    where: FieldScalarWhereInput
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyWithoutTagTemplateInput>
  }

  export type FieldScalarWhereInput = {
    AND?: FieldScalarWhereInput | FieldScalarWhereInput[]
    OR?: FieldScalarWhereInput[]
    NOT?: FieldScalarWhereInput | FieldScalarWhereInput[]
    id?: StringFilter<"Field"> | string
    label?: StringFilter<"Field"> | string
    type?: EnumFieldTypeFilter<"Field"> | $Enums.FieldType
    value?: JsonNullableFilter<"Field">
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
    tagTemplateId?: StringNullableFilter<"Field"> | string | null
    documentTemplateId?: StringNullableFilter<"Field"> | string | null
  }

  export type TagUpsertWithWhereUniqueWithoutTagTemplateInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutTagTemplateInput, TagUncheckedUpdateWithoutTagTemplateInput>
    create: XOR<TagCreateWithoutTagTemplateInput, TagUncheckedCreateWithoutTagTemplateInput>
  }

  export type TagUpdateWithWhereUniqueWithoutTagTemplateInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutTagTemplateInput, TagUncheckedUpdateWithoutTagTemplateInput>
  }

  export type TagUpdateManyWithWhereWithoutTagTemplateInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagTemplateInput>
  }

  export type CompanyCreateWithoutCompanyLocationsInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCompanyLocationsInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutCompanyInput
    documentTemplates?: DocumentTemplateUncheckedCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCompanyLocationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCompanyLocationsInput, CompanyUncheckedCreateWithoutCompanyLocationsInput>
  }

  export type LocationCreateWithoutCompanyLocationsInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutLocationsInput
    tags?: TagCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedLocationInput
  }

  export type LocationUncheckedCreateWithoutCompanyLocationsInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutCreatedLocationInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedLocationInput
  }

  export type LocationCreateOrConnectWithoutCompanyLocationsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutCompanyLocationsInput, LocationUncheckedCreateWithoutCompanyLocationsInput>
  }

  export type TagCreateWithoutCompanyLocationInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutCompanyLocationInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
    TagDocuments?: TagDocumentsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutCompanyLocationInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput>
  }

  export type TagCreateManyCompanyLocationInputEnvelope = {
    data: TagCreateManyCompanyLocationInput | TagCreateManyCompanyLocationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutCompanyLocationsInput = {
    update: XOR<CompanyUpdateWithoutCompanyLocationsInput, CompanyUncheckedUpdateWithoutCompanyLocationsInput>
    create: XOR<CompanyCreateWithoutCompanyLocationsInput, CompanyUncheckedCreateWithoutCompanyLocationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCompanyLocationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCompanyLocationsInput, CompanyUncheckedUpdateWithoutCompanyLocationsInput>
  }

  export type CompanyUpdateWithoutCompanyLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCompanyLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutCompanyNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type LocationUpsertWithoutCompanyLocationsInput = {
    update: XOR<LocationUpdateWithoutCompanyLocationsInput, LocationUncheckedUpdateWithoutCompanyLocationsInput>
    create: XOR<LocationCreateWithoutCompanyLocationsInput, LocationUncheckedCreateWithoutCompanyLocationsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutCompanyLocationsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutCompanyLocationsInput, LocationUncheckedUpdateWithoutCompanyLocationsInput>
  }

  export type LocationUpdateWithoutCompanyLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutLocationsNestedInput
    tags?: TagUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutCompanyLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedLocationNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutCompanyLocationInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCompanyLocationInput, TagUncheckedUpdateWithoutCompanyLocationInput>
    create: XOR<TagCreateWithoutCompanyLocationInput, TagUncheckedCreateWithoutCompanyLocationInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCompanyLocationInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCompanyLocationInput, TagUncheckedUpdateWithoutCompanyLocationInput>
  }

  export type TagUpdateManyWithWhereWithoutCompanyLocationInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutCompanyLocationInput>
  }

  export type FilesCreateWithoutDocumentTemplatesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: ProfileCreateNestedOneWithoutFilesInput
    profiles?: ProfileCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutImageInput
  }

  export type FilesUncheckedCreateWithoutDocumentTemplatesInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutPictureInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutImageInput
  }

  export type FilesCreateOrConnectWithoutDocumentTemplatesInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutDocumentTemplatesInput, FilesUncheckedCreateWithoutDocumentTemplatesInput>
  }

  export type CompanyCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDocumentTemplatesInput = {
    id?: string
    name: string
    website: string
    industry: $Enums.Industry
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutCompanyInput
    companyLocations?: CompanyLocationUncheckedCreateNestedManyWithoutCompanyInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDocumentTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDocumentTemplatesInput, CompanyUncheckedCreateWithoutDocumentTemplatesInput>
  }

  export type TagDocumentsCreateWithoutDocumentTemplateInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tag: TagCreateNestedOneWithoutTagDocumentsInput
  }

  export type TagDocumentsUncheckedCreateWithoutDocumentTemplateInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId: string
  }

  export type TagDocumentsCreateOrConnectWithoutDocumentTemplateInput = {
    where: TagDocumentsWhereUniqueInput
    create: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type TagDocumentsCreateManyDocumentTemplateInputEnvelope = {
    data: TagDocumentsCreateManyDocumentTemplateInput | TagDocumentsCreateManyDocumentTemplateInput[]
    skipDuplicates?: boolean
  }

  export type FilesUpsertWithoutDocumentTemplatesInput = {
    update: XOR<FilesUpdateWithoutDocumentTemplatesInput, FilesUncheckedUpdateWithoutDocumentTemplatesInput>
    create: XOR<FilesCreateWithoutDocumentTemplatesInput, FilesUncheckedCreateWithoutDocumentTemplatesInput>
    where?: FilesWhereInput
  }

  export type FilesUpdateToOneWithWhereWithoutDocumentTemplatesInput = {
    where?: FilesWhereInput
    data: XOR<FilesUpdateWithoutDocumentTemplatesInput, FilesUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type FilesUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneWithoutFilesNestedInput
    profiles?: ProfileUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutImageNestedInput
  }

  export type CompanyUpsertWithoutDocumentTemplatesInput = {
    update: XOR<CompanyUpdateWithoutDocumentTemplatesInput, CompanyUncheckedUpdateWithoutDocumentTemplatesInput>
    create: XOR<CompanyCreateWithoutDocumentTemplatesInput, CompanyUncheckedCreateWithoutDocumentTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDocumentTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDocumentTemplatesInput, CompanyUncheckedUpdateWithoutDocumentTemplatesInput>
  }

  export type CompanyUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDocumentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutCompanyNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutCompanyNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type TagDocumentsUpsertWithWhereUniqueWithoutDocumentTemplateInput = {
    where: TagDocumentsWhereUniqueInput
    update: XOR<TagDocumentsUpdateWithoutDocumentTemplateInput, TagDocumentsUncheckedUpdateWithoutDocumentTemplateInput>
    create: XOR<TagDocumentsCreateWithoutDocumentTemplateInput, TagDocumentsUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type TagDocumentsUpdateWithWhereUniqueWithoutDocumentTemplateInput = {
    where: TagDocumentsWhereUniqueInput
    data: XOR<TagDocumentsUpdateWithoutDocumentTemplateInput, TagDocumentsUncheckedUpdateWithoutDocumentTemplateInput>
  }

  export type TagDocumentsUpdateManyWithWhereWithoutDocumentTemplateInput = {
    where: TagDocumentsScalarWhereInput
    data: XOR<TagDocumentsUpdateManyMutationInput, TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateInput>
  }

  export type TagCreateWithoutTagDocumentsInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tagTemplate: TagTemplateCreateNestedOneWithoutTagsInput
    createdBy?: ProfileCreateNestedOneWithoutTagsInput
    createdLocation?: LocationCreateNestedOneWithoutTagsInput
    createdReader?: ReaderCreateNestedOneWithoutTagsInput
    companyLocation?: CompanyLocationCreateNestedOneWithoutTagsInput
    tagHistories?: TagHistoryCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutTagDocumentsInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutTagDocumentsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTagDocumentsInput, TagUncheckedCreateWithoutTagDocumentsInput>
  }

  export type DocumentTemplateCreateWithoutTagDocumentsInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FilesCreateNestedOneWithoutDocumentTemplatesInput
    company?: CompanyCreateNestedOneWithoutDocumentTemplatesInput
  }

  export type DocumentTemplateUncheckedCreateWithoutTagDocumentsInput = {
    id?: string
    name: string
    imageId?: string | null
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type DocumentTemplateCreateOrConnectWithoutTagDocumentsInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutTagDocumentsInput, DocumentTemplateUncheckedCreateWithoutTagDocumentsInput>
  }

  export type TagUpsertWithoutTagDocumentsInput = {
    update: XOR<TagUpdateWithoutTagDocumentsInput, TagUncheckedUpdateWithoutTagDocumentsInput>
    create: XOR<TagCreateWithoutTagDocumentsInput, TagUncheckedCreateWithoutTagDocumentsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutTagDocumentsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutTagDocumentsInput, TagUncheckedUpdateWithoutTagDocumentsInput>
  }

  export type TagUpdateWithoutTagDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutTagDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
  }

  export type DocumentTemplateUpsertWithoutTagDocumentsInput = {
    update: XOR<DocumentTemplateUpdateWithoutTagDocumentsInput, DocumentTemplateUncheckedUpdateWithoutTagDocumentsInput>
    create: XOR<DocumentTemplateCreateWithoutTagDocumentsInput, DocumentTemplateUncheckedCreateWithoutTagDocumentsInput>
    where?: DocumentTemplateWhereInput
  }

  export type DocumentTemplateUpdateToOneWithWhereWithoutTagDocumentsInput = {
    where?: DocumentTemplateWhereInput
    data: XOR<DocumentTemplateUpdateWithoutTagDocumentsInput, DocumentTemplateUncheckedUpdateWithoutTagDocumentsInput>
  }

  export type DocumentTemplateUpdateWithoutTagDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneWithoutDocumentTemplatesNestedInput
    company?: CompanyUpdateOneWithoutDocumentTemplatesNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutTagDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: FilesCreateNestedOneWithoutProfilesInput
    company?: CompanyCreateNestedOneWithoutProfilesInput
    files?: FilesCreateNestedManyWithoutCreatedByInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateCreateNestedManyWithoutCreatedByInput
    readers?: ReaderCreateNestedManyWithoutCreatedByInput
    locations?: LocationCreateNestedManyWithoutCreatedByInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FilesUncheckedCreateNestedManyWithoutCreatedByInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    tagHistories?: TagHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    tagTemplates?: TagTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    readers?: ReaderUncheckedCreateNestedManyWithoutCreatedByInput
    locations?: LocationUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type FilesCreateManyCreatedByInput = {
    id?: string
    name?: string | null
    fileName: string
    blobName: string
    containerName: string
    blobUrl: string
    contentType: string
    fileSize: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateManyCreatedByInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
  }

  export type TagHistoryCreateManyCreatedByInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagTemplateCreateManyCreatedByInput = {
    id?: string
    name: string
    imageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type ReaderCreateManyCreatedByInput = {
    address: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateManyCreatedByInput = {
    id?: string
    lat: number
    lon: number
    formattedAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FilesUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutPictureNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutImageNestedInput
    documentTemplates?: DocumentTemplateUncheckedUpdateManyWithoutImageNestedInput
  }

  export type FilesUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: StringFieldUpdateOperationsInput | string
    blobName?: StringFieldUpdateOperationsInput | string
    containerName?: StringFieldUpdateOperationsInput | string
    blobUrl?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagHistoryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
    tag?: TagUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdLocation?: LocationUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdReader?: ReaderUpdateOneRequiredWithoutTagHistoriesNestedInput
  }

  export type TagHistoryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagTemplateUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneRequiredWithoutTagTemplatesNestedInput
    company?: CompanyUpdateOneWithoutTagTemplatesNestedInput
    fields?: FieldUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: FieldUncheckedUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReaderUpdateWithoutCreatedByInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUpdateManyWithoutCreatedReaderNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderUncheckedUpdateWithoutCreatedByInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedReaderNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedReaderNestedInput
  }

  export type ReaderUncheckedUpdateManyWithoutCreatedByInput = {
    address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutCreatedLocationNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedLocationNestedInput
    companyLocations?: CompanyLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lon?: FloatFieldUpdateOperationsInput | number
    formattedAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyCompanyInput = {
    id?: string
    name: string
    pictureId?: string | null
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyLocationCreateManyCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationId: string
  }

  export type DocumentTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    imageId?: string | null
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    imageId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: FilesUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyLocationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutCompanyLocationsNestedInput
    tags?: TagUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneWithoutDocumentTemplatesNestedInput
    tagDocuments?: TagDocumentsUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagDocuments?: TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FilesUpdateOneRequiredWithoutTagTemplatesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput
    fields?: FieldUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: FieldUncheckedUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateManyCreatedReaderInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    companyLocationId?: string | null
  }

  export type TagHistoryCreateManyCreatedReaderInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    action: $Enums.TagAction
  }

  export type TagUpdateWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagHistoryUpdateWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
    tag?: TagUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdLocation?: LocationUpdateOneRequiredWithoutTagHistoriesNestedInput
  }

  export type TagHistoryUncheckedUpdateWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedReaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagCreateManyCreatedLocationInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
  }

  export type TagHistoryCreateManyCreatedLocationInput = {
    id?: string
    tagId: string
    createdById: string
    createdAt?: Date | string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type CompanyLocationCreateManyLocationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
  }

  export type TagUpdateWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagHistoryUpdateWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
    tag?: TagUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdReader?: ReaderUpdateOneRequiredWithoutTagHistoriesNestedInput
  }

  export type TagHistoryUncheckedUpdateWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryUncheckedUpdateManyWithoutCreatedLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type CompanyLocationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanyLocationsNestedInput
    tags?: TagUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutCompanyLocationNestedInput
  }

  export type CompanyLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
  }

  export type TagHistoryCreateManyTagInput = {
    id?: string
    createdById: string
    createdAt?: Date | string
    createdLocationId: string
    createdReaderId: string
    action: $Enums.TagAction
  }

  export type TagDocumentsCreateManyTagInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId: string
  }

  export type TagHistoryUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
    createdBy?: ProfileUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdLocation?: LocationUpdateOneRequiredWithoutTagHistoriesNestedInput
    createdReader?: ReaderUpdateOneRequiredWithoutTagHistoriesNestedInput
  }

  export type TagHistoryUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagHistoryUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdLocationId?: StringFieldUpdateOperationsInput | string
    createdReaderId?: StringFieldUpdateOperationsInput | string
    action?: EnumTagActionFieldUpdateOperationsInput | $Enums.TagAction
  }

  export type TagDocumentsUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutTagDocumentsNestedInput
  }

  export type TagDocumentsUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
  }

  export type TagDocumentsUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateManyPictureInput = {
    id?: string
    name: string
    email: string
    bio?: string | null
    role?: $Enums.Role | null
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagTemplateCreateManyImageInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type DocumentTemplateCreateManyImageInput = {
    id?: string
    name: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: string | null
  }

  export type ProfileUpdateWithoutPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutProfilesNestedInput
    files?: FilesUpdateManyWithoutCreatedByNestedInput
    tags?: TagUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FilesUncheckedUpdateManyWithoutCreatedByNestedInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByNestedInput
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    tagTemplates?: TagTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    readers?: ReaderUncheckedUpdateManyWithoutCreatedByNestedInput
    locations?: LocationUncheckedUpdateManyWithoutCreatedByNestedInput
    user?: UserUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagTemplateUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutTagTemplatesNestedInput
    createdBy?: ProfileUpdateOneRequiredWithoutTagTemplatesNestedInput
    fields?: FieldUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    fields?: FieldUncheckedUpdateManyWithoutTagTemplateNestedInput
    tags?: TagUncheckedUpdateManyWithoutTagTemplateNestedInput
  }

  export type TagTemplateUncheckedUpdateManyWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentTemplateUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutDocumentTemplatesNestedInput
    tagDocuments?: TagDocumentsUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    tagDocuments?: TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateManyWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldCreateManyTagTemplateInput = {
    id?: string
    label: string
    type: $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    documentTemplateId?: string | null
  }

  export type TagCreateManyTagTemplateInput = {
    id: string
    uid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
    companyLocationId?: string | null
  }

  export type FieldUpdateWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldUncheckedUpdateWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldUncheckedUpdateManyWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    value?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUpdateWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    companyLocation?: CompanyLocationUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutTagTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    companyLocationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateManyCompanyLocationInput = {
    id: string
    uid: string
    tagTemplateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdLocationId?: string | null
    createdReaderId?: string | null
  }

  export type TagUpdateWithoutCompanyLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagTemplate?: TagTemplateUpdateOneRequiredWithoutTagsNestedInput
    createdBy?: ProfileUpdateOneWithoutTagsNestedInput
    createdLocation?: LocationUpdateOneWithoutTagsNestedInput
    createdReader?: ReaderUpdateOneWithoutTagsNestedInput
    tagHistories?: TagHistoryUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutCompanyLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
    tagHistories?: TagHistoryUncheckedUpdateManyWithoutTagNestedInput
    TagDocuments?: TagDocumentsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutCompanyLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    tagTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdReaderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagDocumentsCreateManyDocumentTemplateInput = {
    id?: string
    fields: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId: string
  }

  export type TagDocumentsUpdateWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutTagDocumentsNestedInput
  }

  export type TagDocumentsUncheckedUpdateWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type TagDocumentsUncheckedUpdateManyWithoutDocumentTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProfileCountOutputTypeDefaultArgs instead
     */
    export type ProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReaderCountOutputTypeDefaultArgs instead
     */
    export type ReaderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReaderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FilesCountOutputTypeDefaultArgs instead
     */
    export type FilesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FilesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagTemplateCountOutputTypeDefaultArgs instead
     */
    export type TagTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyLocationCountOutputTypeDefaultArgs instead
     */
    export type CompanyLocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyLocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentTemplateCountOutputTypeDefaultArgs instead
     */
    export type DocumentTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReaderDefaultArgs instead
     */
    export type ReaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReaderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagHistoryDefaultArgs instead
     */
    export type TagHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FilesDefaultArgs instead
     */
    export type FilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FilesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldDefaultArgs instead
     */
    export type FieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagTemplateDefaultArgs instead
     */
    export type TagTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyLocationDefaultArgs instead
     */
    export type CompanyLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentTemplateDefaultArgs instead
     */
    export type DocumentTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDocumentsDefaultArgs instead
     */
    export type TagDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDocumentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}