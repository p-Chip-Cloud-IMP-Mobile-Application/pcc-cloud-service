// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Notes
//Add date times are stored in UTC formats. All dates and times received need to be sent in this format for readability and consistency

//New models for the flutter app
model Profile {
  id           String        @id @default(cuid()) // Primary key
  name         String // Name of the profile
  pictureId    String?
  picture      Files?        @relation("ProfileImage", fields: [pictureId], references: [id])
  email        String        @unique // Unique email for the profile
  bio          String? // Optional bio field
  role         Role?         @default(ADMIN) // New role field with default value
  companyId    String? // Foreign key to Company (optional)
  company      Company?      @relation(fields: [companyId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  files        Files[]       @relation("CreatedBy")
  tags         Tag[]
  tagHistories TagHistory[]
  tagTemplates TagTemplate[]
  readers      Reader[]
  locations    Location[]
  user         User?

  @@map("profiles") // Optional: Map the table name if needed
}

// Define an enum for different roles
enum Role {
  ADMIN
  USER
  GUEST
  // Add more roles as needed
}

model Company {
  id                String             @id @default(cuid()) // Primary key
  name              String // Company name
  website           String // Company website
  industry          Industry // Industry enum field
  profiles          Profile[] // One-to-many relationship with Profile
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyLocations  CompanyLocation[]
  documentTemplates DocumentTemplate[]
  tagTemplates      TagTemplate[]
  tags              Tag[]

  @@map("companies") // Optional: Map the table name if needed
}

// prisma/schema.prisma

enum Industry {
  food
  pharmaceutical
  automotive
  luxuryConsumerGoods
  other
}

model Reader {
  address      String       @id
  name         String
  createdById  String
  createdBy    Profile      @relation(fields: [createdById], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  tags         Tag[]
  tagHistories TagHistory[]

  @@map("readers")
}

model Location {
  id               String            @id @default(cuid()) // Primary key
  lat              Float
  lon              Float
  formattedAddress String
  createdById      String
  createdBy        Profile           @relation(fields: [createdById], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tags             Tag[]
  tagHistories     TagHistory[]
  companyLocations CompanyLocation[]

  @@map("locations")
}

model Tag {
  id                String           @id @default(cuid()) // Primary key
  uid               String?
  tagTemplateId     String
  tagTemplate       TagTemplate      @relation(fields: [tagTemplateId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String? // Foreign key to Profile
  createdBy         Profile?         @relation(fields: [createdById], references: [id])
  createdLocationId String? // Foreign key to LocationModel
  createdLocation   Location?        @relation(fields: [createdLocationId], references: [id])
  createdReaderId   String? // Foreign key to Reader
  createdReader     Reader?          @relation(fields: [createdReaderId], references: [address])
  companyLocationId String?
  companyLocation   CompanyLocation? @relation(fields: [companyLocationId], references: [id])
  isActive          Boolean          @default(true)
  tagHistories      TagHistory[]
  companyId         String?
  company           Company?         @relation(fields: [companyId], references: [id])
  tagDocuments      TagDocuments[]
  parents           Tag[]            @relation("ParentChild")
  children          Tag[]            @relation("ParentChild")

  @@map("tags") // Optional: Map the table name if needed
}

model TagHistory {
  id                String    @id @default(cuid()) // Primary key
  tagId             String // Foreign key to Tag
  tag               Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdById       String // Foreign key to Profile
  createdBy         Profile   @relation(fields: [createdById], references: [id])
  createdAt         DateTime  @default(now())
  createdLocationId String // Foreign key to LocationModel
  createdLocation   Location  @relation(fields: [createdLocationId], references: [id])
  createdReaderId   String // Foreign key to Reader
  createdReader     Reader    @relation(fields: [createdReaderId], references: [address])
  action            TagAction // Enum field to track the action

  @@map("tag_histories") // Optional: Map to a custom table name
}

enum TagAction {
  create
  search
  publish
  update
}

model Files {
  id                String             @id @default(cuid())
  name              String?
  fileName          String
  blobName          String             @unique
  containerName     String
  blobUrl           String             @unique
  contentType       String
  fileSize          Int
  createdById       String?
  createdBy         Profile?           @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  profiles          Profile[]          @relation("ProfileImage")
  tagTemplates      TagTemplate[]
  documentTemplates DocumentTemplate[]
}

model Field {
  id                 String       @id @default(cuid())
  label              String
  type               FieldType
  value              Json? // Use JSON to support dynamic data types (e.g., string, int)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  tagTemplateId      String?
  tagTemplate        TagTemplate? @relation(fields: [tagTemplateId], references: [id])
  documentTemplateId String?
}

enum FieldType {
  shortText // For single-line text inputs
  longText // For multi-line or paragraph text inputs
  number // For integer or decimal values
  date // For dates (could include date picker UI)
  image // To upload or select an image file
  file // To upload or select any generic file (e.g., PDF, DOCX)
  dropdown // For a dropdown list, where the user can select one option
  boolean // For a checkbox or toggle (true/false values)
  email // For email inputs with validation
  phoneNumber // For phone number inputs with formatting
  url // For URLs or web links with validation
  color // For a color picker input (e.g., hexadecimal color)
  location // For geographical location input, possibly with a map picker
}

model TagTemplate {
  id          String   @id @default(cuid())
  name        String
  imageId     String
  image       Files    @relation(fields: [imageId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])
  createdById String
  createdBy   Profile  @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fields      Field[]
  tags        Tag[]
  companyId   String?
}

model CompanyLocation {
  id         String   @id @default(cuid())
  name       String
  company    Company  @relation(fields: [companyId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  companyId  String
  locationId String
  tags       Tag[]
}

//reusable document created by a company. The fields has the same structure as the fields model, but is not intended to be reusable
model DocumentTemplate {
  id           String         @id @default(cuid())
  name         String
  imageId      String?
  image        Files?         @relation(fields: [imageId], references: [id])
  fields       Json
  company      Company?       @relation(fields: [companyId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tagDocuments TagDocuments[]
  companyId    String?
}

//completed document assigned to a tag
model TagDocuments {
  id                 String           @id @default(cuid())
  tag                Tag              @relation(fields: [tagId], references: [id])
  documentTemplate   DocumentTemplate @relation(fields: [documentTemplateId], references: [id])
  fields             Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  tagId              String
  documentTemplateId String
}

//User registered with p-Chip Cloud authenticated with firebase
model User {
  id        String   @id @default(cuid()) //UID from firebase
  email     String
  profileId String?  @unique
  profile   Profile? @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
